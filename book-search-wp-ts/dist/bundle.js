/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={4603:(e,t,n)=>{e.exports=n(3853)},653:(e,t,n)=>{n.d(t,{A:()=>l});var r=n(1354),o=n.n(r),a=n(6314),i=n.n(a)()(o());i.push([e.id,'*{border:none;margin:0;padding:0}body{font-family:"Lucida Sans","Lucida Sans Regular","Lucida Grande","Lucida Sans Unicode",Geneva,Verdana,sans-serif}',"",{version:3,sources:["webpack://./src/app.scss"],names:[],mappings:"AAAA,EACI,WAAA,CACA,QAAA,CACA,SAAA,CAGJ,KACI,+GAAA",sourcesContent:["*{\r\n    border: none;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nbody{\r\n    font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\r\n\r\n}"],sourceRoot:""}]);const l=i},3182:(e,t,n)=>{n.d(t,{A:()=>l});var r=n(1354),o=n.n(r),a=n(6314),i=n.n(a)()(o());i.push([e.id,".bookCardContainer{width:260px;display:flex;flex-direction:column;align-items:center;padding:15px;background:#f0f0f0}.bookCardContainer .imgContainer{padding:30px;width:140px}.bookCardContainer .imgContainer img{height:100%;width:100%;box-shadow:10px 10px 10px rgba(0,0,0,.25);cursor:pointer}.bookCardContainer .infoContainer{width:100%}.bookCardContainer .infoContainer .category{font-size:14px;color:#424242;text-decoration:underline;margin-bottom:10px}.bookCardContainer .infoContainer .bookName{font-size:15px;margin-bottom:5px;cursor:pointer}.bookCardContainer .infoContainer .authorName{font-size:14px;font-weight:normal;color:#424242;margin-bottom:20px}@media screen and (max-width: 500px){.bookCardContainer{width:220px}.bookCardContainer .imgContainer{padding:20px;width:120px}.bookCardContainer .infoContainer .category{font-size:12px;color:#424242;text-decoration:underline;margin-bottom:10px}.bookCardContainer .infoContainer .bookName{font-size:13px;margin-bottom:5px}.bookCardContainer .infoContainer .authorName{font-size:12px;font-weight:normal;color:#424242;margin-bottom:20px}}","",{version:3,sources:["webpack://./src/components/book-card/book-card.scss"],names:[],mappings:"AAAA,mBACI,WAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,YAAA,CACA,kBAAA,CAEA,iCACI,YAAA,CACA,WAAA,CAEA,qCACI,WAAA,CACA,UAAA,CACA,yCAAA,CACA,cAAA,CAKR,kCACI,UAAA,CAEA,4CACI,cAAA,CACA,aAAA,CACA,yBAAA,CACA,kBAAA,CAGJ,4CACI,cAAA,CACA,iBAAA,CACA,cAAA,CAGJ,8CACI,cAAA,CACA,kBAAA,CACA,aAAA,CACA,kBAAA,CAGR,qCA5CJ,mBA6CQ,WAAA,CAEA,iCACI,YAAA,CACA,WAAA,CAOA,4CACI,cAAA,CACA,aAAA,CACA,yBAAA,CACA,kBAAA,CAIJ,4CACI,cAAA,CACA,iBAAA,CAGJ,8CACI,cAAA,CACA,kBAAA,CACA,aAAA,CACA,kBAAA,CAAA",sourcesContent:[".bookCardContainer{\r\n    width: 260px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 15px;\r\n    background: rgb(240, 240, 240);\r\n\r\n    .imgContainer{\r\n        padding: 30px;\r\n        width: 140px;\r\n        \r\n        img{\r\n            height: 100%;\r\n            width: 100%;\r\n            box-shadow: 10px 10px 10px  rgba(0, 0, 0, 0.25);\r\n            cursor: pointer;\r\n        }\r\n\r\n    }\r\n\r\n    .infoContainer{\r\n        width: 100%;\r\n\r\n        .category{\r\n            font-size: 14px;\r\n            color: rgb(66, 66, 66);\r\n            text-decoration: underline;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .bookName{\r\n            font-size: 15px;\r\n            margin-bottom: 5px;\r\n            cursor: pointer;\r\n        }\r\n\r\n        .authorName{\r\n            font-size: 14px;\r\n            font-weight: normal;\r\n            color: rgb(66, 66, 66);\r\n            margin-bottom: 20px;\r\n        }\r\n    }\r\n    @media screen and (max-width: 500px) {\r\n        width: 220px;\r\n\r\n        .imgContainer{\r\n            padding: 20px;\r\n            width: 120px;\r\n\r\n    \r\n        }\r\n\r\n        .infoContainer{\r\n\r\n            .category{\r\n                font-size: 12px;\r\n                color: rgb(66, 66, 66);\r\n                text-decoration: underline;\r\n                margin-bottom: 10px;\r\n\r\n            }\r\n\r\n            .bookName{\r\n                font-size: 13px;\r\n                margin-bottom: 5px;\r\n            }\r\n            \r\n            .authorName{\r\n                font-size: 12px;\r\n                font-weight: normal;\r\n                color: rgb(66, 66, 66);\r\n                margin-bottom: 20px;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n"],sourceRoot:""}]);const l=i},7899:(e,t,n)=>{n.d(t,{A:()=>l});var r=n(1354),o=n.n(r),a=n(6314),i=n.n(a)()(o());i.push([e.id,".booksCount{text-align:center;margin-top:20px;margin-bottom:30px}.booklistContainer{display:flex;flex-wrap:wrap;justify-content:center;max-width:1400px;margin:auto;gap:50px}.moreButtonContainer{display:flex;justify-content:center;padding:30px 0 30px 0}.moreButtonContainer .moreButton{padding:15px 25px;border-radius:5px;font-size:15px;background:#f0f0f0}.moreButtonContainer .moreButton:hover{background:#d4d4d4}","",{version:3,sources:["webpack://./src/components/book-list/books-list.scss"],names:[],mappings:"AAAA,YACI,iBAAA,CACA,eAAA,CACA,kBAAA,CAGJ,mBACI,YAAA,CACA,cAAA,CACA,sBAAA,CACA,gBAAA,CACA,WAAA,CACA,QAAA,CAGJ,qBACI,YAAA,CACA,sBAAA,CACA,qBAAA,CAEA,iCACI,iBAAA,CACA,iBAAA,CACA,cAAA,CACA,kBAAA,CAIJ,uCACI,kBAAA",sourcesContent:[".booksCount{\r\n    text-align: center;\r\n    margin-top: 20px;\r\n    margin-bottom: 30px;\r\n}\r\n\r\n.booklistContainer {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    max-width: 1400px;\r\n    margin: auto;\r\n    gap: 50px;\r\n}\r\n\r\n.moreButtonContainer{\r\n    display: flex;\r\n    justify-content: center;\r\n    padding: 30px 0 30px 0;\r\n\r\n    .moreButton{\r\n        padding: 15px 25px;\r\n        border-radius: 5px;\r\n        font-size: 15px;\r\n        background: rgb(240, 240, 240);\r\n\r\n    }\r\n\r\n    .moreButton:hover{\r\n        background: rgb(212, 212, 212);\r\n    }\r\n}"],sourceRoot:""}]);const l=i},6426:(e,t,n)=>{n.d(t,{A:()=>l});var r=n(1354),o=n.n(r),a=n(6314),i=n.n(a)()(o());i.push([e.id,".bookPageContainer{display:flex}.bookPageContainer .bookFace{width:45%;padding:60px 0;background:#e7e7e7;display:flex;justify-content:center}.bookPageContainer .bookFace img{width:60%;box-shadow:20px 20px 10px rgba(0,0,0,.25)}.bookPageContainer .bookinfo{width:55%;padding:50px 20px}.bookPageContainer .bookinfo .bookMap{margin-bottom:40px;font-size:18px;cursor:pointer;text-decoration:underline}.bookPageContainer .bookinfo .bookName{margin-bottom:10px}.bookPageContainer .bookinfo .authorName{text-decoration:underline;color:#424242;font-size:18px;font-weight:normal;margin-bottom:10px}.bookPageContainer .bookinfo .descriptionContainer{border:1px solid #c6c6c6;box-sizing:border-box;padding:20px;min-height:200px}@media screen and (min-width: 1800px){.bookPageContainer .bookFace img{width:50%}}@media screen and (max-width: 800px){.bookPageContainer{display:block;box-sizing:border-box}.bookPageContainer .bookFace{width:auto}.bookPageContainer .bookFace img{width:60%}.bookPageContainer .bookinfo{width:auto}.bookPageContainer .bookinfo .bookMap{margin-bottom:40px;font-size:16px}.bookPageContainer .bookinfo .bookName{font-size:20px}.bookPageContainer .bookinfo .authorName{font-size:16px}.bookPageContainer .bookinfo .descriptionContainer .description{font-size:16px}}","",{version:3,sources:["webpack://./src/components/book-page/book-page.scss"],names:[],mappings:"AAAA,mBACI,YAAA,CAEA,6BACI,SAAA,CACA,cAAA,CACA,kBAAA,CACA,YAAA,CACA,sBAAA,CAEA,iCACI,SAAA,CACA,yCAAA,CAIR,6BACI,SAAA,CACA,iBAAA,CAEA,sCACI,kBAAA,CACA,cAAA,CACA,cAAA,CACA,yBAAA,CAGJ,uCACI,kBAAA,CAGJ,yCACI,yBAAA,CACA,aAAA,CACA,cAAA,CACA,kBAAA,CACA,kBAAA,CAGJ,mDACI,wBAAA,CACA,qBAAA,CACA,YAAA,CACA,gBAAA,CAQZ,sCAKY,iCACI,SAAA,CAAA,CAMhB,qCACI,mBACI,aAAA,CACA,qBAAA,CAEA,6BACI,UAAA,CAEA,iCACI,SAAA,CAIR,6BACI,UAAA,CAEA,sCACI,kBAAA,CACA,cAAA,CAGJ,uCACI,cAAA,CAGJ,yCACI,cAAA,CAKA,gEACI,cAAA,CAAA",sourcesContent:[".bookPageContainer {\r\n    display: flex;\r\n    \r\n    .bookFace {\r\n        width: 45%;\r\n        padding: 60px 0;\r\n        background: rgb(231, 231, 231);\r\n        display: flex;\r\n        justify-content: center;\r\n\r\n        img {\r\n            width: 60%;\r\n            box-shadow: 20px 20px 10px rgba(0, 0, 0, 0.25);\r\n        }\r\n    }\r\n\r\n    .bookinfo {\r\n        width: 55%;\r\n        padding: 50px 20px;\r\n\r\n        .bookMap{\r\n            margin-bottom: 40px;\r\n            font-size: 18px;\r\n            cursor: pointer;\r\n            text-decoration: underline;\r\n        }\r\n        \r\n        .bookName{\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .authorName{\r\n            text-decoration: underline;\r\n            color: rgb(66, 66, 66);\r\n            font-size: 18px;\r\n            font-weight: normal;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .descriptionContainer{\r\n            border: 1px solid rgb(198, 198, 198);\r\n            box-sizing: border-box;\r\n            padding: 20px;\r\n            min-height: 200px;\r\n            .description{\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@media screen and (min-width: 1800px) {\r\n    .bookPageContainer {\r\n\r\n        .bookFace {\r\n\r\n            img {\r\n                width: 50%;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@media screen and (max-width: 800px) {\r\n    .bookPageContainer {\r\n        display: block;\r\n        box-sizing: border-box;\r\n\r\n        .bookFace {\r\n            width: auto;\r\n\r\n            img {\r\n                width: 60%;\r\n            }\r\n        }\r\n\r\n        .bookinfo {\r\n            width: auto;\r\n\r\n            .bookMap{\r\n                margin-bottom: 40px;\r\n                font-size: 16px;\r\n            }\r\n\r\n            .bookName{\r\n                font-size: 20px;\r\n            }\r\n\r\n            .authorName{\r\n                font-size: 16px;\r\n            }\r\n            \r\n            .descriptionContainer{\r\n\r\n                .description{\r\n                    font-size: 16px;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],sourceRoot:""}]);const l=i},6642:(e,t,n)=>{n.d(t,{A:()=>d});var r=n(1354),o=n.n(r),a=n(6314),i=n.n(a),l=n(4417),u=n.n(l),s=new URL(n(1525),n.b),c=i()(o()),f=u()(s);c.push([e.id,`.header{background-image:url(${f});width:100%;background-size:cover;background-position:center;display:flex;justify-content:center;align-items:center}.header .content{max-width:1800px;padding-top:40px;padding-bottom:40px;flex-grow:1;display:flex;flex-direction:column}.header .content .headerH1{margin:auto;color:#fff;margin-bottom:40px;font-size:50px;text-align:center}.header .content .filter{margin:auto;width:100%}.header .content .filter .searchBarContainer{padding:0 20px 0 20px;margin-bottom:20px;display:flex;justify-content:center}.header .content .filter .searchBarContainer input{height:40px;width:100%;min-width:130px;max-width:700px;padding-left:20px;padding-right:20px;font-size:20px;flex-grow:1}.header .content .filter .searchBarContainer button{height:40px;width:40px;background:#fff;vertical-align:middle}.header .content .filter .searchBarContainer button img{width:40px;height:40px;padding:7px;box-sizing:border-box}.header .content .filter .searchBarContainer button img:hover{padding:6px}.header .content .filter .selectsContainer{display:flex;justify-content:center;flex-wrap:wrap}.header .content .filter .selectsContainer .selectItem{display:flex;justify-content:center;flex-wrap:wrap;margin:0 20px 20px 20px;align-items:center}.header .content .filter .selectsContainer .selectItem p{font-size:25px;color:#fff;margin-right:10px;width:130px}.header .content .filter .selectsContainer .selectItem select{box-sizing:content-box;height:30px;width:200px;min-height:30px;padding:5px 10px 5px 10px;font-size:20px;color:#424242}`,"",{version:3,sources:["webpack://./src/components/header/header.scss"],names:[],mappings:"AAAA,QACI,wDAAA,CACA,UAAA,CACA,qBAAA,CACA,0BAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CAEA,iBACI,gBAAA,CACA,gBAAA,CACA,mBAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CAEA,2BACI,WAAA,CACA,UAAA,CACA,kBAAA,CACA,cAAA,CACA,iBAAA,CAGJ,yBACI,WAAA,CACA,UAAA,CAEA,6CACI,qBAAA,CACA,kBAAA,CACA,YAAA,CACA,sBAAA,CAEA,mDACI,WAAA,CACA,UAAA,CACA,eAAA,CACA,eAAA,CACA,iBAAA,CACA,kBAAA,CACA,cAAA,CACA,WAAA,CAGJ,oDACI,WAAA,CACA,UAAA,CACA,eAAA,CACA,qBAAA,CAEA,wDAEI,UAAA,CACA,WAAA,CACA,WAAA,CACA,qBAAA,CAGJ,8DACI,WAAA,CAKZ,2CACI,YAAA,CACA,sBAAA,CACA,cAAA,CAEA,uDACI,YAAA,CACA,sBAAA,CACA,cAAA,CACA,uBAAA,CACA,kBAAA,CAEA,yDACI,cAAA,CACA,UAAA,CACA,iBAAA,CACA,WAAA,CAGJ,8DACI,sBAAA,CACA,WAAA,CACA,WAAA,CACA,eAAA,CACA,yBAAA,CACA,cAAA,CACA,aAAA",sourcesContent:['.header{\r\n    background-image: url("../../../public/img/HeaderBackground.png");\r\n    width: 100%;\r\n    background-size: cover;\r\n    background-position: center;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    .content{\r\n        max-width: 1800px;\r\n        padding-top: 40px;\r\n        padding-bottom: 40px;\r\n        flex-grow: 1;\r\n        display: flex;\r\n        flex-direction: column;\r\n        \r\n        .headerH1{\r\n            margin: auto;\r\n            color: white;\r\n            margin-bottom: 40px;\r\n            font-size: 50px;\r\n            text-align: center;\r\n        }\r\n\r\n        .filter{\r\n            margin: auto;\r\n            width: 100%;\r\n\r\n            .searchBarContainer{\r\n                padding: 0 20px 0 20px;\r\n                margin-bottom: 20px;\r\n                display: flex;\r\n                justify-content: center;\r\n                \r\n                input{\r\n                    height: 40px;\r\n                    width: 100%;\r\n                    min-width: 130px;\r\n                    max-width: 700px;\r\n                    padding-left: 20px;\r\n                    padding-right: 20px;\r\n                    font-size: 20px;\r\n                    flex-grow: 1;\r\n                }\r\n\r\n                button{\r\n                    height: 40px;\r\n                    width: 40px;\r\n                    background: white;\r\n                    vertical-align:middle;\r\n\r\n                    img{\r\n\r\n                        width: 40px;\r\n                        height: 40px;\r\n                        padding: 7px;\r\n                        box-sizing: border-box;\r\n                    }\r\n\r\n                    img:hover{\r\n                        padding: 6px;\r\n                    }\r\n                }\r\n            }\r\n\r\n            .selectsContainer{\r\n                display: flex;\r\n                justify-content: center;\r\n                flex-wrap: wrap;\r\n\r\n                .selectItem{\r\n                    display: flex;\r\n                    justify-content: center;\r\n                    flex-wrap: wrap;\r\n                    margin: 0 20px 20px 20px;\r\n                    align-items: center;\r\n\r\n                    p{\r\n                        font-size: 25px;\r\n                        color: white;\r\n                        margin-right: 10px;\r\n                        width: 130px;\r\n                    }\r\n                    \r\n                    select{\r\n                        box-sizing: content-box;\r\n                        height: 30px;\r\n                        width: 200px;\r\n                        min-height: 30px;\r\n                        padding: 5px 10px 5px 10px;\r\n                        font-size: 20px;\r\n                        color: rgb(66, 66, 66);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n}'],sourceRoot:""}]);const d=c},3004:(e,t,n)=>{n.d(t,{A:()=>d});var r=n(1354),o=n.n(r),a=n(6314),i=n.n(a),l=n(4417),u=n.n(l),s=new URL(n(715),n.b),c=i()(o()),f=u()(s);c.push([e.id,`.mainForLoading{display:flex;justify-content:center;align-items:center;flex-direction:column}.mainForLoading .lodingImgContainer{background-image:url(${f});background-size:cover;background-position:center;margin:30px;width:200px;height:180px}`,"",{version:3,sources:["webpack://./src/components/loading-page/loading-page.scss"],names:[],mappings:"AAAA,gBACI,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,qBAAA,CAEA,oCACI,wDAAA,CACA,qBAAA,CACA,0BAAA,CACA,WAAA,CACA,WAAA,CACA,YAAA",sourcesContent:['.mainForLoading{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n\r\n    .lodingImgContainer{\r\n        background-image: url("../../../public/img/loading.gif");\r\n        background-size: cover;\r\n        background-position: center;\r\n        margin: 30px;\r\n        width: 200px;\r\n        height: 180px;\r\n    }\r\n}'],sourceRoot:""}]);const d=c},6314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var u=this[l][0];null!=u&&(i[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},4417:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},1354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},124:e=>{var t,n=Object.defineProperty,r=Object.getOwnPropertyDescriptor,o=Object.getOwnPropertyNames,a=Object.prototype.hasOwnProperty,i={};((e,t)=>{for(var r in t)n(e,r,{get:t[r],enumerable:!0})})(i,{Immer:()=>G,applyPatches:()=>ie,castDraft:()=>se,castImmutable:()=>ce,createDraft:()=>le,current:()=>Y,enableMapSet:()=>ee,enablePatches:()=>Z,finishDraft:()=>ue,freeze:()=>E,immerable:()=>u,isDraft:()=>d,isDraftable:()=>p,nothing:()=>l,original:()=>g,produce:()=>ne,produceWithPatches:()=>re,setAutoFreeze:()=>oe,setUseStrictShallowCopy:()=>ae}),e.exports=(t=i,((e,t,i,l)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let i of o(t))!a.call(e,i)&&undefined!==i&&n(e,i,{get:()=>t[i],enumerable:!(l=r(t,i))||l.enumerable});return e})(n({},"__esModule",{value:!0}),t));var l=Symbol.for("immer-nothing"),u=Symbol.for("immer-draftable"),s=Symbol.for("immer-state");function c(e,...t){throw new Error(`[Immer] minified error nr: ${e}. Full error at: https://bit.ly/3cXEKWf`)}var f=Object.getPrototypeOf;function d(e){return!!e&&!!e[s]}function p(e){return!!e&&(m(e)||Array.isArray(e)||!!e[u]||!!e.constructor?.[u]||C(e)||k(e))}var h=Object.prototype.constructor.toString();function m(e){if(!e||"object"!=typeof e)return!1;let t=f(e);if(null===t)return!0;let n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===h}function g(e){return d(e)||c(15),e[s].t}function y(e,t){0===b(e)?Reflect.ownKeys(e).forEach((n=>{t(n,e[n],e)})):e.forEach(((n,r)=>t(r,n,e)))}function b(e){let t=e[s];return t?t.o:Array.isArray(e)?1:C(e)?2:k(e)?3:0}function v(e,t){return 2===b(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function w(e,t){return 2===b(e)?e.get(t):e[t]}function A(e,t,n){let r=b(e);2===r?e.set(t,n):3===r?e.add(n):e[t]=n}function C(e){return e instanceof Map}function k(e){return e instanceof Set}function S(e){return e.e||e.t}function x(e,t){if(C(e))return new Map(e);if(k(e))return new Set(e);if(Array.isArray(e))return Array.prototype.slice.call(e);let n=m(e);if(!0===t||"class_only"===t&&!n){let t=Object.getOwnPropertyDescriptors(e);delete t[s];let n=Reflect.ownKeys(t);for(let r=0;r<n.length;r++){let o=n[r],a=t[o];!1===a.writable&&(a.writable=!0,a.configurable=!0),(a.get||a.set)&&(t[o]={configurable:!0,writable:!0,enumerable:a.enumerable,value:e[o]})}return Object.create(f(e),t)}{let t=f(e);if(null!==t&&n)return{...e};let r=Object.create(t);return Object.assign(r,e)}}function E(e,t=!1){return O(e)||d(e)||!p(e)||(b(e)>1&&(e.set=e.add=e.clear=e.delete=_),Object.freeze(e),t&&Object.entries(e).forEach((([e,t])=>E(t,!0)))),e}function _(){c(2)}function O(e){return Object.isFrozen(e)}var P,N={};function T(e){let t=N[e];return t||c(0),t}function R(e,t){N[e]||(N[e]=t)}function j(){return P}function z(e,t){t&&(T("Patches"),e.f=[],e.h=[],e.b=t)}function M(e){I(e),e.a.forEach(B),e.a=null}function I(e){e===P&&(P=e.i)}function L(e){return P=function(e,t){return{a:[],i:e,p:t,P:!0,d:0}}(P,e)}function B(e){let t=e[s];0===t.o||1===t.o?t.x():t.m=!0}function D(e,t){t.d=t.a.length;let n=t.a[0];return void 0!==e&&e!==n?(n[s].s&&(M(t),c(4)),p(e)&&(e=F(t,e),t.i||W(t,e)),t.f&&T("Patches").T(n[s].t,e,t.f,t.h)):e=F(t,n,[]),M(t),t.f&&t.b(t.f,t.h),e!==l?e:void 0}function F(e,t,n){if(O(t))return t;let r=t[s];if(!r)return y(t,((o,a)=>U(e,r,t,o,a,n))),t;if(r.n!==e)return t;if(!r.s)return W(e,r.t,!0),r.t;if(!r.c){r.c=!0,r.n.d--;let t=r.e,o=t,a=!1;3===r.o&&(o=new Set(t),t.clear(),a=!0),y(o,((o,i)=>U(e,r,t,o,i,n,a))),W(e,t,!1),n&&e.f&&T("Patches").g(r,n,e.f,e.h)}return r.e}function U(e,t,n,r,o,a,i){if(d(o)){let i=F(e,o,a&&t&&3!==t.o&&!v(t.r,r)?a.concat(r):void 0);if(A(n,r,i),!d(i))return;e.P=!1}else i&&n.add(o);if(p(o)&&!O(o)){if(!e.p.y&&e.d<1)return;F(e,o),(!t||!t.n.i)&&"symbol"!=typeof r&&Object.prototype.propertyIsEnumerable.call(n,r)&&W(e,o)}}function W(e,t,n=!1){!e.i&&e.p.y&&e.P&&E(t,n)}var $={get(e,t){if(t===s)return e;let n=S(e);if(!v(n,t))return function(e,t,n){let r=H(t,n);return r?"value"in r?r.value:r.get?.call(e.u):void 0}(e,n,t);let r=n[t];return e.c||!p(r)?r:r===V(e.t,t)?(K(e),e.e[t]=J(r,e)):r},has:(e,t)=>t in S(e),ownKeys:e=>Reflect.ownKeys(S(e)),set(e,t,n){let r=H(S(e),t);if(r?.set)return r.set.call(e.u,n),!0;if(!e.s){let r=V(S(e),t),o=r?.[s];if(o&&o.t===n)return e.e[t]=n,e.r[t]=!1,!0;if(function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(n,r)&&(void 0!==n||v(e.t,t)))return!0;K(e),Q(e)}return e.e[t]===n&&(void 0!==n||t in e.e)||Number.isNaN(n)&&Number.isNaN(e.e[t])||(e.e[t]=n,e.r[t]=!0),!0},deleteProperty:(e,t)=>(void 0!==V(e.t,t)||t in e.t?(e.r[t]=!1,K(e),Q(e)):delete e.r[t],e.e&&delete e.e[t],!0),getOwnPropertyDescriptor(e,t){let n=S(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r&&{writable:!0,configurable:1!==e.o||"length"!==t,enumerable:r.enumerable,value:n[t]}},defineProperty(){c(11)},getPrototypeOf:e=>f(e.t),setPrototypeOf(){c(12)}},q={};function V(e,t){let n=e[s];return(n?S(n):e)[t]}function H(e,t){if(!(t in e))return;let n=f(e);for(;n;){let e=Object.getOwnPropertyDescriptor(n,t);if(e)return e;n=f(n)}}function Q(e){e.s||(e.s=!0,e.i&&Q(e.i))}function K(e){e.e||(e.e=x(e.t,e.n.p.S))}y($,((e,t)=>{q[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),q.deleteProperty=function(e,t){return q.set.call(this,e,t,void 0)},q.set=function(e,t,n){return $.set.call(this,e[0],t,n,e[0])};var G=class{constructor(e){this.y=!0,this.S=!1,this.produce=(e,t,n)=>{if("function"==typeof e&&"function"!=typeof t){let n=t;t=e;let r=this;return function(e=n,...o){return r.produce(e,(e=>t.call(this,e,...o)))}}let r;if("function"!=typeof t&&c(6),void 0!==n&&"function"!=typeof n&&c(7),p(e)){let o=L(this),a=J(e,void 0),i=!0;try{r=t(a),i=!1}finally{i?M(o):I(o)}return z(o,n),D(r,o)}if(!e||"object"!=typeof e){if(r=t(e),void 0===r&&(r=e),r===l&&(r=void 0),this.y&&E(r,!0),n){let t=[],o=[];T("Patches").T(e,r,t,o),n(t,o)}return r}c(1)},this.produceWithPatches=(e,t)=>{if("function"==typeof e)return(t,...n)=>this.produceWithPatches(t,(t=>e(t,...n)));let n,r;return[this.produce(e,t,((e,t)=>{n=e,r=t})),n,r]},"boolean"==typeof e?.autoFreeze&&this.setAutoFreeze(e.autoFreeze),"boolean"==typeof e?.useStrictShallowCopy&&this.setUseStrictShallowCopy(e.useStrictShallowCopy)}createDraft(e){p(e)||c(8),d(e)&&(e=Y(e));let t=L(this),n=J(e,void 0);return n[s].l=!0,I(t),n}finishDraft(e,t){let n=e&&e[s];(!n||!n.l)&&c(9);let{n:r}=n;return z(r,t),D(void 0,r)}setAutoFreeze(e){this.y=e}setUseStrictShallowCopy(e){this.S=e}applyPatches(e,t){let n;for(n=t.length-1;n>=0;n--){let r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));let r=T("Patches").A;return d(e)?r(e,t):this.produce(e,(e=>r(e,t)))}};function J(e,t){let n=C(e)?T("MapSet").I(e,t):k(e)?T("MapSet").D(e,t):function(e,t){let n=Array.isArray(e),r={o:n?1:0,n:t?t.n:j(),s:!1,c:!1,r:{},i:t,t:e,u:null,e:null,x:null,l:!1},o=r,a=$;n&&(o=[r],a=q);let{revoke:i,proxy:l}=Proxy.revocable(o,a);return r.u=l,r.x=i,l}(e,t);return(t?t.n:j()).a.push(n),n}function Y(e){return d(e)||c(10),X(e)}function X(e){if(!p(e)||O(e))return e;let t,n=e[s];if(n){if(!n.s)return n.t;n.c=!0,t=x(e,n.n.p.S)}else t=x(e,!0);return y(t,((e,n)=>{A(t,e,X(n))})),n&&(n.c=!1),t}function Z(){let e="replace",t="add",n="remove";function r(e){if(!p(e))return e;if(Array.isArray(e))return e.map(r);if(C(e))return new Map(Array.from(e.entries()).map((([e,t])=>[e,r(t)])));if(k(e))return new Set(Array.from(e).map(r));let t=Object.create(f(e));for(let n in e)t[n]=r(e[n]);return v(e,u)&&(t[u]=e[u]),t}function o(e){return d(e)?r(e):e}R("Patches",{A:function(o,a){return a.forEach((a=>{let{path:i,op:l}=a,u=o;for(let e=0;e<i.length-1;e++){let t=b(u),n=i[e];"string"!=typeof n&&"number"!=typeof n&&(n=""+n),(0===t||1===t)&&("__proto__"===n||"constructor"===n)&&c(19),"function"==typeof u&&"prototype"===n&&c(19),u=w(u,n),"object"!=typeof u&&c(18,i.join("/"))}let s=b(u),f=r(a.value),d=i[i.length-1];switch(l){case e:switch(s){case 2:return u.set(d,f);case 3:c(16);default:return u[d]=f}case t:switch(s){case 1:return"-"===d?u.push(f):u.splice(d,0,f);case 2:return u.set(d,f);case 3:return u.add(f);default:return u[d]=f}case n:switch(s){case 1:return u.splice(d,1);case 2:return u.delete(d);case 3:return u.delete(a.value);default:return delete u[d]}default:c(17)}})),o},g:function(r,a,i,l){switch(r.o){case 0:case 2:return function(r,a,i,l){let{t:u,e:s}=r;y(r.r,((r,c)=>{let f=w(u,r),d=w(s,r),p=c?v(u,r)?e:t:n;if(f===d&&p===e)return;let h=a.concat(r);i.push(p===n?{op:p,path:h}:{op:p,path:h,value:d}),l.push(p===t?{op:n,path:h}:p===n?{op:t,path:h,value:o(f)}:{op:e,path:h,value:o(f)})}))}(r,a,i,l);case 1:return function(r,a,i,l){let{t:u,r:s}=r,c=r.e;c.length<u.length&&([u,c]=[c,u],[i,l]=[l,i]);for(let t=0;t<u.length;t++)if(s[t]&&c[t]!==u[t]){let n=a.concat([t]);i.push({op:e,path:n,value:o(c[t])}),l.push({op:e,path:n,value:o(u[t])})}for(let e=u.length;e<c.length;e++){let n=a.concat([e]);i.push({op:t,path:n,value:o(c[e])})}for(let e=c.length-1;u.length<=e;--e){let t=a.concat([e]);l.push({op:n,path:t})}}(r,a,i,l);case 3:return function(e,r,o,a){let{t:i,e:l}=e,u=0;i.forEach((e=>{if(!l.has(e)){let i=r.concat([u]);o.push({op:n,path:i,value:e}),a.unshift({op:t,path:i,value:e})}u++})),u=0,l.forEach((e=>{if(!i.has(e)){let i=r.concat([u]);o.push({op:t,path:i,value:e}),a.unshift({op:n,path:i,value:e})}u++}))}(r,a,i,l)}},T:function(t,n,r,o){r.push({op:e,path:[],value:n===l?void 0:n}),o.push({op:e,path:[],value:t})}})}function ee(){class e extends Map{constructor(e,t){super(),this[s]={o:2,i:t,n:t?t.n:j(),s:!1,c:!1,e:void 0,r:void 0,t:e,u:this,l:!1,m:!1}}get size(){return S(this[s]).size}has(e){return S(this[s]).has(e)}set(e,n){let r=this[s];return o(r),(!S(r).has(e)||S(r).get(e)!==n)&&(t(r),Q(r),r.r.set(e,!0),r.e.set(e,n),r.r.set(e,!0)),this}delete(e){if(!this.has(e))return!1;let n=this[s];return o(n),t(n),Q(n),n.t.has(e)?n.r.set(e,!1):n.r.delete(e),n.e.delete(e),!0}clear(){let e=this[s];o(e),S(e).size&&(t(e),Q(e),e.r=new Map,y(e.t,(t=>{e.r.set(t,!1)})),e.e.clear())}forEach(e,t){S(this[s]).forEach(((n,r,o)=>{e.call(t,this.get(r),r,this)}))}get(e){let n=this[s];o(n);let r=S(n).get(e);if(n.c||!p(r)||r!==n.t.get(e))return r;let a=J(r,n);return t(n),n.e.set(e,a),a}keys(){return S(this[s]).keys()}values(){let e=this.keys();return{[Symbol.iterator]:()=>this.values(),next:()=>{let t=e.next();return t.done?t:{done:!1,value:this.get(t.value)}}}}entries(){let e=this.keys();return{[Symbol.iterator]:()=>this.entries(),next:()=>{let t=e.next();if(t.done)return t;let n=this.get(t.value);return{done:!1,value:[t.value,n]}}}}[Symbol.iterator](){return this.entries()}}function t(e){e.e||(e.r=new Map,e.e=new Map(e.t))}class n extends Set{constructor(e,t){super(),this[s]={o:3,i:t,n:t?t.n:j(),s:!1,c:!1,e:void 0,t:e,u:this,a:new Map,m:!1,l:!1}}get size(){return S(this[s]).size}has(e){let t=this[s];return o(t),t.e?!!(t.e.has(e)||t.a.has(e)&&t.e.has(t.a.get(e))):t.t.has(e)}add(e){let t=this[s];return o(t),this.has(e)||(r(t),Q(t),t.e.add(e)),this}delete(e){if(!this.has(e))return!1;let t=this[s];return o(t),r(t),Q(t),t.e.delete(e)||!!t.a.has(e)&&t.e.delete(t.a.get(e))}clear(){let e=this[s];o(e),S(e).size&&(r(e),Q(e),e.e.clear())}values(){let e=this[s];return o(e),r(e),e.e.values()}entries(){let e=this[s];return o(e),r(e),e.e.entries()}keys(){return this.values()}[Symbol.iterator](){return this.values()}forEach(e,t){let n=this.values(),r=n.next();for(;!r.done;)e.call(t,r.value,r.value,this),r=n.next()}}function r(e){e.e||(e.e=new Set,e.t.forEach((t=>{if(p(t)){let n=J(t,e);e.a.set(t,n),e.e.add(n)}else e.e.add(t)})))}function o(e){e.m&&c(3,JSON.stringify(S(e)))}R("MapSet",{I:function(t,n){return new e(t,n)},D:function(e,t){return new n(e,t)}})}var te=new G,ne=te.produce,re=te.produceWithPatches.bind(te),oe=te.setAutoFreeze.bind(te),ae=te.setUseStrictShallowCopy.bind(te),ie=te.applyPatches.bind(te),le=te.createDraft.bind(te),ue=te.finishDraft.bind(te);function se(e){return e}function ce(e){return e}},9407:(e,t,n)=>{e.exports=n(124)},2551:(e,t,n)=>{var r=n(6540),o=n(9982);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function v(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,A=Symbol.for("react.element"),C=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),x=Symbol.for("react.profiler"),E=Symbol.for("react.provider"),_=Symbol.for("react.context"),O=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),R=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var j=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var z=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=z&&e[z]||e["@@iterator"])?e:null}var I,L=Object.assign;function B(e){if(void 0===I)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);I=t&&t[1]||""}return"\n"+I+e}var D=!1;function F(e,t){if(!e||D)return"";D=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var u="\n"+o[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{D=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?B(e):""}function U(e){switch(e.tag){case 5:return B(e.type);case 16:return B("Lazy");case 13:return B("Suspense");case 19:return B("SuspenseList");case 0:case 2:case 15:return F(e.type,!1);case 11:return F(e.type.render,!1);case 1:return F(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case C:return"Portal";case x:return"Profiler";case S:return"StrictMode";case P:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case E:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(t=e.displayName||null)?t:W(e.type)||"Memo";case R:t=e._payload,e=e._init;try{return W(e(t))}catch(e){}}return null}function $(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return W(t);case 8:return t===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function q(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function H(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=V(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return L({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function J(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Y(e,t){null!=(t=t.checked)&&v(e,"checked",t,!1)}function X(e,t){Y(e,t);var n=q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+q(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return L({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:q(n)}}function ae(e,t){var n=q(t.value),r=q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=L({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function be(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function ve(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Ae(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,ke=null,Se=null;function xe(e){if(e=wo(e)){if("function"!=typeof Ce)throw Error(a(280));var t=e.stateNode;t&&(t=Co(t),Ce(e.stateNode,e.type,t))}}function Ee(e){ke?Se?Se.push(e):Se=[e]:ke=e}function _e(){if(ke){var e=ke,t=Se;if(Se=ke=null,xe(e),t)for(e=0;e<t.length;e++)xe(t[e])}}function Oe(e,t){return e(t)}function Pe(){}var Ne=!1;function Te(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return Oe(e,t,n)}finally{Ne=!1,(null!==ke||null!==Se)&&(Pe(),_e())}}function Re(e,t){var n=e.stateNode;if(null===n)return null;var r=Co(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var je=!1;if(c)try{var ze={};Object.defineProperty(ze,"passive",{get:function(){je=!0}}),window.addEventListener("test",ze,ze),window.removeEventListener("test",ze,ze)}catch(ce){je=!1}function Me(e,t,n,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Ie=!1,Le=null,Be=!1,De=null,Fe={onError:function(e){Ie=!0,Le=e}};function Ue(e,t,n,r,o,a,i,l,u){Ie=!1,Le=null,Me.apply(Fe,arguments)}function We(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function $e(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function qe(e){if(We(e)!==e)throw Error(a(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=We(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return qe(o),e;if(i===r)return qe(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=He(e);if(null!==t)return t;e=e.sibling}return null}var Qe=o.unstable_scheduleCallback,Ke=o.unstable_cancelCallback,Ge=o.unstable_shouldYield,Je=o.unstable_requestPaint,Ye=o.unstable_now,Xe=o.unstable_getCurrentPriorityLevel,Ze=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~o;0!==l?r=ft(l):0!=(a&=i)&&(r=ft(a))}else 0!=(i=n&~o)?r=ft(i):0!==a&&(r=ft(a));if(0===r)return 0;if(0!==t&&t!==r&&!(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&4194240&a))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return!(4194240&(st<<=1))&&(st=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function bt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var vt=0;function wt(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var At,Ct,kt,St,xt,Et=!1,_t=[],Ot=null,Pt=null,Nt=null,Tt=new Map,Rt=new Map,jt=[],zt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Mt(e,t){switch(e){case"focusin":case"focusout":Ot=null;break;case"dragenter":case"dragleave":Pt=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Rt.delete(t.pointerId)}}function It(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&Ct(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Lt(e){var t=vo(e.target);if(null!==t){var n=We(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=$e(n)))return e.blockedOn=t,void xt(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Bt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&Ct(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Dt(e,t,n){Bt(e)&&n.delete(t)}function Ft(){Et=!1,null!==Ot&&Bt(Ot)&&(Ot=null),null!==Pt&&Bt(Pt)&&(Pt=null),null!==Nt&&Bt(Nt)&&(Nt=null),Tt.forEach(Dt),Rt.forEach(Dt)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,Et||(Et=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ft)))}function Wt(e){function t(t){return Ut(t,e)}if(0<_t.length){Ut(_t[0],e);for(var n=1;n<_t.length;n++){var r=_t[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ot&&Ut(Ot,e),null!==Pt&&Ut(Pt,e),null!==Nt&&Ut(Nt,e),Tt.forEach(t),Rt.forEach(t),n=0;n<jt.length;n++)(r=jt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<jt.length&&null===(n=jt[0]).blockedOn;)Lt(n),null===n.blockedOn&&jt.shift()}var $t=w.ReactCurrentBatchConfig,qt=!0;function Vt(e,t,n,r){var o=vt,a=$t.transition;$t.transition=null;try{vt=1,Qt(e,t,n,r)}finally{vt=o,$t.transition=a}}function Ht(e,t,n,r){var o=vt,a=$t.transition;$t.transition=null;try{vt=4,Qt(e,t,n,r)}finally{vt=o,$t.transition=a}}function Qt(e,t,n,r){if(qt){var o=Gt(e,t,n,r);if(null===o)qr(e,t,r,Kt,n),Mt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Ot=It(Ot,e,t,n,r,o),!0;case"dragenter":return Pt=It(Pt,e,t,n,r,o),!0;case"mouseover":return Nt=It(Nt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Tt.set(a,It(Tt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Rt.set(a,It(Rt.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Mt(e,r),4&t&&-1<zt.indexOf(e)){for(;null!==o;){var a=wo(o);if(null!==a&&At(a),null===(a=Gt(e,t,n,r))&&qr(e,t,r,Kt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else qr(e,t,r,null,n)}}var Kt=null;function Gt(e,t,n,r){if(Kt=null,null!==(e=vo(e=Ae(r))))if(null===(t=We(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=$e(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Jt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Yt=null,Xt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Xt,r=n.length,o="value"in Yt?Yt.value:Yt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Zt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return L(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(sn),fn=L({},sn,{view:0,detail:0}),dn=on(fn),pn=L({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:xn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),mn=on(L({},pn,{dataTransfer:0})),gn=on(L({},fn,{relatedTarget:0})),yn=on(L({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=L({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),vn=on(bn),wn=on(L({},sn,{data:0})),An={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function xn(){return Sn}var En=L({},fn,{key:function(e){if(e.key){var t=An[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:xn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),_n=on(En),On=on(L({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=on(L({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:xn})),Nn=on(L({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=L({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=on(Tn),jn=[9,13,27,32],zn=c&&"CompositionEvent"in window,Mn=null;c&&"documentMode"in document&&(Mn=document.documentMode);var In=c&&"TextEvent"in window&&!Mn,Ln=c&&(!zn||Mn&&8<Mn&&11>=Mn),Bn=String.fromCharCode(32),Dn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==jn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function Vn(e,t,n,r){Ee(r),0<(t=Hr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,Qn=null;function Kn(e){Br(e,0)}function Gn(e){if(Q(Ao(e)))return e}function Jn(e,t){if("change"===e)return t}var Yn=!1;if(c){var Xn;if(c){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Xn=Zn}else Xn=!1;Yn=Xn&&(!document.documentMode||9<document.documentMode)}function tr(){Hn&&(Hn.detachEvent("onpropertychange",nr),Qn=Hn=null)}function nr(e){if("value"===e.propertyName&&Gn(Qn)){var t=[];Vn(t,Qn,e,Ae(e)),Te(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Qn=n,(Hn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Qn)}function ar(e,t){if("click"===e)return Gn(t)}function ir(e,t){if("input"===e||"change"===e)return Gn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=cr(n,a);var i=cr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,yr=null,br=null,vr=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;vr||null==gr||gr!==K(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},br&&ur(br,r)||(br=r,0<(r=Hr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function Ar(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Cr={animationend:Ar("Animation","AnimationEnd"),animationiteration:Ar("Animation","AnimationIteration"),animationstart:Ar("Animation","AnimationStart"),transitionend:Ar("Transition","TransitionEnd")},kr={},Sr={};function xr(e){if(kr[e])return kr[e];if(!Cr[e])return e;var t,n=Cr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Sr)return kr[e]=n[t];return e}c&&(Sr=document.createElement("div").style,"AnimationEvent"in window||(delete Cr.animationend.animation,delete Cr.animationiteration.animation,delete Cr.animationstart.animation),"TransitionEvent"in window||delete Cr.transitionend.transition);var Er=xr("animationend"),_r=xr("animationiteration"),Or=xr("animationstart"),Pr=xr("transitionend"),Nr=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Rr(e,t){Nr.set(e,t),u(t,[e])}for(var jr=0;jr<Tr.length;jr++){var zr=Tr[jr];Rr(zr.toLowerCase(),"on"+(zr[0].toUpperCase()+zr.slice(1)))}Rr(Er,"onAnimationEnd"),Rr(_r,"onAnimationIteration"),Rr(Or,"onAnimationStart"),Rr("dblclick","onDoubleClick"),Rr("focusin","onFocus"),Rr("focusout","onBlur"),Rr(Pr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Mr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ir=new Set("cancel close invalid load scroll toggle".split(" ").concat(Mr));function Lr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,s){if(Ue.apply(this,arguments),Ie){if(!Ie)throw Error(a(198));var c=Le;Ie=!1,Le=null,Be||(Be=!0,De=c)}}(r,t,void 0,e),e.currentTarget=null}function Br(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;Lr(o,l,s),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;Lr(o,l,s),a=u}}}if(Be)throw e=De,Be=!1,De=null,e}function Dr(e,t){var n=t[go];void 0===n&&(n=t[go]=new Set);var r=e+"__bubble";n.has(r)||($r(t,e,2,!1),n.add(r))}function Fr(e,t,n){var r=0;t&&(r|=4),$r(n,e,r,t)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function Wr(e){if(!e[Ur]){e[Ur]=!0,i.forEach((function(t){"selectionchange"!==t&&(Ir.has(t)||Fr(t,!1,e),Fr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ur]||(t[Ur]=!0,Fr("selectionchange",!1,t))}}function $r(e,t,n,r){switch(Jt(t)){case 1:var o=Vt;break;case 4:o=Ht;break;default:o=Qt}n=o.bind(null,t,n,e),o=void 0,!je||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function qr(e,t,n,r,o){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=vo(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}Te((function(){var r=a,o=Ae(n),i=[];e:{var l=Nr.get(e);if(void 0!==l){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=_n;break;case"focusin":s="focus",u=gn;break;case"focusout":s="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pn;break;case Er:case _r:case Or:u=yn;break;case Pr:u=Nn;break;case"scroll":u=dn;break;case"wheel":u=Rn;break;case"copy":case"cut":case"paste":u=vn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=On}var c=!!(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Re(h,d))&&c.push(Vr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),i.push({event:l,listeners:c}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!vo(s)&&!s[mo])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?vo(s):null)&&(s!==(f=We(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=On,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:Ao(u),p=null==s?l:Ao(s),(l=new c(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,vo(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Qr(p))h++;for(p=0,m=d;m;m=Qr(m))p++;for(;0<h-p;)c=Qr(c),h--;for(;0<p-h;)d=Qr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Qr(c),d=Qr(d)}c=null}else c=null;null!==u&&Kr(i,l,u,c,!1),null!==s&&null!==f&&Kr(i,f,s,c,!0)}if("select"===(u=(l=r?Ao(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var g=Jn;else if(qn(l))if(Yn)g=ir;else{g=or;var y=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=ar);switch(g&&(g=g(e,r))?Vn(i,g,n,o):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&ee(l,"number",l.value)),y=r?Ao(r):window,e){case"focusin":(qn(y)||"true"===y.contentEditable)&&(gr=y,yr=r,br=null);break;case"focusout":br=yr=gr=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,wr(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(i,n,o)}var b;if(zn)e:{switch(e){case"compositionstart":var v="onCompositionStart";break e;case"compositionend":v="onCompositionEnd";break e;case"compositionupdate":v="onCompositionUpdate";break e}v=void 0}else Wn?Fn(e,n)&&(v="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(v="onCompositionStart");v&&(Ln&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==v?"onCompositionEnd"===v&&Wn&&(b=en()):(Xt="value"in(Yt=o)?Yt.value:Yt.textContent,Wn=!0)),0<(y=Hr(r,v)).length&&(v=new wn(v,e,null,n,o),i.push({event:v,listeners:y}),(b||null!==(b=Un(n)))&&(v.data=b))),(b=In?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Dn=!0,Bn);case"textInput":return(e=t.data)===Bn&&Dn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!zn&&Fn(e,t)?(e=en(),Zt=Xt=Yt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Hr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=b)}Br(i,t)}))}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Re(e,n))&&r.unshift(Vr(e,a,o)),null!=(a=Re(e,t))&&r.push(Vr(e,a,o))),e=e.return}return r}function Qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Re(n,a))&&i.unshift(Vr(n,u,l)):o||null!=(u=Re(n,a))&&i.push(Vr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Gr=/\r\n?/g,Jr=/\u0000|\uFFFD/g;function Yr(e){return("string"==typeof e?e:""+e).replace(Gr,"\n").replace(Jr,"")}function Xr(e,t,n){if(t=Yr(t),Yr(e)!==t&&n)throw Error(a(425))}function Zr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function uo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Wt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Wt(t)}function so(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,go="__reactEvents$"+fo,yo="__reactListeners$"+fo,bo="__reactHandles$"+fo;function vo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[po])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Ao(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Co(e){return e[ho]||null}var ko=[],So=-1;function xo(e){return{current:e}}function Eo(e){0>So||(e.current=ko[So],ko[So]=null,So--)}function _o(e,t){So++,ko[So]=e.current,e.current=t}var Oo={},Po=xo(Oo),No=xo(!1),To=Oo;function Ro(e,t){var n=e.type.contextTypes;if(!n)return Oo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function jo(e){return null!=e.childContextTypes}function zo(){Eo(No),Eo(Po)}function Mo(e,t,n){if(Po.current!==Oo)throw Error(a(168));_o(Po,t),_o(No,n)}function Io(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,$(e)||"Unknown",o));return L({},n,r)}function Lo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Oo,To=Po.current,_o(Po,e),_o(No,No.current),!0}function Bo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Io(e,t,To),r.__reactInternalMemoizedMergedChildContext=e,Eo(No),Eo(Po),_o(Po,e)):Eo(No),_o(No,n)}var Do=null,Fo=!1,Uo=!1;function Wo(e){null===Do?Do=[e]:Do.push(e)}function $o(){if(!Uo&&null!==Do){Uo=!0;var e=0,t=vt;try{var n=Do;for(vt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Do=null,Fo=!1}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),Qe(Ze,$o),t}finally{vt=t,Uo=!1}}return null}var qo=[],Vo=0,Ho=null,Qo=0,Ko=[],Go=0,Jo=null,Yo=1,Xo="";function Zo(e,t){qo[Vo++]=Qo,qo[Vo++]=Ho,Ho=e,Qo=t}function ea(e,t,n){Ko[Go++]=Yo,Ko[Go++]=Xo,Ko[Go++]=Jo,Jo=e;var r=Yo;e=Xo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Yo=1<<32-it(t)+o|n<<o|r,Xo=a+e}else Yo=1<<a|n<<o|r,Xo=e}function ta(e){null!==e.return&&(Zo(e,1),ea(e,1,0))}function na(e){for(;e===Ho;)Ho=qo[--Vo],qo[Vo]=null,Qo=qo[--Vo],qo[Vo]=null;for(;e===Jo;)Jo=Ko[--Go],Ko[Go]=null,Xo=Ko[--Go],Ko[Go]=null,Yo=Ko[--Go],Ko[Go]=null}var ra=null,oa=null,aa=!1,ia=null;function la(e,t){var n=Ts(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ua(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=so(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Jo?{id:Yo,overflow:Xo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ts(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function sa(e){return!(!(1&e.mode)||128&e.flags)}function ca(e){if(aa){var t=oa;if(t){var n=t;if(!ua(e,t)){if(sa(e))throw Error(a(418));t=so(n.nextSibling);var r=ra;t&&ua(e,t)?la(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(sa(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function fa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function da(e){if(e!==ra)return!1;if(!aa)return fa(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(sa(e))throw pa(),Error(a(418));for(;t;)la(e,t),t=so(t.nextSibling)}if(fa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=so(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?so(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=so(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var ga=w.ReactCurrentBatchConfig;function ya(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function ba(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function va(e){return(0,e._init)(e._payload)}function wa(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=js(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Ls(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){var a=n.type;return a===k?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===R&&va(a)===t.type)?((r=o(t,n.props)).ref=ya(e,t,n),r.return=e,r):((r=zs(n.type,n.key,n.props,null,e.mode,r)).ref=ya(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Bs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Ms(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ls(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case A:return(n=zs(t.type,t.key,t.props,null,e.mode,n)).ref=ya(e,null,t),n.return=e,n;case C:return(t=Bs(t,e.mode,n)).return=e,t;case R:return d(e,(0,t._init)(t._payload),n)}if(te(t)||M(t))return(t=Ms(t,e.mode,n,null)).return=e,t;ba(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case A:return n.key===o?s(e,t,n,r):null;case C:return n.key===o?c(e,t,n,r):null;case R:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||M(n))return null!==o?null:f(e,t,n,r,null);ba(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case A:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case C:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case R:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||M(r))return f(t,e=e.get(n)||null,r,o,null);ba(t,r)}return null}function m(o,a,l,u){for(var s=null,c=null,f=a,m=a=0,g=null;null!==f&&m<l.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var y=p(o,f,l[m],u);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===c?s=y:c.sibling=y,c=y,f=g}if(m===l.length)return n(o,f),aa&&Zo(o,m),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(a=i(f,a,m),null===c?s=f:c.sibling=f,c=f);return aa&&Zo(o,m),s}for(f=r(o,f);m<l.length;m++)null!==(g=h(f,o,m,l[m],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),a=i(g,a,m),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(o,e)})),aa&&Zo(o,m),s}function g(o,l,u,s){var c=M(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,m=l,g=l=0,y=null,b=u.next();null!==m&&!b.done;g++,b=u.next()){m.index>g?(y=m,m=null):y=m.sibling;var v=p(o,m,b.value,s);if(null===v){null===m&&(m=y);break}e&&m&&null===v.alternate&&t(o,m),l=i(v,l,g),null===f?c=v:f.sibling=v,f=v,m=y}if(b.done)return n(o,m),aa&&Zo(o,g),c;if(null===m){for(;!b.done;g++,b=u.next())null!==(b=d(o,b.value,s))&&(l=i(b,l,g),null===f?c=b:f.sibling=b,f=b);return aa&&Zo(o,g),c}for(m=r(o,m);!b.done;g++,b=u.next())null!==(b=h(m,o,g,b.value,s))&&(e&&null!==b.alternate&&m.delete(null===b.key?g:b.key),l=i(b,l,g),null===f?c=b:f.sibling=b,f=b);return e&&m.forEach((function(e){return t(o,e)})),aa&&Zo(o,g),c}return function e(r,a,i,u){if("object"==typeof i&&null!==i&&i.type===k&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case A:e:{for(var s=i.key,c=a;null!==c;){if(c.key===s){if((s=i.type)===k){if(7===c.tag){n(r,c.sibling),(a=o(c,i.props.children)).return=r,r=a;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===R&&va(s)===c.type){n(r,c.sibling),(a=o(c,i.props)).ref=ya(r,c,i),a.return=r,r=a;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===k?((a=Ms(i.props.children,r.mode,u,i.key)).return=r,r=a):((u=zs(i.type,i.key,i.props,null,r.mode,u)).ref=ya(r,a,i),u.return=r,r=u)}return l(r);case C:e:{for(c=i.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Bs(i,r.mode,u)).return=r,r=a}return l(r);case R:return e(r,a,(c=i._init)(i._payload),u)}if(te(i))return m(r,a,i,u);if(M(i))return g(r,a,i,u);ba(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Ls(i,r.mode,u)).return=r,r=a),l(r)):n(r,a)}}var Aa=wa(!0),Ca=wa(!1),ka=xo(null),Sa=null,xa=null,Ea=null;function _a(){Ea=xa=Sa=null}function Oa(e){var t=ka.current;Eo(ka),e._currentValue=t}function Pa(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Na(e,t){Sa=e,Ea=xa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(vl=!0),e.firstContext=null)}function Ta(e){var t=e._currentValue;if(Ea!==e)if(e={context:e,memoizedValue:t,next:null},null===xa){if(null===Sa)throw Error(a(308));xa=e,Sa.dependencies={lanes:0,firstContext:e}}else xa=xa.next=e;return t}var Ra=null;function ja(e){null===Ra?Ra=[e]:Ra.push(e)}function za(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,ja(t)):(n.next=o.next,o.next=n),t.interleaved=n,Ma(e,r)}function Ma(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ia=!1;function La(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ba(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Da(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Fa(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Ou){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Ma(e,n)}return null===(o=r.interleaved)?(t.next=t,ja(r)):(t.next=o.next,o.next=t),r.interleaved=t,Ma(e,n)}function Ua(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,bt(e,n)}}function Wa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function $a(e,t,n,r){var o=e.updateQueue;Ia=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,s=u.next;u.next=null,null===i?a=s:i.next=s,i=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==a){var f=o.baseState;for(i=0,c=s=u=null,l=a;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=L({},f,d);break e;case 2:Ia=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,i|=d;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(d=l).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===c&&(u=f),o.baseState=u,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Iu|=i,e.lanes=i,e.memoizedState=f}}function qa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Va={},Ha=xo(Va),Qa=xo(Va),Ka=xo(Va);function Ga(e){if(e===Va)throw Error(a(174));return e}function Ja(e,t){switch(_o(Ka,t),_o(Qa,e),_o(Ha,Va),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Eo(Ha),_o(Ha,t)}function Ya(){Eo(Ha),Eo(Qa),Eo(Ka)}function Xa(e){Ga(Ka.current);var t=Ga(Ha.current),n=ue(t,e.type);t!==n&&(_o(Qa,e),_o(Ha,n))}function Za(e){Qa.current===e&&(Eo(Ha),Eo(Qa))}var ei=xo(0);function ti(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ni=[];function ri(){for(var e=0;e<ni.length;e++)ni[e]._workInProgressVersionPrimary=null;ni.length=0}var oi=w.ReactCurrentDispatcher,ai=w.ReactCurrentBatchConfig,ii=0,li=null,ui=null,si=null,ci=!1,fi=!1,di=0,pi=0;function hi(){throw Error(a(321))}function mi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function gi(e,t,n,r,o,i){if(ii=i,li=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,oi.current=null===e||null===e.memoizedState?Zi:el,e=n(r,o),fi){i=0;do{if(fi=!1,di=0,25<=i)throw Error(a(301));i+=1,si=ui=null,t.updateQueue=null,oi.current=tl,e=n(r,o)}while(fi)}if(oi.current=Xi,t=null!==ui&&null!==ui.next,ii=0,si=ui=li=null,ci=!1,t)throw Error(a(300));return e}function yi(){var e=0!==di;return di=0,e}function bi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===si?li.memoizedState=si=e:si=si.next=e,si}function vi(){if(null===ui){var e=li.alternate;e=null!==e?e.memoizedState:null}else e=ui.next;var t=null===si?li.memoizedState:si.next;if(null!==t)si=t,ui=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ui=e).memoizedState,baseState:ui.baseState,baseQueue:ui.baseQueue,queue:ui.queue,next:null},null===si?li.memoizedState=si=e:si=si.next=e}return si}function wi(e,t){return"function"==typeof t?t(e):t}function Ai(e){var t=vi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ui,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var u=l=null,s=null,c=i;do{var f=c.lane;if((ii&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,l=r):s=s.next=d,li.lanes|=f,Iu|=f}c=c.next}while(null!==c&&c!==i);null===s?l=r:s.next=u,lr(r,t.memoizedState)||(vl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,li.lanes|=i,Iu|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ci(e){var t=vi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(vl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ki(){}function Si(e,t){var n=li,r=vi(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,vl=!0),r=r.queue,Ii(_i.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==si&&1&si.memoizedState.tag){if(n.flags|=2048,Ti(9,Ei.bind(null,n,r,o,t),void 0,null),null===Pu)throw Error(a(349));30&ii||xi(n,t,o)}return o}function xi(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ei(e,t,n,r){t.value=n,t.getSnapshot=r,Oi(t)&&Pi(e)}function _i(e,t,n){return n((function(){Oi(t)&&Pi(e)}))}function Oi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Pi(e){var t=Ma(e,1);null!==t&&ns(t,e,1,-1)}function Ni(e){var t=bi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:wi,lastRenderedState:e},t.queue=e,e=e.dispatch=Ki.bind(null,li,e),[t.memoizedState,e]}function Ti(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=li.updateQueue)?(t={lastEffect:null,stores:null},li.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ri(){return vi().memoizedState}function ji(e,t,n,r){var o=bi();li.flags|=e,o.memoizedState=Ti(1|t,n,void 0,void 0===r?null:r)}function zi(e,t,n,r){var o=vi();r=void 0===r?null:r;var a=void 0;if(null!==ui){var i=ui.memoizedState;if(a=i.destroy,null!==r&&mi(r,i.deps))return void(o.memoizedState=Ti(t,n,a,r))}li.flags|=e,o.memoizedState=Ti(1|t,n,a,r)}function Mi(e,t){return ji(8390656,8,e,t)}function Ii(e,t){return zi(2048,8,e,t)}function Li(e,t){return zi(4,2,e,t)}function Bi(e,t){return zi(4,4,e,t)}function Di(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Fi(e,t,n){return n=null!=n?n.concat([e]):null,zi(4,4,Di.bind(null,t,e),n)}function Ui(){}function Wi(e,t){var n=vi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function $i(e,t){var n=vi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function qi(e,t,n){return 21&ii?(lr(n,t)||(n=mt(),li.lanes|=n,Iu|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,vl=!0),e.memoizedState=n)}function Vi(e,t){var n=vt;vt=0!==n&&4>n?n:4,e(!0);var r=ai.transition;ai.transition={};try{e(!1),t()}finally{vt=n,ai.transition=r}}function Hi(){return vi().memoizedState}function Qi(e,t,n){var r=ts(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Gi(e)?Ji(t,n):null!==(n=za(e,t,n,r))&&(ns(n,e,r,es()),Yi(n,t,r))}function Ki(e,t,n){var r=ts(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Gi(e))Ji(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,i)){var u=t.interleaved;return null===u?(o.next=o,ja(t)):(o.next=u.next,u.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=za(e,t,o,r))&&(ns(n,e,r,o=es()),Yi(n,t,r))}}function Gi(e){var t=e.alternate;return e===li||null!==t&&t===li}function Ji(e,t){fi=ci=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Yi(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,bt(e,n)}}var Xi={readContext:Ta,useCallback:hi,useContext:hi,useEffect:hi,useImperativeHandle:hi,useInsertionEffect:hi,useLayoutEffect:hi,useMemo:hi,useReducer:hi,useRef:hi,useState:hi,useDebugValue:hi,useDeferredValue:hi,useTransition:hi,useMutableSource:hi,useSyncExternalStore:hi,useId:hi,unstable_isNewReconciler:!1},Zi={readContext:Ta,useCallback:function(e,t){return bi().memoizedState=[e,void 0===t?null:t],e},useContext:Ta,useEffect:Mi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ji(4194308,4,Di.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ji(4194308,4,e,t)},useInsertionEffect:function(e,t){return ji(4,2,e,t)},useMemo:function(e,t){var n=bi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=bi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Qi.bind(null,li,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},bi().memoizedState=e},useState:Ni,useDebugValue:Ui,useDeferredValue:function(e){return bi().memoizedState=e},useTransition:function(){var e=Ni(!1),t=e[0];return e=Vi.bind(null,e[1]),bi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=li,o=bi();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Pu)throw Error(a(349));30&ii||xi(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Mi(_i.bind(null,r,i,e),[e]),r.flags|=2048,Ti(9,Ei.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=bi(),t=Pu.identifierPrefix;if(aa){var n=Xo;t=":"+t+"R"+(n=(Yo&~(1<<32-it(Yo)-1)).toString(32)+n),0<(n=di++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=pi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},el={readContext:Ta,useCallback:Wi,useContext:Ta,useEffect:Ii,useImperativeHandle:Fi,useInsertionEffect:Li,useLayoutEffect:Bi,useMemo:$i,useReducer:Ai,useRef:Ri,useState:function(){return Ai(wi)},useDebugValue:Ui,useDeferredValue:function(e){return qi(vi(),ui.memoizedState,e)},useTransition:function(){return[Ai(wi)[0],vi().memoizedState]},useMutableSource:ki,useSyncExternalStore:Si,useId:Hi,unstable_isNewReconciler:!1},tl={readContext:Ta,useCallback:Wi,useContext:Ta,useEffect:Ii,useImperativeHandle:Fi,useInsertionEffect:Li,useLayoutEffect:Bi,useMemo:$i,useReducer:Ci,useRef:Ri,useState:function(){return Ci(wi)},useDebugValue:Ui,useDeferredValue:function(e){var t=vi();return null===ui?t.memoizedState=e:qi(t,ui.memoizedState,e)},useTransition:function(){return[Ci(wi)[0],vi().memoizedState]},useMutableSource:ki,useSyncExternalStore:Si,useId:Hi,unstable_isNewReconciler:!1};function nl(e,t){if(e&&e.defaultProps){for(var n in t=L({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function rl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:L({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ol={isMounted:function(e){return!!(e=e._reactInternals)&&We(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=es(),o=ts(e),a=Da(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=Fa(e,a,o))&&(ns(t,e,o,r),Ua(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=es(),o=ts(e),a=Da(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Fa(e,a,o))&&(ns(t,e,o,r),Ua(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),r=ts(e),o=Da(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Fa(e,o,r))&&(ns(t,e,r,n),Ua(t,e,r))}};function al(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,a))}function il(e,t,n){var r=!1,o=Oo,a=t.contextType;return"object"==typeof a&&null!==a?a=Ta(a):(o=jo(t)?To:Po.current,a=(r=null!=(r=t.contextTypes))?Ro(e,o):Oo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ol,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ll(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ol.enqueueReplaceState(t,t.state,null)}function ul(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs={},La(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Ta(a):(a=jo(t)?To:Po.current,o.context=Ro(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(rl(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ol.enqueueReplaceState(o,o.state,null),$a(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function sl(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function cl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var dl="function"==typeof WeakMap?WeakMap:Map;function pl(e,t,n){(n=Da(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){qu||(qu=!0,Vu=r),fl(0,t)},n}function hl(e,t,n){(n=Da(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){fl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){fl(0,t),"function"!=typeof r&&(null===Hu?Hu=new Set([this]):Hu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ml(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new dl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=xs.bind(null,e,t,n),t.then(e,e))}function gl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yl(e,t,n,r,o){return 1&e.mode?(e.flags|=65536,e.lanes=o,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Da(-1,1)).tag=2,Fa(n,t,1))),n.lanes|=1),e)}var bl=w.ReactCurrentOwner,vl=!1;function wl(e,t,n,r){t.child=null===e?Ca(t,null,n,r):Aa(t,e.child,n,r)}function Al(e,t,n,r,o){n=n.render;var a=t.ref;return Na(t,o),r=gi(e,t,n,r,a,o),n=yi(),null===e||vl?(aa&&n&&ta(t),t.flags|=1,wl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,ql(e,t,o))}function Cl(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Rs(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=zs(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,kl(e,t,a,r,o))}if(a=e.child,!(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return ql(e,t,o)}return t.flags|=1,(e=js(a,r)).ref=t.ref,e.return=t,t.child=e}function kl(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(ur(a,r)&&e.ref===t.ref){if(vl=!1,t.pendingProps=r=a,!(e.lanes&o))return t.lanes=e.lanes,ql(e,t,o);131072&e.flags&&(vl=!0)}}return El(e,t,n,r,o)}function Sl(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,_o(ju,Ru),Ru|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,_o(ju,Ru),Ru|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},_o(ju,Ru),Ru|=n;else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,_o(ju,Ru),Ru|=r;return wl(e,t,o,n),t.child}function xl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function El(e,t,n,r,o){var a=jo(n)?To:Po.current;return a=Ro(t,a),Na(t,o),n=gi(e,t,n,r,a,o),r=yi(),null===e||vl?(aa&&r&&ta(t),t.flags|=1,wl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,ql(e,t,o))}function _l(e,t,n,r,o){if(jo(n)){var a=!0;Lo(t)}else a=!1;if(Na(t,o),null===t.stateNode)$l(e,t),il(t,n,r),ul(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?Ta(s):Ro(t,s=jo(n)?To:Po.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&ll(t,i,r,s),Ia=!1;var d=t.memoizedState;i.state=d,$a(t,r,i,o),u=t.memoizedState,l!==r||d!==u||No.current||Ia?("function"==typeof c&&(rl(t,n,c,r),u=t.memoizedState),(l=Ia||al(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Ba(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:nl(t.type,l),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?Ta(u):Ro(t,u=jo(n)?To:Po.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&ll(t,i,r,u),Ia=!1,d=t.memoizedState,i.state=d,$a(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||No.current||Ia?("function"==typeof p&&(rl(t,n,p,r),h=t.memoizedState),(s=Ia||al(t,n,s,r,d,h,u)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Ol(e,t,n,r,a,o)}function Ol(e,t,n,r,o,a){xl(e,t);var i=!!(128&t.flags);if(!r&&!i)return o&&Bo(t,n,!1),ql(e,t,a);r=t.stateNode,bl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Aa(t,e.child,null,a),t.child=Aa(t,null,l,a)):wl(e,t,l,a),t.memoizedState=r.state,o&&Bo(t,n,!0),t.child}function Pl(e){var t=e.stateNode;t.pendingContext?Mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Mo(0,t.context,!1),Ja(e,t.containerInfo)}function Nl(e,t,n,r,o){return ha(),ma(o),t.flags|=256,wl(e,t,n,r),t.child}var Tl,Rl,jl,zl,Ml={dehydrated:null,treeContext:null,retryLane:0};function Il(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ll(e,t,n){var r,o=t.pendingProps,i=ei.current,l=!1,u=!!(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&!!(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),_o(ei,1&i),null===e)return ca(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(u=o.children,e=o.fallback,l?(o=t.mode,l=t.child,u={mode:"hidden",children:u},1&o||null===l?l=Is(u,o,0,null):(l.childLanes=0,l.pendingProps=u),e=Ms(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Il(n),t.memoizedState=Ml,e):Bl(t,u));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,l){if(n)return 256&t.flags?(t.flags&=-257,Dl(e,t,l,r=cl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Is({mode:"visible",children:r.children},o,0,null),(i=Ms(i,o,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,1&t.mode&&Aa(t,e.child,null,l),t.child.memoizedState=Il(l),t.memoizedState=Ml,i);if(!(1&t.mode))return Dl(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,Dl(e,t,l,r=cl(i=Error(a(419)),r,void 0))}if(u=!!(l&e.childLanes),vl||u){if(null!==(r=Pu)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=o&(r.suspendedLanes|l)?0:o)&&o!==i.retryLane&&(i.retryLane=o,Ma(e,o),ns(r,e,o,-1))}return ms(),Dl(e,t,l,r=cl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=_s.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=so(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(Ko[Go++]=Yo,Ko[Go++]=Xo,Ko[Go++]=Jo,Yo=e.id,Xo=e.overflow,Jo=t),(t=Bl(t,r.children)).flags|=4096,t)}(e,t,u,o,r,i,n);if(l){l=o.fallback,u=t.mode,r=(i=e.child).sibling;var s={mode:"hidden",children:o.children};return 1&u||t.child===i?(o=js(i,s)).subtreeFlags=14680064&i.subtreeFlags:((o=t.child).childLanes=0,o.pendingProps=s,t.deletions=null),null!==r?l=js(r,l):(l=Ms(l,u,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,u=null===(u=e.child.memoizedState)?Il(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=Ml,o}return e=(l=e.child).sibling,o=js(l,{mode:"visible",children:o.children}),!(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Bl(e,t){return(t=Is({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Dl(e,t,n,r){return null!==r&&ma(r),Aa(t,e.child,null,n),(e=Bl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Fl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Pa(e.return,t,n)}function Ul(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Wl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(wl(e,t,r.children,n),2&(r=ei.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Fl(e,n,t);else if(19===e.tag)Fl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(_o(ei,r),1&t.mode)switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ti(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ul(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ti(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Ul(t,!0,n,null,a);break;case"together":Ul(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function $l(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function ql(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Iu|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=js(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=js(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vl(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Hl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ql(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Hl(t),null;case 1:case 17:return jo(t.type)&&zo(),Hl(t),null;case 3:return r=t.stateNode,Ya(),Eo(No),Eo(Po),ri(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(da(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==ia&&(is(ia),ia=null))),Rl(e,t),Hl(t),null;case 5:Za(t);var o=Ga(Ka.current);if(n=t.type,null!==e&&null!=t.stateNode)jl(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Hl(t),null}if(e=Ga(Ha.current),da(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=!!(1&t.mode),n){case"dialog":Dr("cancel",r),Dr("close",r);break;case"iframe":case"object":case"embed":Dr("load",r);break;case"video":case"audio":for(o=0;o<Mr.length;o++)Dr(Mr[o],r);break;case"source":Dr("error",r);break;case"img":case"image":case"link":Dr("error",r),Dr("load",r);break;case"details":Dr("toggle",r);break;case"input":J(r,i),Dr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Dr("invalid",r);break;case"textarea":oe(r,i),Dr("invalid",r)}for(var u in be(n,i),o=null,i)if(i.hasOwnProperty(u)){var s=i[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,s,e),o=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,s,e),o=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Dr("scroll",r)}switch(n){case"input":H(r),Z(r,i,!0);break;case"textarea":H(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Zr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[po]=t,e[ho]=r,Tl(e,t,!1,!1),t.stateNode=e;e:{switch(u=ve(n,r),n){case"dialog":Dr("cancel",e),Dr("close",e),o=r;break;case"iframe":case"object":case"embed":Dr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Mr.length;o++)Dr(Mr[o],e);o=r;break;case"source":Dr("error",e),o=r;break;case"img":case"image":case"link":Dr("error",e),Dr("load",e),o=r;break;case"details":Dr("toggle",e),o=r;break;case"input":J(e,r),o=G(e,r),Dr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=L({},r,{value:void 0}),Dr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Dr("invalid",e)}for(i in be(n,o),s=o)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Dr("scroll",e):null!=c&&v(e,i,c,u))}switch(n){case"input":H(e),Z(e,r,!1);break;case"textarea":H(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Hl(t),null;case 6:if(e&&null!=t.stateNode)zl(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=Ga(Ka.current),Ga(Ha.current),da(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Xr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,n,!!(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Hl(t),null;case 13:if(Eo(ei),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&1&t.mode&&!(128&t.flags))pa(),ha(),t.flags|=98560,i=!1;else if(i=da(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Hl(t),i=!1}else null!==ia&&(is(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ei.current?0===zu&&(zu=3):ms())),null!==t.updateQueue&&(t.flags|=4),Hl(t),null);case 4:return Ya(),Rl(e,t),null===e&&Wr(t.stateNode.containerInfo),Hl(t),null;case 10:return Oa(t.type._context),Hl(t),null;case 19:if(Eo(ei),null===(i=t.memoizedState))return Hl(t),null;if(r=!!(128&t.flags),null===(u=i.rendering))if(r)Vl(i,!1);else{if(0!==zu||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(u=ti(e))){for(t.flags|=128,Vl(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return _o(ei,1&ei.current|2),t.child}e=e.sibling}null!==i.tail&&Ye()>Wu&&(t.flags|=128,r=!0,Vl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ti(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Vl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!aa)return Hl(t),null}else 2*Ye()-i.renderingStartTime>Wu&&1073741824!==n&&(t.flags|=128,r=!0,Vl(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ye(),t.sibling=null,n=ei.current,_o(ei,r?1&n|2:1&n),t):(Hl(t),null);case 22:case 23:return fs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&Ru)&&(Hl(t),6&t.subtreeFlags&&(t.flags|=8192)):Hl(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Kl(e,t){switch(na(t),t.tag){case 1:return jo(t.type)&&zo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Ya(),Eo(No),Eo(Po),ri(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Za(t),null;case 13:if(Eo(ei),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Eo(ei),null;case 4:return Ya(),null;case 10:return Oa(t.type._context),null;case 22:case 23:return fs(),null;default:return null}}Tl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Rl=function(){},jl=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Ga(Ha.current);var a,i=null;switch(n){case"input":o=G(e,o),r=G(e,r),i=[];break;case"select":o=L({},o,{value:void 0}),r=L({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in be(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var u=o[c];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(a in u)!u.hasOwnProperty(a)||s&&s.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in s)s.hasOwnProperty(a)&&u[a]!==s[a]&&(n||(n={}),n[a]=s[a])}else n||(i||(i=[]),i.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(i=i||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Dr("scroll",e),i||u===s||(i=[])):(i=i||[]).push(c,s))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},zl=function(e,t,n,r){n!==r&&(t.flags|=4)};var Gl=!1,Jl=!1,Yl="function"==typeof WeakSet?WeakSet:Set,Xl=null;function Zl(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Ss(e,t,n)}else n.current=null}function eu(e,t,n){try{n()}catch(n){Ss(e,t,n)}}var tu=!1;function nu(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&eu(t,n,a)}o=o.next}while(o!==r)}}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ou(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function au(e){var t=e.alternate;null!==t&&(e.alternate=null,au(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[go],delete t[yo],delete t[bo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function lu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(uu(e,t,n),e=e.sibling;null!==e;)uu(e,t,n),e=e.sibling}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}var cu=null,fu=!1;function du(e,t,n){for(n=n.child;null!==n;)pu(e,t,n),n=n.sibling}function pu(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Jl||Zl(n,t);case 6:var r=cu,o=fu;cu=null,du(e,t,n),fu=o,null!==(cu=r)&&(fu?(e=cu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cu.removeChild(n.stateNode));break;case 18:null!==cu&&(fu?(e=cu,n=n.stateNode,8===e.nodeType?uo(e.parentNode,n):1===e.nodeType&&uo(e,n),Wt(e)):uo(cu,n.stateNode));break;case 4:r=cu,o=fu,cu=n.stateNode.containerInfo,fu=!0,du(e,t,n),cu=r,fu=o;break;case 0:case 11:case 14:case 15:if(!Jl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(2&a||4&a)&&eu(n,t,i),o=o.next}while(o!==r)}du(e,t,n);break;case 1:if(!Jl&&(Zl(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Ss(n,t,e)}du(e,t,n);break;case 21:du(e,t,n);break;case 22:1&n.mode?(Jl=(r=Jl)||null!==n.memoizedState,du(e,t,n),Jl=r):du(e,t,n);break;default:du(e,t,n)}}function hu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Yl),t.forEach((function(t){var r=Os.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function mu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:cu=u.stateNode,fu=!1;break e;case 3:case 4:cu=u.stateNode.containerInfo,fu=!0;break e}u=u.return}if(null===cu)throw Error(a(160));pu(i,l,o),cu=null,fu=!1;var s=o.alternate;null!==s&&(s.return=null),o.return=null}catch(e){Ss(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gu(t,e),t=t.sibling}function gu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(mu(t,e),yu(e),4&r){try{nu(3,e,e.return),ru(3,e)}catch(t){Ss(e,e.return,t)}try{nu(5,e,e.return)}catch(t){Ss(e,e.return,t)}}break;case 1:mu(t,e),yu(e),512&r&&null!==n&&Zl(n,n.return);break;case 5:if(mu(t,e),yu(e),512&r&&null!==n&&Zl(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){Ss(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===i.type&&null!=i.name&&Y(o,i),ve(u,l);var c=ve(u,i);for(l=0;l<s.length;l+=2){var f=s[l],d=s[l+1];"style"===f?ge(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):v(o,f,d,c)}switch(u){case"input":X(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){Ss(e,e.return,t)}}break;case 6:if(mu(t,e),yu(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){Ss(e,e.return,t)}}break;case 3:if(mu(t,e),yu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Wt(t.containerInfo)}catch(t){Ss(e,e.return,t)}break;case 4:default:mu(t,e),yu(e);break;case 13:mu(t,e),yu(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Uu=Ye())),4&r&&hu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Jl=(c=Jl)||f,mu(t,e),Jl=c):mu(t,e),yu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&1&e.mode)for(Xl=e,f=e.child;null!==f;){for(d=Xl=f;null!==Xl;){switch(h=(p=Xl).child,p.tag){case 0:case 11:case 14:case 15:nu(4,p,p.return);break;case 1:Zl(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Ss(r,n,e)}}break;case 5:Zl(p,p.return);break;case 22:if(null!==p.memoizedState){Au(d);continue}}null!==h?(h.return=p,Xl=h):Au(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,c?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=d.stateNode,l=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",l))}catch(t){Ss(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){Ss(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:mu(t,e),yu(e),4&r&&hu(e);case 21:}}function yu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(iu(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),su(e,lu(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;uu(e,lu(e),i);break;default:throw Error(a(161))}}catch(t){Ss(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bu(e,t,n){Xl=e,vu(e,t,n)}function vu(e,t,n){for(var r=!!(1&e.mode);null!==Xl;){var o=Xl,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Gl;if(!i){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Jl;l=Gl;var s=Jl;if(Gl=i,(Jl=u)&&!s)for(Xl=o;null!==Xl;)u=(i=Xl).child,22===i.tag&&null!==i.memoizedState?Cu(o):null!==u?(u.return=i,Xl=u):Cu(o);for(;null!==a;)Xl=a,vu(a,t,n),a=a.sibling;Xl=o,Gl=l,Jl=s}wu(e)}else 8772&o.subtreeFlags&&null!==a?(a.return=o,Xl=a):wu(e)}}function wu(e){for(;null!==Xl;){var t=Xl;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Jl||ru(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Jl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:nl(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&qa(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}qa(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Wt(d)}}}break;default:throw Error(a(163))}Jl||512&t.flags&&ou(t)}catch(e){Ss(t,t.return,e)}}if(t===e){Xl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Xl=n;break}Xl=t.return}}function Au(e){for(;null!==Xl;){var t=Xl;if(t===e){Xl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Xl=n;break}Xl=t.return}}function Cu(e){for(;null!==Xl;){var t=Xl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ru(4,t)}catch(e){Ss(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Ss(t,o,e)}}var a=t.return;try{ou(t)}catch(e){Ss(t,a,e)}break;case 5:var i=t.return;try{ou(t)}catch(e){Ss(t,i,e)}}}catch(e){Ss(t,t.return,e)}if(t===e){Xl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Xl=l;break}Xl=t.return}}var ku,Su=Math.ceil,xu=w.ReactCurrentDispatcher,Eu=w.ReactCurrentOwner,_u=w.ReactCurrentBatchConfig,Ou=0,Pu=null,Nu=null,Tu=0,Ru=0,ju=xo(0),zu=0,Mu=null,Iu=0,Lu=0,Bu=0,Du=null,Fu=null,Uu=0,Wu=1/0,$u=null,qu=!1,Vu=null,Hu=null,Qu=!1,Ku=null,Gu=0,Ju=0,Yu=null,Xu=-1,Zu=0;function es(){return 6&Ou?Ye():-1!==Xu?Xu:Xu=Ye()}function ts(e){return 1&e.mode?2&Ou&&0!==Tu?Tu&-Tu:null!==ga.transition?(0===Zu&&(Zu=mt()),Zu):0!==(e=vt)?e:e=void 0===(e=window.event)?16:Jt(e.type):1}function ns(e,t,n,r){if(50<Ju)throw Ju=0,Yu=null,Error(a(185));yt(e,n,r),2&Ou&&e===Pu||(e===Pu&&(!(2&Ou)&&(Lu|=n),4===zu&&ls(e,Tu)),rs(e,r),1===n&&0===Ou&&!(1&t.mode)&&(Wu=Ye()+500,Fo&&$o()))}function rs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,u=o[i];-1===u?l&n&&!(l&r)||(o[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=dt(e,e===Pu?Tu:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Fo=!0,Wo(e)}(us.bind(null,e)):Wo(us.bind(null,e)),io((function(){!(6&Ou)&&$o()})),n=null;else{switch(wt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ps(n,os.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function os(e,t){if(Xu=-1,Zu=0,6&Ou)throw Error(a(327));var n=e.callbackNode;if(Cs()&&e.callbackNode!==n)return null;var r=dt(e,e===Pu?Tu:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=gs(e,r);else{t=r;var o=Ou;Ou|=2;var i=hs();for(Pu===e&&Tu===t||($u=null,Wu=Ye()+500,ds(e,t));;)try{bs();break}catch(t){ps(e,t)}_a(),xu.current=i,Ou=o,null!==Nu?t=0:(Pu=null,Tu=0,t=zu)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=as(e,o)),1===t)throw n=Mu,ds(e,0),ls(e,r),rs(e,Ye()),n;if(6===t)ls(e,r);else{if(o=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!lr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)||(t=gs(e,r),2===t&&(i=ht(e),0!==i&&(r=i,t=as(e,i))),1!==t)))throw n=Mu,ds(e,0),ls(e,r),rs(e,Ye()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:As(e,Fu,$u);break;case 3:if(ls(e,r),(130023424&r)===r&&10<(t=Uu+500-Ye())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(As.bind(null,e,Fu,$u),t);break}As(e,Fu,$u);break;case 4:if(ls(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Ye()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Su(r/1960))-r)){e.timeoutHandle=ro(As.bind(null,e,Fu,$u),r);break}As(e,Fu,$u);break;default:throw Error(a(329))}}}return rs(e,Ye()),e.callbackNode===n?os.bind(null,e):null}function as(e,t){var n=Du;return e.current.memoizedState.isDehydrated&&(ds(e,t).flags|=256),2!==(e=gs(e,t))&&(t=Fu,Fu=n,null!==t&&is(t)),e}function is(e){null===Fu?Fu=e:Fu.push.apply(Fu,e)}function ls(e,t){for(t&=~Bu,t&=~Lu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function us(e){if(6&Ou)throw Error(a(327));Cs();var t=dt(e,0);if(!(1&t))return rs(e,Ye()),null;var n=gs(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=as(e,r))}if(1===n)throw n=Mu,ds(e,0),ls(e,t),rs(e,Ye()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,As(e,Fu,$u),rs(e,Ye()),null}function ss(e,t){var n=Ou;Ou|=1;try{return e(t)}finally{0===(Ou=n)&&(Wu=Ye()+500,Fo&&$o())}}function cs(e){null!==Ku&&0===Ku.tag&&!(6&Ou)&&Cs();var t=Ou;Ou|=1;var n=_u.transition,r=vt;try{if(_u.transition=null,vt=1,e)return e()}finally{vt=r,_u.transition=n,!(6&(Ou=t))&&$o()}}function fs(){Ru=ju.current,Eo(ju)}function ds(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Nu)for(n=Nu.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&zo();break;case 3:Ya(),Eo(No),Eo(Po),ri();break;case 5:Za(r);break;case 4:Ya();break;case 13:case 19:Eo(ei);break;case 10:Oa(r.type._context);break;case 22:case 23:fs()}n=n.return}if(Pu=e,Nu=e=js(e.current,null),Tu=Ru=t,zu=0,Mu=null,Bu=Lu=Iu=0,Fu=Du=null,null!==Ra){for(t=0;t<Ra.length;t++)if(null!==(r=(n=Ra[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}Ra=null}return e}function ps(e,t){for(;;){var n=Nu;try{if(_a(),oi.current=Xi,ci){for(var r=li.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ci=!1}if(ii=0,si=ui=li=null,fi=!1,di=0,Eu.current=null,null===n||null===n.return){zu=1,Mu=t,Nu=null;break}e:{var i=e,l=n.return,u=n,s=t;if(t=Tu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(!(1&f.mode||0!==d&&11!==d&&15!==d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=gl(l);if(null!==h){h.flags&=-257,yl(h,l,u,0,t),1&h.mode&&ml(i,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var g=new Set;g.add(s),t.updateQueue=g}else m.add(s);break e}if(!(1&t)){ml(i,c,t),ms();break e}s=Error(a(426))}else if(aa&&1&u.mode){var y=gl(l);if(null!==y){!(65536&y.flags)&&(y.flags|=256),yl(y,l,u,0,t),ma(sl(s,u));break e}}i=s=sl(s,u),4!==zu&&(zu=2),null===Du?Du=[i]:Du.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Wa(i,pl(0,s,t));break e;case 1:u=s;var b=i.type,v=i.stateNode;if(!(128&i.flags||"function"!=typeof b.getDerivedStateFromError&&(null===v||"function"!=typeof v.componentDidCatch||null!==Hu&&Hu.has(v)))){i.flags|=65536,t&=-t,i.lanes|=t,Wa(i,hl(i,u,t));break e}}i=i.return}while(null!==i)}ws(n)}catch(e){t=e,Nu===n&&null!==n&&(Nu=n=n.return);continue}break}}function hs(){var e=xu.current;return xu.current=Xi,null===e?Xi:e}function ms(){0!==zu&&3!==zu&&2!==zu||(zu=4),null===Pu||!(268435455&Iu)&&!(268435455&Lu)||ls(Pu,Tu)}function gs(e,t){var n=Ou;Ou|=2;var r=hs();for(Pu===e&&Tu===t||($u=null,ds(e,t));;)try{ys();break}catch(t){ps(e,t)}if(_a(),Ou=n,xu.current=r,null!==Nu)throw Error(a(261));return Pu=null,Tu=0,zu}function ys(){for(;null!==Nu;)vs(Nu)}function bs(){for(;null!==Nu&&!Ge();)vs(Nu)}function vs(e){var t=ku(e.alternate,e,Ru);e.memoizedProps=e.pendingProps,null===t?ws(e):Nu=t,Eu.current=null}function ws(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Kl(n,t)))return n.flags&=32767,void(Nu=n);if(null===e)return zu=6,void(Nu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Ql(n,t,Ru)))return void(Nu=n);if(null!==(t=t.sibling))return void(Nu=t);Nu=t=e}while(null!==t);0===zu&&(zu=5)}function As(e,t,n){var r=vt,o=_u.transition;try{_u.transition=null,vt=1,function(e,t,n,r){do{Cs()}while(null!==Ku);if(6&Ou)throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Pu&&(Nu=Pu=null,Tu=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Qu||(Qu=!0,Ps(tt,(function(){return Cs(),null}))),i=!!(15990&n.flags),15990&n.subtreeFlags||i){i=_u.transition,_u.transition=null;var l=vt;vt=1;var u=Ou;Ou|=4,Eu.current=null,function(e,t){if(eo=qt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(u=l+o),d!==i||0!==r&&3!==d.nodeType||(s=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===o&&(u=l),p===i&&++f===r&&(s=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},qt=!1,Xl=t;null!==Xl;)if(e=(t=Xl).child,1028&t.subtreeFlags&&null!==e)e.return=t,Xl=e;else for(;null!==Xl;){t=Xl;try{var m=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,y=m.memoizedState,b=t.stateNode,v=b.getSnapshotBeforeUpdate(t.elementType===t.type?g:nl(t.type,g),y);b.__reactInternalSnapshotBeforeUpdate=v}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(a(163))}}catch(e){Ss(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Xl=e;break}Xl=t.return}m=tu,tu=!1}(e,n),gu(n,e),hr(to),qt=!!eo,to=eo=null,e.current=n,bu(n,e,o),Je(),Ou=u,vt=l,_u.transition=i}else e.current=n;if(Qu&&(Qu=!1,Ku=e,Gu=o),0===(i=e.pendingLanes)&&(Hu=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),rs(e,Ye()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(qu)throw qu=!1,e=Vu,Vu=null,e;!!(1&Gu)&&0!==e.tag&&Cs(),1&(i=e.pendingLanes)?e===Yu?Ju++:(Ju=0,Yu=e):Ju=0,$o()}(e,t,n,r)}finally{_u.transition=o,vt=r}return null}function Cs(){if(null!==Ku){var e=wt(Gu),t=_u.transition,n=vt;try{if(_u.transition=null,vt=16>e?16:e,null===Ku)var r=!1;else{if(e=Ku,Ku=null,Gu=0,6&Ou)throw Error(a(331));var o=Ou;for(Ou|=4,Xl=e.current;null!==Xl;){var i=Xl,l=i.child;if(16&Xl.flags){var u=i.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Xl=c;null!==Xl;){var f=Xl;switch(f.tag){case 0:case 11:case 15:nu(8,f,i)}var d=f.child;if(null!==d)d.return=f,Xl=d;else for(;null!==Xl;){var p=(f=Xl).sibling,h=f.return;if(au(f),f===c){Xl=null;break}if(null!==p){p.return=h,Xl=p;break}Xl=h}}}var m=i.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var y=g.sibling;g.sibling=null,g=y}while(null!==g)}}Xl=i}}if(2064&i.subtreeFlags&&null!==l)l.return=i,Xl=l;else e:for(;null!==Xl;){if(2048&(i=Xl).flags)switch(i.tag){case 0:case 11:case 15:nu(9,i,i.return)}var b=i.sibling;if(null!==b){b.return=i.return,Xl=b;break e}Xl=i.return}}var v=e.current;for(Xl=v;null!==Xl;){var w=(l=Xl).child;if(2064&l.subtreeFlags&&null!==w)w.return=l,Xl=w;else e:for(l=v;null!==Xl;){if(2048&(u=Xl).flags)try{switch(u.tag){case 0:case 11:case 15:ru(9,u)}}catch(e){Ss(u,u.return,e)}if(u===l){Xl=null;break e}var A=u.sibling;if(null!==A){A.return=u.return,Xl=A;break e}Xl=u.return}}if(Ou=o,$o(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{vt=n,_u.transition=t}}return!1}function ks(e,t,n){e=Fa(e,t=pl(0,t=sl(n,t),1),1),t=es(),null!==e&&(yt(e,1,t),rs(e,t))}function Ss(e,t,n){if(3===e.tag)ks(e,e,n);else for(;null!==t;){if(3===t.tag){ks(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hu||!Hu.has(r))){t=Fa(t,e=hl(t,e=sl(n,e),1),1),e=es(),null!==t&&(yt(t,1,e),rs(t,e));break}}t=t.return}}function xs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,Pu===e&&(Tu&n)===n&&(4===zu||3===zu&&(130023424&Tu)===Tu&&500>Ye()-Uu?ds(e,0):Bu|=n),rs(e,t)}function Es(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=es();null!==(e=Ma(e,t))&&(yt(e,t,n),rs(e,n))}function _s(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Es(e,n)}function Os(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Es(e,n)}function Ps(e,t){return Qe(e,t)}function Ns(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ts(e,t,n,r){return new Ns(e,t,n,r)}function Rs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function js(e,t){var n=e.alternate;return null===n?((n=Ts(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function zs(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Rs(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case k:return Ms(n.children,o,i,t);case S:l=8,o|=8;break;case x:return(e=Ts(12,n,t,2|o)).elementType=x,e.lanes=i,e;case P:return(e=Ts(13,n,t,o)).elementType=P,e.lanes=i,e;case N:return(e=Ts(19,n,t,o)).elementType=N,e.lanes=i,e;case j:return Is(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case E:l=10;break e;case _:l=9;break e;case O:l=11;break e;case T:l=14;break e;case R:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Ts(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Ms(e,t,n,r){return(e=Ts(7,e,r,t)).lanes=n,e}function Is(e,t,n,r){return(e=Ts(22,e,r,t)).elementType=j,e.lanes=n,e.stateNode={isHidden:!1},e}function Ls(e,t,n){return(e=Ts(6,e,null,t)).lanes=n,e}function Bs(e,t,n){return(t=Ts(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ds(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Fs(e,t,n,r,o,a,i,l,u){return e=new Ds(e,t,n,l,u),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Ts(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},La(a),e}function Us(e){if(!e)return Oo;e:{if(We(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(jo(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(jo(n))return Io(e,n,t)}return t}function Ws(e,t,n,r,o,a,i,l,u){return(e=Fs(n,r,!0,e,0,a,0,l,u)).context=Us(null),n=e.current,(a=Da(r=es(),o=ts(n))).callback=null!=t?t:null,Fa(n,a,o),e.current.lanes=o,yt(e,o,r),rs(e,r),e}function $s(e,t,n,r){var o=t.current,a=es(),i=ts(o);return n=Us(n),null===t.context?t.context=n:t.pendingContext=n,(t=Da(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Fa(o,t,i))&&(ns(e,o,i,a),Ua(e,o,i)),i}function qs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Vs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Hs(e,t){Vs(e,t),(e=e.alternate)&&Vs(e,t)}ku=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||No.current)vl=!0;else{if(!(e.lanes&n||128&t.flags))return vl=!1,function(e,t,n){switch(t.tag){case 3:Pl(t),ha();break;case 5:Xa(t);break;case 1:jo(t.type)&&Lo(t);break;case 4:Ja(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;_o(ka,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(_o(ei,1&ei.current),t.flags|=128,null):n&t.child.childLanes?Ll(e,t,n):(_o(ei,1&ei.current),null!==(e=ql(e,t,n))?e.sibling:null);_o(ei,1&ei.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return Wl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),_o(ei,ei.current),r)break;return null;case 22:case 23:return t.lanes=0,Sl(e,t,n)}return ql(e,t,n)}(e,t,n);vl=!!(131072&e.flags)}else vl=!1,aa&&1048576&t.flags&&ea(t,Qo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;$l(e,t),e=t.pendingProps;var o=Ro(t,Po.current);Na(t,n),o=gi(null,t,r,e,o,n);var i=yi();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,jo(r)?(i=!0,Lo(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,La(t),o.updater=ol,t.stateNode=o,o._reactInternals=t,ul(t,r,e,n),t=Ol(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),wl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch($l(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Rs(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===T)return 14}return 2}(r),e=nl(r,e),o){case 0:t=El(null,t,r,e,n);break e;case 1:t=_l(null,t,r,e,n);break e;case 11:t=Al(null,t,r,e,n);break e;case 14:t=Cl(null,t,r,nl(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,El(e,t,r,o=t.elementType===r?o:nl(r,o),n);case 1:return r=t.type,o=t.pendingProps,_l(e,t,r,o=t.elementType===r?o:nl(r,o),n);case 3:e:{if(Pl(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Ba(e,t),$a(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Nl(e,t,r,n,o=sl(Error(a(423)),t));break e}if(r!==o){t=Nl(e,t,r,n,o=sl(Error(a(424)),t));break e}for(oa=so(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=Ca(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=ql(e,t,n);break e}wl(e,t,r,n)}t=t.child}return t;case 5:return Xa(t),null===e&&ca(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==i&&no(r,i)&&(t.flags|=32),xl(e,t),wl(e,t,l,n),t.child;case 6:return null===e&&ca(t),null;case 13:return Ll(e,t,n);case 4:return Ja(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Aa(t,null,r,n):wl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Al(e,t,r,o=t.elementType===r?o:nl(r,o),n);case 7:return wl(e,t,t.pendingProps,n),t.child;case 8:case 12:return wl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,_o(ka,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===o.children&&!No.current){t=ql(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===i.tag){(s=Da(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),Pa(i.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Pa(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}wl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Na(t,n),r=r(o=Ta(o)),t.flags|=1,wl(e,t,r,n),t.child;case 14:return o=nl(r=t.type,t.pendingProps),Cl(e,t,r,o=nl(r.type,o),n);case 15:return kl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:nl(r,o),$l(e,t),t.tag=1,jo(r)?(e=!0,Lo(t)):e=!1,Na(t,n),il(t,r,o),ul(t,r,o,n),Ol(null,t,r,!0,e,n);case 19:return Wl(e,t,n);case 22:return Sl(e,t,n)}throw Error(a(156,t.tag))};var Qs="function"==typeof reportError?reportError:function(e){console.error(e)};function Ks(e){this._internalRoot=e}function Gs(e){this._internalRoot=e}function Js(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Ys(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xs(){}function Zs(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=qs(i);l.call(e)}}$s(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=qs(i);a.call(e)}}var i=Ws(t,r,e,0,null,!1,0,"",Xs);return e._reactRootContainer=i,e[mo]=i.current,Wr(8===e.nodeType?e.parentNode:e),cs(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=qs(u);l.call(e)}}var u=Fs(e,0,!1,null,0,!1,0,"",Xs);return e._reactRootContainer=u,e[mo]=u.current,Wr(8===e.nodeType?e.parentNode:e),cs((function(){$s(t,u,n,r)})),u}(n,t,e,o,r);return qs(i)}Gs.prototype.render=Ks.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));$s(e,t,null,null)},Gs.prototype.unmount=Ks.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs((function(){$s(null,e,null,null)})),t[mo]=null}},Gs.prototype.unstable_scheduleHydration=function(e){if(e){var t=St();e={blockedOn:null,target:e,priority:t};for(var n=0;n<jt.length&&0!==t&&t<jt[n].priority;n++);jt.splice(n,0,e),0===n&&Lt(e)}},At=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(bt(t,1|n),rs(t,Ye()),!(6&Ou)&&(Wu=Ye()+500,$o()))}break;case 13:cs((function(){var t=Ma(e,1);if(null!==t){var n=es();ns(t,e,1,n)}})),Hs(e,1)}},Ct=function(e){if(13===e.tag){var t=Ma(e,134217728);null!==t&&ns(t,e,134217728,es()),Hs(e,134217728)}},kt=function(e){if(13===e.tag){var t=ts(e),n=Ma(e,t);null!==n&&ns(n,e,t,es()),Hs(e,t)}},St=function(){return vt},xt=function(e,t){var n=vt;try{return vt=e,t()}finally{vt=n}},Ce=function(e,t,n){switch(t){case"input":if(X(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Co(r);if(!o)throw Error(a(90));Q(r),X(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Oe=ss,Pe=cs;var ec={usingClientEntryPoint:!1,Events:[wo,Ao,Co,Ee,_e,ss]},tc={findFiberByHostInstance:vo,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{ot=rc.inject(nc),at=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Js(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:C,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Js(e))throw Error(a(299));var n=!1,r="",o=Qs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Fs(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Wr(8===e.nodeType?e.parentNode:e),new Ks(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,n){if(!Ys(t))throw Error(a(200));return Zs(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Js(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=Qs;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Ws(t,null,e,1,null!=n?n:null,o,0,i,l),e[mo]=t.current,Wr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Gs(t)},t.render=function(e,t,n){if(!Ys(t))throw Error(a(200));return Zs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ys(e))throw Error(a(40));return!!e._reactRootContainer&&(cs((function(){Zs(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ys(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return Zs(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},5338:(e,t,n)=>{var r=n(961);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(2551)},3729:(e,t,n)=>{e.exports=n(7372)},5287:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function b(){}function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=y.prototype;var w=v.prototype=new b;w.constructor=v,m(w,y.prototype),w.isPureReactComponent=!0;var A=Array.isArray,C=Object.prototype.hasOwnProperty,k={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,r){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)C.call(t,o)&&!S.hasOwnProperty(o)&&(a[o]=t[o]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===a[o]&&(a[o]=u[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:k.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===a?"."+O(u,0):a,A(i)?(o="",null!=e&&(o=e.replace(_,"$&/")+"/"),P(i,t,o,"",(function(e){return e}))):null!=i&&(E(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(_,"$&/")+"/")+e)),t.push(i)),1;if(u=0,a=""===a?".":a+":",A(e))for(var s=0;s<e.length;s++){var c=a+O(l=e[s],s);u+=P(l,t,o,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=P(l=l.value,t,o,c=a+O(l,s++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function N(e,t,n){if(null==e)return e;var r=[],o=0;return P(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var R={current:null},j={transition:null},z={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:j,ReactCurrentOwner:k};function M(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=i,t.PureComponent=v,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,t.act=M,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)C.call(t,s)&&!S.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=j.transition;j.transition={};try{e()}finally{j.transition=t}},t.unstable_act=M,t.useCallback=function(e,t){return R.current.useCallback(e,t)},t.useContext=function(e){return R.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return R.current.useDeferredValue(e)},t.useEffect=function(e,t){return R.current.useEffect(e,t)},t.useId=function(){return R.current.useId()},t.useImperativeHandle=function(e,t,n){return R.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return R.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return R.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return R.current.useMemo(e,t)},t.useReducer=function(e,t,n){return R.current.useReducer(e,t,n)},t.useRef=function(e){return R.current.useRef(e)},t.useState=function(e){return R.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return R.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return R.current.useTransition()},t.version="18.3.1"},6540:(e,t,n)=>{e.exports=n(5287)},7463:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>a(u,n))s<o&&0>a(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<o&&0>a(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,v="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function A(e){if(g=!1,w(e),!m)if(null!==r(s))m=!0,j(C);else{var t=r(c);null!==t&&z(A,t.startTime-e)}}function C(e,n){m=!1,g&&(g=!1,b(E),E=-1),h=!0;var a=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!P());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(s)&&o(s),w(n)}else o(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&z(A,f.startTime-n),u=!1}return u}finally{d=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,S=!1,x=null,E=-1,_=5,O=-1;function P(){return!(t.unstable_now()-O<_)}function N(){if(null!==x){var e=t.unstable_now();O=e;var n=!0;try{n=x(!0,e)}finally{n?k():(S=!1,x=null)}}else S=!1}if("function"==typeof v)k=function(){v(N)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,R=T.port2;T.port1.onmessage=N,k=function(){R.postMessage(null)}}else k=function(){y(N,0)};function j(e){x=e,S||(S=!0,k())}function z(e,n){E=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,j(C))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(c,e),null===r(s)&&e===r(c)&&(g?(b(E),E=-1):g=!0,z(A,a-i))):(e.sortIndex=l,n(s,e),m||h||(m=!0,j(C))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},9982:(e,t,n)=>{e.exports=n(7463)},3338:(e,t,n)=>{n.r(t),n.d(t,{default:()=>y});var r=n(5072),o=n.n(r),a=n(7825),i=n.n(a),l=n(7659),u=n.n(l),s=n(5056),c=n.n(s),f=n(540),d=n.n(f),p=n(1113),h=n.n(p),m=n(653),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=u().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=d(),o()(m.A,g);const y=m.A&&m.A.locals?m.A.locals:void 0},5507:(e,t,n)=>{n.r(t),n.d(t,{default:()=>y});var r=n(5072),o=n.n(r),a=n(7825),i=n.n(a),l=n(7659),u=n.n(l),s=n(5056),c=n.n(s),f=n(540),d=n.n(f),p=n(1113),h=n.n(p),m=n(3182),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=u().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=d(),o()(m.A,g);const y=m.A&&m.A.locals?m.A.locals:void 0},3520:(e,t,n)=>{n.r(t),n.d(t,{default:()=>y});var r=n(5072),o=n.n(r),a=n(7825),i=n.n(a),l=n(7659),u=n.n(l),s=n(5056),c=n.n(s),f=n(540),d=n.n(f),p=n(1113),h=n.n(p),m=n(7899),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=u().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=d(),o()(m.A,g);const y=m.A&&m.A.locals?m.A.locals:void 0},3319:(e,t,n)=>{n.r(t),n.d(t,{default:()=>y});var r=n(5072),o=n.n(r),a=n(7825),i=n.n(a),l=n(7659),u=n.n(l),s=n(5056),c=n.n(s),f=n(540),d=n.n(f),p=n(1113),h=n.n(p),m=n(6426),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=u().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=d(),o()(m.A,g);const y=m.A&&m.A.locals?m.A.locals:void 0},3103:(e,t,n)=>{n.r(t),n.d(t,{default:()=>y});var r=n(5072),o=n.n(r),a=n(7825),i=n.n(a),l=n(7659),u=n.n(l),s=n(5056),c=n.n(s),f=n(540),d=n.n(f),p=n(1113),h=n.n(p),m=n(6642),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=u().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=d(),o()(m.A,g);const y=m.A&&m.A.locals?m.A.locals:void 0},8977:(e,t,n)=>{n.r(t),n.d(t,{default:()=>y});var r=n(5072),o=n.n(r),a=n(7825),i=n.n(a),l=n(7659),u=n.n(l),s=n(5056),c=n.n(s),f=n(540),d=n.n(f),p=n(1113),h=n.n(p),m=n(3004),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=u().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=d(),o()(m.A,g);const y=m.A&&m.A.locals?m.A.locals:void 0},5072:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var u=e[l],s=r.base?u[0]+r.base:u[0],c=a[s]||0,f="".concat(s," ").concat(c);a[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:h,references:1})}i.push(f)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var u=r(e,o),s=0;s<a.length;s++){var c=n(a[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=u}}},7659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},5056:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},1113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},5635:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BooksCount=t.BaseUrl=t.ApiKey=void 0,t.ApiKey="AIzaSyBRgz0ELM__gIfm5fbGPcexaOO5P0Kf-wM",t.BaseUrl="https://www.googleapis.com/books/v1/volumes",t.BooksCount="30"},8897:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.App=void 0;var i=a(n(6540)),l=n(3729),u=n(5278),s=n(3235),c=n(9878),f=n(3344);n(3338),t.App=function(){var e=(0,i.useState)(0),t=e[0],n=e[1],r=(0,i.useState)(),o=r[0],a=r[1],d=(0,l.useSelector)((function(e){return e.page.Page}));return i.default.createElement(i.default.Fragment,null,i.default.createElement(u.Header,{setBooks:a,setTotalItems:n}),function(){switch(d){case"book-list":return i.default.createElement(s.BookList,{books:o,setBooks:a,totalItems:t});case"book-page":return i.default.createElement(c.BookPage,null);case"loading-page":return i.default.createElement(f.LoagingPage,null);default:return null}}())}},8026:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BookCard=void 0;var o=r(n(6540)),a=n(3729),i=n(4027),l=n(8644);n(5507),t.BookCard=function(e){var t=e.book.volumeInfo,n=t.imageLinks,r=t.categories,u=t.title,s=t.authors,c=(0,a.useDispatch)();function f(){c((0,l.setCurrentBook)(e.book)),c((0,i.SetPage)("book-page"))}return o.default.createElement("div",{className:"bookCardContainer"},o.default.createElement("div",{className:"imgContainer"},o.default.createElement("img",{onClick:f,src:(null==n?void 0:n.thumbnail)?n.thumbnail:(null==n?void 0:n.smallThumbnail)?n.smallThumbnail:"./img/EmptyAvatar.jpg",alt:"BookAvatar"})),o.default.createElement("div",{className:"infoContainer"},o.default.createElement("p",{className:"category"},r||"No category"),o.default.createElement("h2",{className:"bookName",onClick:f},u||"No title"),o.default.createElement("h3",{className:"authorName"},s||"No authors")))}},3235:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{u(r.next(e))}catch(e){a(e)}}function l(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}u((r=r.apply(e,t||[])).next())}))},l=this&&this.__generator||function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=t.call(e,i)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.BookList=void 0;var u=a(n(6540)),s=n(3729),c=n(8026),f=n(9664),d=n(2874);n(3520),t.BookList=function(e){var t=this,n=(0,s.useDispatch)(),r=(0,u.useState)(30),o=r[0],a=r[1],p=e||{books:[],totalItems:0},h=p.books,m=p.totalItems,g=p.setBooks,y=(0,s.useSelector)((function(e){return e.found}));return u.default.createElement("main",null,u.default.createElement("p",{className:"booksCount"},void 0!==m&&m>0?"found "+m+" results":"No results"),u.default.createElement("div",{className:"booklistContainer"},null==h?void 0:h.map((function(e,t){return u.default.createElement(c.BookCard,{key:t,book:e})}))),u.default.createElement("div",{className:"moreButtonContainer"},u.default.createElement("button",{className:"moreButton",onClick:function(){return i(t,void 0,void 0,(function(){var e,t;return l(this,(function(r){switch(r.label){case 0:return n((0,f.SetNewIndex)(o)),e={Search:y.Search||"%20",Categories:y.Categories||"all",Filter:y.Filter||"relevance",StartIndex:o||0},[4,(0,d.GetResponseFromBookApi)(e)];case 1:return t=r.sent(),null!=h&&null!=t.items&&g(null==h?void 0:h.concat(t.items)),a(o+30),[2]}}))}))}},"Load more")))}},9878:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.BookPage=void 0;var o=r(n(6540)),a=n(3729),i=n(4027);n(3319),t.BookPage=function(){var e=(0,a.useDispatch)(),t=(0,a.useSelector)((function(e){return e.currentBook.Book}));if(!t)return o.default.createElement("div",null,"No book selected");var n=t.volumeInfo,r=n.imageLinks,l=n.categories,u=n.title,s=n.authors,c=n.description;return o.default.createElement("main",null,o.default.createElement("div",{className:"bookPageContainer"},o.default.createElement("div",{className:"bookFace"},o.default.createElement("img",{src:(null==r?void 0:r.thumbnail)?r.thumbnail:(null==r?void 0:r.smallThumbnail)?r.smallThumbnail:"./img/EmptyAvatar.jpg",alt:"BookAvatar"})),o.default.createElement("div",{className:"bookinfo"},o.default.createElement("p",{className:"bookMap",onClick:function(){e((0,i.SetPage)("book-list"))}},">"," to book-list"),o.default.createElement("p",{className:"bookMap"},l||"No categories"),o.default.createElement("h2",{className:"bookName"},u||"No title"),o.default.createElement("h3",{className:"authorName"},s||"No authors"),o.default.createElement("div",{className:"descriptionContainer"},o.default.createElement("p",{className:"description"},c||"No description")))))}},5278:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{u(r.next(e))}catch(e){a(e)}}function l(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}u((r=r.apply(e,t||[])).next())}))},l=this&&this.__generator||function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=t.call(e,i)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Header=void 0;var u=a(n(6540)),s=n(3729),c=n(2874),f=n(9664),d=n(4027);n(3103),t.Header=function(e){var t=this,n=(0,u.useState)(""),r=n[0],o=n[1],a=(0,u.useState)(""),p=a[0],h=a[1],m=(0,u.useState)(""),g=m[0],y=m[1],b=(0,s.useDispatch)(),v=function(){return i(t,void 0,void 0,(function(){var t,n;return l(this,(function(o){switch(o.label){case 0:return b((0,d.SetPage)("loading-page")),t={Search:r||"%20",Categories:p||"all",Filter:g||"relevance",StartIndex:0},b((0,f.SetSearchInfo)(t)),[4,(0,c.GetResponseFromBookApi)(t)];case 1:return null!=(n=o.sent()).items?e.setBooks(n.items):e.setBooks([]),null!=n.totalItems?e.setTotalItems(n.totalItems):e.setTotalItems(0),b((0,d.SetPage)("book-list")),[2]}}))}))};return u.default.createElement("header",{className:"header"},u.default.createElement("div",{className:"content"},u.default.createElement("h1",{className:"headerH1"},"Search for books"),u.default.createElement("div",{className:"filter"},u.default.createElement("div",{className:"searchBarContainer"},u.default.createElement("input",{className:"searchBar",type:"text",placeholder:"BookName...",onKeyDown:function(e){"Enter"===e.key&&v()},onChange:function(e){o(e.target.value)},value:r}),u.default.createElement("button",{onClick:v},u.default.createElement("img",{src:"./img/Search.png",alt:"Search"}))),u.default.createElement("div",{className:"selectsContainer"},u.default.createElement("div",{className:"selectItem"},u.default.createElement("p",null,"Categories"),u.default.createElement("select",{onChange:function(e){h(e.target.value)}},["all","art","biography","computers","history","medical","poetry"].map((function(e,t){return u.default.createElement("option",{value:e,key:t},e)})))),u.default.createElement("div",{className:"selectItem"},u.default.createElement("p",null,"Sorting by"),u.default.createElement("select",{onChange:function(e){y(e.target.value)}},u.default.createElement("option",{value:"relevance"},"relevance"),u.default.createElement("option",{value:"newest"},"newest")))))))}},3344:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LoagingPage=void 0;var o=r(n(6540));n(8977),t.LoagingPage=function(){return o.default.createElement("main",{className:"mainForLoading"},o.default.createElement("div",{className:"lodingImgContainer"}),o.default.createElement("p",null,"Loading..."))}},3900:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(6540)),a=r(n(5338)),i=n(3729),l=r(n(807)),u=n(8897),s=document.getElementById("root");s&&a.default.createRoot(s).render(o.default.createElement(o.default.StrictMode,null,o.default.createElement(i.Provider,{store:l.default},o.default.createElement(u.App,null))))},8710:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(8895),a=r(n(9664)),i=r(n(4027)),l=r(n(8644)),u=(0,o.combineReducers)({found:a.default,page:i.default,currentBook:l.default});t.default=u},8644:(e,t,n)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.clearCurrentBook=t.setCurrentBook=void 0;var o=(0,n(4603).createSlice)({name:"currentBookSlice",initialState:{Book:null},reducers:{setCurrentBook:function(e,t){e.Book=t.payload},clearCurrentBook:function(e){e.Book=null}}});t.setCurrentBook=(r=o.actions).setCurrentBook,t.clearCurrentBook=r.clearCurrentBook,t.default=o.reducer},9664:(e,t,n)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.SetNewIndex=t.SetSearchInfo=void 0;var o=(0,n(4603).createSlice)({name:"FoundSlice",initialState:{Search:" ",Categories:"all",Filter:"relevance",StartIndex:0},reducers:{SetSearchInfo:function(e,t){e.Search=t.payload.Search,e.Categories=t.payload.Categories,e.Filter=t.payload.Filter,e.StartIndex=t.payload.StartIndex},SetNewIndex:function(e,t){e.StartIndex=t.payload}}});t.SetSearchInfo=(r=o.actions).SetSearchInfo,t.SetNewIndex=r.SetNewIndex,t.default=o.reducer},4027:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SetPage=void 0;var r=(0,n(4603).createSlice)({name:"PageSlice",initialState:{Page:"book-list"},reducers:{SetPage:function(e,t){e.Page=t.payload}}});t.SetPage=r.actions.SetPage,t.default=r.reducer},807:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(4603),a=r(n(8710)),i=(0,o.configureStore)({reducer:a.default});t.default=i},2874:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{u(r.next(e))}catch(e){a(e)}}function l(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}u((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=t.call(e,i)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GetResponseFromBookApi=void 0;var i=a(n(6425)),l=n(5635);t.GetResponseFromBookApi=function(e){return r(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,i.default.get(l.BaseUrl,{params:{q:"all"===e.Categories?e.Search:"".concat(e.Search,"+subject:").concat(e.Categories),orderBy:e.Filter,startIndex:e.StartIndex,maxResults:l.BooksCount,key:l.ApiKey}})];case 1:return[2,t.sent().data]}}))}))}},7154:(e,t,n)=>{var r=n(6540),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=r.useSyncExternalStore,i=r.useRef,l=r.useEffect,u=r.useMemo,s=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,c){var f=i(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;f=u((function(){function e(e){if(!l){if(l=!0,a=e,e=r(e),void 0!==c&&d.hasValue){var t=d.value;if(c(t,e))return i=t}return i=e}if(t=i,o(a,e))return t;var n=r(e);return void 0!==c&&c(t,n)?t:(a=e,i=n)}var a,i,l=!1,u=void 0===n?null:n;return[function(){return e(t())},null===u?void 0:function(){return e(u())}]}),[t,n,r,c]);var p=a(e,f[0],f[1]);return l((function(){d.hasValue=!0,d.value=p}),[p]),s(p),p}},8418:(e,t,n)=>{e.exports=n(7154)},1525:(e,t,n)=>{e.exports=n.p+"d15eae1d11900907f930.png"},715:(e,t,n)=>{e.exports=n.p+"3194745210938580ed15.gif"},3853:(e,t,n)=>{var r,o=Object.defineProperty,a=Object.getOwnPropertyDescriptor,i=Object.getOwnPropertyNames,l=Object.prototype.hasOwnProperty,u=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let u of i(t))!l.call(e,u)&&u!==n&&o(e,u,{get:()=>t[u],enumerable:!(r=a(t,u))||r.enumerable});return e},s={};((e,t)=>{for(var n in t)o(e,n,{get:t[n],enumerable:!0})})(s,{ReducerType:()=>ye,SHOULD_AUTOBATCH:()=>F,TaskAbortError:()=>qe,Tuple:()=>P,addListener:()=>ut,asyncThunkCreator:()=>ge,autoBatchEnhancer:()=>q,buildCreateSlice:()=>ve,clearAllListeners:()=>st,combineSlices:()=>Ct,configureStore:()=>Q,createAction:()=>C,createActionCreatorInvariantMiddleware:()=>E,createAsyncThunk:()=>de,createDraftSafeSelector:()=>m,createDraftSafeSelectorCreator:()=>h,createDynamicMiddleware:()=>ht,createEntityAdapter:()=>Me,createImmutableStateInvariantMiddleware:()=>j,createListenerMiddleware:()=>dt,createNextState:()=>c.produce,createReducer:()=>J,createSelector:()=>f.createSelector,createSelectorCreator:()=>f.createSelectorCreator,createSerializableStateInvariantMiddleware:()=>B,createSlice:()=>Ae,current:()=>c.current,findNonSerializableValue:()=>I,formatProdErrorMessage:()=>kt,freeze:()=>c.freeze,isActionCreator:()=>k,isAllOf:()=>ee,isAnyOf:()=>Z,isAsyncThunkAction:()=>le,isDraft:()=>c.isDraft,isFluxStandardAction:()=>S,isFulfilled:()=>ie,isImmutableDefault:()=>R,isPending:()=>re,isPlain:()=>M,isRejected:()=>oe,isRejectedWithValue:()=>ae,lruMemoize:()=>f.lruMemoize,miniSerializeError:()=>fe,nanoid:()=>Y,original:()=>c.original,prepareAutoBatched:()=>U,removeListener:()=>ct,unwrapResult:()=>pe,weakMapMemoize:()=>f.weakMapMemoize}),e.exports=(r=s,u(o({},"__esModule",{value:!0}),r)),((e,t,n)=>{u(e,t,"default"),n&&u(n,t,"default")})(s,n(8895),e.exports);var c=n(9407),f=n(2885),d=n(9407),p=n(2885),h=(...e)=>{let t=(0,p.createSelectorCreator)(...e),n=Object.assign(((...e)=>{let n=t(...e),r=(e,...t)=>n((0,d.isDraft)(e)?(0,d.current)(e):e,...t);return Object.assign(r,n),r}),{withTypes:()=>n});return n},m=h(p.weakMapMemoize),g=n(8895),y=n(8895),b=typeof window<"u"&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?y.compose:y.compose.apply(null,arguments)},v=(typeof window<"u"&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__,n(9069)),w=n(8895),A=e=>e&&"function"==typeof e.match;function C(e,t){function n(...n){if(t){let r=t(...n);if(!r)throw new Error(kt(0));return{type:e,payload:r.payload,..."meta"in r&&{meta:r.meta},..."error"in r&&{error:r.error}}}return{type:e,payload:n[0]}}return n.toString=()=>`${e}`,n.type=e,n.match=t=>(0,w.isAction)(t)&&t.type===e,n}function k(e){return"function"==typeof e&&"type"in e&&A(e)}function S(e){return(0,w.isAction)(e)&&Object.keys(e).every(x)}function x(e){return["type","payload","error","meta"].indexOf(e)>-1}function E(e={}){return()=>e=>t=>e(t)}var _=n(9407);function O(e,t){for(let n of e)if(t(n))return n}var P=class e extends Array{constructor(...t){super(...t),Object.setPrototypeOf(this,e.prototype)}static get[Symbol.species](){return e}concat(...e){return super.concat.apply(this,e)}prepend(...t){return 1===t.length&&Array.isArray(t[0])?new e(...t[0].concat(this)):new e(...t.concat(this))}};function N(e){return(0,_.isDraftable)(e)?(0,_.produce)(e,(()=>{})):e}function T(e,t,n){if(e.has(t)){let r=e.get(t);return n.update&&(r=n.update(r,t,e),e.set(t,r)),r}if(!n.insert)throw new Error(kt(10));let r=n.insert(t,e);return e.set(t,r),r}function R(e){return"object"!=typeof e||null==e||Object.isFrozen(e)}function j(e={}){return()=>e=>t=>e(t)}var z=n(8895);function M(e){let t=typeof e;return null==e||"string"===t||"boolean"===t||"number"===t||Array.isArray(e)||(0,z.isPlainObject)(e)}function I(e,t="",n=M,r,o=[],a){let i;if(!n(e))return{keyPath:t||"<root>",value:e};if("object"!=typeof e||null===e||a?.has(e))return!1;let l=null!=r?r(e):Object.entries(e),u=o.length>0;for(let[e,s]of l){let l=t?t+"."+e:e;if(!u||!o.some((e=>e instanceof RegExp?e.test(l):l===e))){if(!n(s))return{keyPath:l,value:s};if("object"==typeof s&&(i=I(s,l,n,r,o,a),i))return i}}return a&&L(e)&&a.add(e),!1}function L(e){if(!Object.isFrozen(e))return!1;for(let t of Object.values(e))if("object"==typeof t&&null!==t&&!L(t))return!1;return!0}function B(e={}){return()=>e=>t=>e(t)}var D=()=>function(e){let{thunk:t=!0,immutableCheck:n=!0,serializableCheck:r=!0,actionCreatorCheck:o=!0}=e??{},a=new P;return t&&(function(e){return"boolean"==typeof e}(t)?a.push(v.thunk):a.push((0,v.withExtraArgument)(t.extraArgument))),a},F="RTK_autoBatch",U=()=>e=>({payload:e,meta:{[F]:!0}}),W=e=>t=>{setTimeout(t,e)},$=typeof window<"u"&&window.requestAnimationFrame?window.requestAnimationFrame:W(10),q=(e={type:"raf"})=>t=>(...n)=>{let r=t(...n),o=!0,a=!1,i=!1,l=new Set,u="tick"===e.type?queueMicrotask:"raf"===e.type?$:"callback"===e.type?e.queueNotification:W(e.timeout),s=()=>{i=!1,a&&(a=!1,l.forEach((e=>e())))};return Object.assign({},r,{subscribe(e){let t=r.subscribe((()=>o&&e()));return l.add(e),()=>{t(),l.delete(e)}},dispatch(e){try{return o=!e?.meta?.[F],a=!o,a&&(i||(i=!0,u(s))),r.dispatch(e)}finally{o=!0}}})},V=e=>function(t){let{autoBatch:n=!0}=t??{},r=new P(e);return n&&r.push(q("object"==typeof n?n:void 0)),r},H=!0;function Q(e){let t,n,r=D(),{reducer:o,middleware:a,devTools:i=!0,preloadedState:l,enhancers:u}=e||{};if("function"==typeof o)t=o;else{if(!(0,g.isPlainObject)(o))throw new Error(kt(1));t=(0,g.combineReducers)(o)}if(!H&&a&&"function"!=typeof a)throw new Error(kt(2));if("function"==typeof a){if(n=a(r),!H&&!Array.isArray(n))throw new Error(kt(3))}else n=r();if(!H&&n.some((e=>"function"!=typeof e)))throw new Error(kt(4));let s=g.compose;i&&(s=b({trace:!H,..."object"==typeof i&&i}));let c=(0,g.applyMiddleware)(...n),f=V(c);if(!H&&u&&"function"!=typeof u)throw new Error(kt(5));let d="function"==typeof u?u(f):f();if(!H&&!Array.isArray(d))throw new Error(kt(6));if(!H&&d.some((e=>"function"!=typeof e)))throw new Error(kt(7));!H&&n.length&&!d.includes(c)&&console.error("middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`");let p=s(...d);return(0,g.createStore)(t,l,p)}var K=n(9407);function G(e){let t,n={},r=[],o={addCase(e,t){let r="string"==typeof e?e:e.type;if(!r)throw new Error(kt(28));if(r in n)throw new Error(kt(29));return n[r]=t,o},addMatcher:(e,t)=>(r.push({matcher:e,reducer:t}),o),addDefaultCase:e=>(t=e,o)};return e(o),[n,r,t]}function J(e,t){let n,[r,o,a]=G(t);if(function(e){return"function"==typeof e}(e))n=()=>N(e());else{let t=N(e);n=()=>t}function i(e=n(),t){let i=[r[t.type],...o.filter((({matcher:e})=>e(t))).map((({reducer:e})=>e))];return 0===i.filter((e=>!!e)).length&&(i=[a]),i.reduce(((e,n)=>{if(n){if((0,K.isDraft)(e)){let r=n(e,t);return void 0===r?e:r}if((0,K.isDraftable)(e))return(0,K.produce)(e,(e=>n(e,t)));{let r=n(e,t);if(void 0===r){if(null===e)return e;throw new Error(kt(9))}return r}}return e}),e)}return i.getInitialState=n,i}var Y=(e=21)=>{let t="",n=e;for(;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t},X=(e,t)=>A(e)?e.match(t):e(t);function Z(...e){return t=>e.some((e=>X(e,t)))}function ee(...e){return t=>e.every((e=>X(e,t)))}function te(e,t){if(!e||!e.meta)return!1;let n="string"==typeof e.meta.requestId,r=t.indexOf(e.meta.requestStatus)>-1;return n&&r}function ne(e){return"function"==typeof e[0]&&"pending"in e[0]&&"fulfilled"in e[0]&&"rejected"in e[0]}function re(...e){return 0===e.length?e=>te(e,["pending"]):ne(e)?Z(...e.map((e=>e.pending))):re()(e[0])}function oe(...e){return 0===e.length?e=>te(e,["rejected"]):ne(e)?Z(...e.map((e=>e.rejected))):oe()(e[0])}function ae(...e){return 0===e.length||ne(e)?ee(oe(...e),(e=>e&&e.meta&&e.meta.rejectedWithValue)):ae()(e[0])}function ie(...e){return 0===e.length?e=>te(e,["fulfilled"]):ne(e)?Z(...e.map((e=>e.fulfilled))):ie()(e[0])}function le(...e){return 0===e.length?e=>te(e,["pending","fulfilled","rejected"]):ne(e)?Z(...e.flatMap((e=>[e.pending,e.rejected,e.fulfilled]))):le()(e[0])}var ue=["name","message","stack","code"],se=class{constructor(e,t){this.payload=e,this.meta=t}_type},ce=class{constructor(e,t){this.payload=e,this.meta=t}_type},fe=e=>{if("object"==typeof e&&null!==e){let t={};for(let n of ue)"string"==typeof e[n]&&(t[n]=e[n]);return t}return{message:String(e)}},de=(()=>{function e(e,t,n){let r=C(e+"/fulfilled",((e,t,n,r)=>({payload:e,meta:{...r||{},arg:n,requestId:t,requestStatus:"fulfilled"}}))),o=C(e+"/pending",((e,t,n)=>({payload:void 0,meta:{...n||{},arg:t,requestId:e,requestStatus:"pending"}}))),a=C(e+"/rejected",((e,t,r,o,a)=>({payload:o,error:(n&&n.serializeError||fe)(e||"Rejected"),meta:{...a||{},arg:r,requestId:t,rejectedWithValue:!!o,requestStatus:"rejected",aborted:"AbortError"===e?.name,condition:"ConditionError"===e?.name}})));return Object.assign((function(e){return(i,l,u)=>{let s,c,f=n?.idGenerator?n.idGenerator(e):Y(),d=new AbortController;function p(e){c=e,d.abort()}let h=async function(){let h;try{let a=n?.condition?.(e,{getState:l,extra:u});if(function(e){return null!==e&&"object"==typeof e&&"function"==typeof e.then}(a)&&(a=await a),!1===a||d.signal.aborted)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};let m=new Promise(((e,t)=>{s=()=>{t({name:"AbortError",message:c||"Aborted"})},d.signal.addEventListener("abort",s)}));i(o(f,e,n?.getPendingMeta?.({requestId:f,arg:e},{getState:l,extra:u}))),h=await Promise.race([m,Promise.resolve(t(e,{dispatch:i,getState:l,extra:u,requestId:f,signal:d.signal,abort:p,rejectWithValue:(e,t)=>new se(e,t),fulfillWithValue:(e,t)=>new ce(e,t)})).then((t=>{if(t instanceof se)throw t;return t instanceof ce?r(t.payload,f,e,t.meta):r(t,f,e)}))])}catch(t){h=t instanceof se?a(null,f,e,t.payload,t.meta):a(t,f,e)}finally{s&&d.signal.removeEventListener("abort",s)}return n&&!n.dispatchConditionRejection&&a.match(h)&&h.meta.condition||i(h),h}();return Object.assign(h,{abort:p,requestId:f,arg:e,unwrap:()=>h.then(pe)})}}),{pending:o,rejected:a,fulfilled:r,settled:Z(a,r),typePrefix:e})}return e.withTypes=()=>e,e})();function pe(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}var he,me=Symbol.for("rtk-slice-createasyncthunk"),ge={[me]:de},ye=((he=ye||{}).reducer="reducer",he.reducerWithPrepare="reducerWithPrepare",he.asyncThunk="asyncThunk",he);function be(e,t){return`${e}/${t}`}function ve({creators:e}={}){let t=e?.asyncThunk?.[me];return function(e){let{name:n,reducerPath:r=n}=e;if(!n)throw new Error(kt(11));let o=("function"==typeof e.reducers?e.reducers(function(){function e(e,t){return{_reducerDefinitionType:"asyncThunk",payloadCreator:e,...t}}return e.withTypes=()=>e,{reducer:e=>Object.assign({[e.name]:(...t)=>e(...t)}[e.name],{_reducerDefinitionType:"reducer"}),preparedReducer:(e,t)=>({_reducerDefinitionType:"reducerWithPrepare",prepare:e,reducer:t}),asyncThunk:e}}()):e.reducers)||{},a=Object.keys(o),i={sliceCaseReducersByName:{},sliceCaseReducersByType:{},actionCreators:{},sliceMatchers:[]},l={addCase(e,t){let n="string"==typeof e?e:e.type;if(!n)throw new Error(kt(12));if(n in i.sliceCaseReducersByType)throw new Error(kt(13));return i.sliceCaseReducersByType[n]=t,l},addMatcher:(e,t)=>(i.sliceMatchers.push({matcher:e,reducer:t}),l),exposeAction:(e,t)=>(i.actionCreators[e]=t,l),exposeCaseReducer:(e,t)=>(i.sliceCaseReducersByName[e]=t,l)};function u(){let[t={},n=[],r]="function"==typeof e.extraReducers?G(e.extraReducers):[e.extraReducers],o={...t,...i.sliceCaseReducersByType};return J(e.initialState,(e=>{for(let t in o)e.addCase(t,o[t]);for(let t of i.sliceMatchers)e.addMatcher(t.matcher,t.reducer);for(let t of n)e.addMatcher(t.matcher,t.reducer);r&&e.addDefaultCase(r)}))}a.forEach((r=>{let a=o[r],i={reducerName:r,type:be(n,r),createNotation:"function"==typeof e.reducers};!function(e){return"asyncThunk"===e._reducerDefinitionType}(a)?function({type:e,reducerName:t,createNotation:n},r,o){let a,i;if("reducer"in r){if(n&&!function(e){return"reducerWithPrepare"===e._reducerDefinitionType}(r))throw new Error(kt(17));a=r.reducer,i=r.prepare}else a=r;o.addCase(e,a).exposeCaseReducer(t,a).exposeAction(t,i?C(e,i):C(e))}(i,a,l):function({type:e,reducerName:t},n,r,o){if(!o)throw new Error(kt(18));let{payloadCreator:a,fulfilled:i,pending:l,rejected:u,settled:s,options:c}=n,f=o(e,a,c);r.exposeAction(t,f),i&&r.addCase(f.fulfilled,i),l&&r.addCase(f.pending,l),u&&r.addCase(f.rejected,u),s&&r.addMatcher(f.settled,s),r.exposeCaseReducer(t,{fulfilled:i||Ce,pending:l||Ce,rejected:u||Ce,settled:s||Ce})}(i,a,l,t)}));let s,c=e=>e,f=new Map;function d(e,t){return s||(s=u()),s(e,t)}function p(){return s||(s=u()),s.getInitialState()}function h(t,n=!1){function r(e){let r=e[t];return typeof r>"u"&&n&&(r=p()),r}function o(t=c){let r=T(f,n,{insert:()=>new WeakMap});return T(r,t,{insert:()=>{let r={};for(let[o,a]of Object.entries(e.selectors??{}))r[o]=we(a,t,p,n);return r}})}return{reducerPath:t,getSelectors:o,get selectors(){return o(r)},selectSlice:r}}let m={name:n,reducer:d,actions:i.actionCreators,caseReducers:i.sliceCaseReducersByName,getInitialState:p,...h(r),injectInto(e,{reducerPath:t,...n}={}){let o=t??r;return e.inject({reducerPath:o,reducer:d},n),{...m,...h(o,!0)}}};return m}}function we(e,t,n,r){function o(o,...a){let i=t(o);return typeof i>"u"&&r&&(i=n()),e(i,...a)}return o.unwrapped=e,o}var Ae=ve();function Ce(){}var ke=n(9407),Se=n(9407),xe=Se.isDraft;function Ee(e){let t=_e(((t,n)=>e(n)));return function(e){return t(e,void 0)}}function _e(e){return function(t,n){let r=t=>{!function(e){return S(e)}(n)?e(n,t):e(n.payload,t)};return xe(t)?(r(t),t):(0,Se.produce)(t,r)}}var Oe=n(9407);function Pe(e,t){return t(e)}function Ne(e){return Array.isArray(e)||(e=Object.values(e)),e}function Te(e){return(0,Oe.isDraft)(e)?(0,Oe.current)(e):e}function Re(e,t,n){e=Ne(e);let r=Te(n.ids),o=new Set(r),a=[],i=[];for(let n of e){let e=Pe(n,t);o.has(e)?i.push({id:e,changes:n}):a.push(n)}return[a,i,r]}function je(e){function t(t,n){let r=Pe(t,e);r in n.entities||(n.ids.push(r),n.entities[r]=t)}function n(e,n){e=Ne(e);for(let r of e)t(r,n)}function r(t,n){let r=Pe(t,e);r in n.entities||n.ids.push(r),n.entities[r]=t}function o(e,t){let n=!1;e.forEach((e=>{e in t.entities&&(delete t.entities[e],n=!0)})),n&&(t.ids=t.ids.filter((e=>e in t.entities)))}function a(t,n){let r={},o={};t.forEach((e=>{e.id in n.entities&&(o[e.id]={id:e.id,changes:{...o[e.id]?o[e.id].changes:null,...e.changes}})})),(t=Object.values(o)).length>0&&t.filter((t=>function(t,n,r){let o=r.entities[n.id];if(void 0===o)return!1;let a=Object.assign({},o,n.changes),i=Pe(a,e),l=i!==n.id;return l&&(t[n.id]=i,delete r.entities[n.id]),r.entities[i]=a,l}(r,t,n))).length>0&&(n.ids=Object.values(n.entities).map((t=>Pe(t,e))))}function i(t,r){let[o,i]=Re(t,e,r);a(i,r),n(o,r)}return{removeAll:Ee((function(e){Object.assign(e,{ids:[],entities:{}})})),addOne:_e(t),addMany:_e(n),setOne:_e(r),setMany:_e((function(e,t){e=Ne(e);for(let n of e)r(n,t)})),setAll:_e((function(e,t){e=Ne(e),t.ids=[],t.entities={},n(e,t)})),updateOne:_e((function(e,t){return a([e],t)})),updateMany:_e(a),upsertOne:_e((function(e,t){return i([e],t)})),upsertMany:_e(i),removeOne:_e((function(e,t){return o([e],t)})),removeMany:_e(o)}}function ze(e,t,n){let r=function(e,t,n){let r=0,o=e.length;for(;r<o;){let a=r+o>>>1;n(t,e[a])>=0?r=a+1:o=a}return r}(e,t,n);return e.splice(r,0,t),e}function Me(e={}){let{selectId:t,sortComparer:n}={sortComparer:!1,selectId:e=>e.id,...e},r=n?function(e,t){let{removeOne:n,removeMany:r,removeAll:o}=je(e);function a(t,n,r){t=Ne(t);let o=new Set(r??(0,ke.current)(n.ids)),a=t.filter((t=>!o.has(Pe(t,e))));0!==a.length&&s(n,a)}function i(t,n){if(0!==(t=Ne(t)).length){for(let r of t)delete n.entities[e(r)];s(n,t)}}function l(t,n){let r=!1,o=!1;for(let a of t){let t=n.entities[a.id];if(!t)continue;r=!0,Object.assign(t,a.changes);let i=e(t);if(a.id!==i){o=!0,delete n.entities[a.id];let e=n.ids.indexOf(a.id);n.ids[e]=i,n.entities[i]=t}}r&&s(n,[],r,o)}function u(t,n){let[r,o,i]=Re(t,e,n);o.length&&l(o,n),r.length&&a(r,n,i)}let s=(n,r,o,a)=>{let i=Te(n.entities),l=Te(n.ids),u=n.entities,s=l;a&&(s=Array.from(new Set(l)));let c=[];for(let e of s){let t=i[e];t&&c.push(t)}let f=0===c.length;for(let n of r)u[e(n)]=n,f||ze(c,n,t);f?c=r.slice().sort(t):o&&c.sort(t);let d=c.map(e);(function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length&&n<t.length;n++)if(e[n]!==t[n])return!1;return!0})(l,d)||(n.ids=d)};return{removeOne:n,removeMany:r,removeAll:o,addOne:_e((function(e,t){return a([e],t)})),updateOne:_e((function(e,t){return l([e],t)})),upsertOne:_e((function(e,t){return u([e],t)})),setOne:_e((function(e,t){return i([e],t)})),setMany:_e(i),setAll:_e((function(e,t){e=Ne(e),t.entities={},t.ids=[],a(e,t,[])})),addMany:_e(a),updateMany:_e(l),upsertMany:_e(u)}}(t,n):je(t),o=function(e){return{getInitialState:function(t={},n){let r=Object.assign({ids:[],entities:{}},t);return n?e.setAll(r,n):r}}}(r),a={getSelectors:function(e,t={}){let{createSelector:n=m}=t,r=e=>e.ids,o=e=>e.entities,a=n(r,o,((e,t)=>e.map((e=>t[e])))),i=(e,t)=>t,l=(e,t)=>e[t],u=n(r,(e=>e.length));if(!e)return{selectIds:r,selectEntities:o,selectAll:a,selectTotal:u,selectById:n(o,i,l)};let s=n(e,o);return{selectIds:n(e,r),selectEntities:s,selectAll:n(e,a),selectTotal:n(e,u),selectById:n(s,i,l)}}};return{selectId:t,sortComparer:n,...o,...a,...r}}var Ie=n(8895),Le="listener",Be="completed",De="cancelled",Fe=`task-${De}`,Ue=`task-${Be}`,We=`${Le}-${De}`,$e=`${Le}-${Be}`,qe=class{constructor(e){this.code=e,this.message=`task ${De} (reason: ${e})`}name="TaskAbortError";message},Ve=(e,t)=>{if("function"!=typeof e)throw new Error(kt(32))},He=()=>{},Qe=(e,t=He)=>(e.catch(t),e),Ke=(e,t)=>(e.addEventListener("abort",t,{once:!0}),()=>e.removeEventListener("abort",t)),Ge=(e,t)=>{let n=e.signal;n.aborted||("reason"in n||Object.defineProperty(n,"reason",{enumerable:!0,value:t,configurable:!0,writable:!0}),e.abort(t))},Je=e=>{if(e.aborted){let{reason:t}=e;throw new qe(t)}};function Ye(e,t){let n=He;return new Promise(((r,o)=>{let a=()=>o(new qe(e.reason));e.aborted?a():(n=Ke(e,a),t.finally((()=>n())).then(r,o))})).finally((()=>{n=He}))}var Xe=e=>t=>Qe(Ye(e,t).then((t=>(Je(e),t)))),Ze=e=>{let t=Xe(e);return e=>t(new Promise((t=>setTimeout(t,e))))},{assign:et}=Object,tt={},nt="listenerMiddleware",rt=(e,t)=>(n,r)=>{Ve(n);let o=new AbortController;(t=>{Ke(e,(()=>Ge(t,e.reason)))})(o);let a=(async(e,t)=>{try{return await Promise.resolve(),{status:"ok",value:await e()}}catch(e){return{status:e instanceof qe?"cancelled":"rejected",error:e}}finally{Ge(o,Ue)}})((async()=>{Je(e),Je(o.signal);let t=await n({pause:Xe(o.signal),delay:Ze(o.signal),signal:o.signal});return Je(o.signal),t}));return r?.autoJoin&&t.push(a.catch(He)),{result:Xe(e)(a),cancel(){Ge(o,Fe)}}},ot=e=>{let{type:t,actionCreator:n,matcher:r,predicate:o,effect:a}=e;if(t)o=C(t).match;else if(n)t=n.type,o=n.match;else if(r)o=r;else if(!o)throw new Error(kt(21));return Ve(a),{predicate:o,type:t,effect:a}},at=Object.assign((e=>{let{type:t,predicate:n,effect:r}=ot(e);return{id:Y(),effect:r,type:t,predicate:n,pending:new Set,unsubscribe:()=>{throw new Error(kt(22))}}}),{withTypes:()=>at}),it=e=>{e.pending.forEach((e=>{Ge(e,We)}))},lt=(e,t,n)=>{try{e(t,n)}catch(e){setTimeout((()=>{throw e}),0)}},ut=Object.assign(C(`${nt}/add`),{withTypes:()=>ut}),st=C(`${nt}/removeAll`),ct=Object.assign(C(`${nt}/remove`),{withTypes:()=>ct}),ft=(...e)=>{console.error(`${nt}/error`,...e)},dt=(e={})=>{let t=new Map,{extra:n,onError:r=ft}=e;Ve(r);let o=e=>{let n=O(Array.from(t.values()),(t=>t.effect===e.effect));return n||(n=at(e)),(e=>(e.unsubscribe=()=>t.delete(e.id),t.set(e.id,e),t=>{e.unsubscribe(),t?.cancelActive&&it(e)}))(n)};Object.assign(o,{withTypes:()=>o});let a=e=>{let{type:n,effect:r,predicate:o}=ot(e),a=O(Array.from(t.values()),(e=>("string"==typeof n?e.type===n:e.predicate===o)&&e.effect===r));return a&&(a.unsubscribe(),e.cancelActive&&it(a)),!!a};Object.assign(a,{withTypes:()=>a});let i=async(e,a,i,l)=>{let u=new AbortController,s=((e,t)=>(n,r)=>Qe((async(n,r)=>{Je(t);let o=()=>{},a=[new Promise(((t,r)=>{let a=e({predicate:n,effect:(e,n)=>{n.unsubscribe(),t([e,n.getState(),n.getOriginalState()])}});o=()=>{a(),r()}}))];null!=r&&a.push(new Promise((e=>setTimeout(e,r,null))));try{let e=await Ye(t,Promise.race(a));return Je(t),e}finally{o()}})(n,r)))(o,u.signal),c=[];try{e.pending.add(u),await Promise.resolve(e.effect(a,et({},i,{getOriginalState:l,condition:(e,t)=>s(e,t).then(Boolean),take:s,delay:Ze(u.signal),pause:Xe(u.signal),extra:n,signal:u.signal,fork:rt(u.signal,c),unsubscribe:e.unsubscribe,subscribe:()=>{t.set(e.id,e)},cancelActiveListeners:()=>{e.pending.forEach(((e,t,n)=>{e!==u&&(Ge(e,We),n.delete(e))}))},cancel:()=>{Ge(u,We),e.pending.delete(u)},throwIfCancelled:()=>{Je(u.signal)}})))}catch(e){e instanceof qe||lt(r,e,{raisedBy:"effect"})}finally{await Promise.all(c),Ge(u,$e),e.pending.delete(u)}},l=(e=>()=>{e.forEach(it),e.clear()})(t);return{middleware:e=>n=>u=>{if(!(0,Ie.isAction)(u))return n(u);if(ut.match(u))return o(u.payload);if(st.match(u))return void l();if(ct.match(u))return a(u.payload);let s,c=e.getState(),f=()=>{if(c===tt)throw new Error(kt(23));return c};try{if(s=n(u),t.size>0){let n=e.getState(),o=Array.from(t.values());for(let t of o){let o=!1;try{o=t.predicate(u,n,c)}catch(e){o=!1,lt(r,e,{raisedBy:"predicate"})}o&&i(t,u,e,f)}}}finally{c=tt}return s},startListening:o,stopListening:a,clearListeners:l}},pt=n(8895),ht=()=>{let e=Y(),t=new Map,n=Object.assign(C("dynamicMiddleware/add",((...t)=>({payload:t,meta:{instanceId:e}}))),{withTypes:()=>n}),r=Object.assign((function(...e){e.forEach((e=>{let n=O(Array.from(t.values()),(t=>t.middleware===e));n||(n=(e=>({id:Y(),middleware:e,applied:new Map}))(e)),t.set(n.id,n)}))}),{withTypes:()=>r}),o=ee(n,(e=>t=>t?.meta?.instanceId===e)(e));return{middleware:e=>n=>a=>o(a)?(r(...a.payload),e.dispatch):(e=>{let n=Array.from(t.values()).map((t=>T(t.applied,e,{insert:()=>t.middleware(e)})));return(0,pt.compose)(...n)})(e)(n)(a),addMiddleware:r,withMiddleware:n,instanceId:e}},mt=n(8895),gt=e=>e.flatMap((e=>(e=>"reducerPath"in e&&"string"==typeof e.reducerPath)(e)?[[e.reducerPath,e.reducer]]:Object.entries(e))),yt=Symbol.for("rtk-state-proxy-original"),bt=new WeakMap,vt=(e,t)=>T(bt,e,{insert:()=>new Proxy(e,{get:(e,n,r)=>{if(n===yt)return e;let o=Reflect.get(e,n,r);if(typeof o>"u"){let e=t[n.toString()];if(e){let t=e(void 0,{type:Y()});if(typeof t>"u")throw new Error(kt(24));return t}}return o}})}),wt=e=>{if(!(e=>!!e&&!!e[yt])(e))throw new Error(kt(25));return e[yt]},At=(e={})=>e;function Ct(...e){let t=Object.fromEntries(gt(e)),n=()=>Object.keys(t).length?(0,mt.combineReducers)(t):At,r=n();function o(e,t){return r(e,t)}o.withLazyLoadedSlices=()=>o;let a=Object.assign((function(e,n){return function(r,...o){return e(vt(n?n(r,...o):r,t),...o)}}),{original:wt});return Object.assign(o,{inject:(e,a={})=>{let{reducerPath:i,reducer:l}=e,u=t[i];return!a.overrideExisting&&u&&u!==l||(t[i]=l,r=n()),o},selector:a})}function kt(e){return`Minified Redux Toolkit error #${e}; visit https://redux-toolkit.js.org/Errors?code=${e} for the full message or use the non-minified dev environment for full errors. `}},6425:(e,t,n)=>{function r(e,t){return function(){return e.apply(t,arguments)}}const{toString:o}=Object.prototype,{getPrototypeOf:a}=Object,i=(l=Object.create(null),e=>{const t=o.call(e);return l[t]||(l[t]=t.slice(8,-1).toLowerCase())});var l;const u=e=>(e=e.toLowerCase(),t=>i(t)===e),s=e=>t=>typeof t===e,{isArray:c}=Array,f=s("undefined"),d=u("ArrayBuffer"),p=s("string"),h=s("function"),m=s("number"),g=e=>null!==e&&"object"==typeof e,y=e=>{if("object"!==i(e))return!1;const t=a(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},b=u("Date"),v=u("File"),w=u("Blob"),A=u("FileList"),C=u("URLSearchParams"),[k,S,x,E]=["ReadableStream","Request","Response","Headers"].map(u);function _(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),c(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),a=o.length;let i;for(r=0;r<a;r++)i=o[r],t.call(null,e[i],i,e)}}function O(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const P="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:n.g,N=e=>!f(e)&&e!==P,T=(R="undefined"!=typeof Uint8Array&&a(Uint8Array),e=>R&&e instanceof R);var R;const j=u("HTMLFormElement"),z=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),M=u("RegExp"),I=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};_(n,((n,o)=>{let a;!1!==(a=t(n,o,e))&&(r[o]=a||n)})),Object.defineProperties(e,r)},L="abcdefghijklmnopqrstuvwxyz",B="0123456789",D={DIGIT:B,ALPHA:L,ALPHA_DIGIT:L+L.toUpperCase()+B},F=u("AsyncFunction");var U={isArray:c,isArrayBuffer:d,isBuffer:function(e){return null!==e&&!f(e)&&null!==e.constructor&&!f(e.constructor)&&h(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||h(e.append)&&("formdata"===(t=i(e))||"object"===t&&h(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&d(e.buffer),t},isString:p,isNumber:m,isBoolean:e=>!0===e||!1===e,isObject:g,isPlainObject:y,isReadableStream:k,isRequest:S,isResponse:x,isHeaders:E,isUndefined:f,isDate:b,isFile:v,isBlob:w,isRegExp:M,isFunction:h,isStream:e=>g(e)&&h(e.pipe),isURLSearchParams:C,isTypedArray:T,isFileList:A,forEach:_,merge:function e(){const{caseless:t}=N(this)&&this||{},n={},r=(r,o)=>{const a=t&&O(n,o)||o;y(n[a])&&y(r)?n[a]=e(n[a],r):y(r)?n[a]=e({},r):c(r)?n[a]=r.slice():n[a]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&_(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:o}={})=>(_(t,((t,o)=>{n&&h(t)?e[o]=r(t,n):e[o]=t}),{allOwnKeys:o}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,i,l;const u={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),i=o.length;i-- >0;)l=o[i],r&&!r(l,e,t)||u[l]||(t[l]=e[l],u[l]=!0);e=!1!==n&&a(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:i,kindOfTest:u,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(c(e))return e;let t=e.length;if(!m(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:j,hasOwnProperty:z,hasOwnProp:z,reduceDescriptors:I,freezeMethods:e=>{I(e,((t,n)=>{if(h(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];h(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return c(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:O,global:P,isContextDefined:N,ALPHABET:D,generateString:(e=16,t=D.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&h(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(g(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=c(e)?[]:{};return _(e,((e,t)=>{const a=n(e,r+1);!f(a)&&(o[t]=a)})),t[r]=void 0,o}}return e};return n(e,0)},isAsyncFn:F,isThenable:e=>e&&(g(e)||h(e))&&h(e.then)&&h(e.catch)};function W(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}U.inherits(W,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:U.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const $=W.prototype,q={};function V(e){return U.isPlainObject(e)||U.isArray(e)}function H(e){return U.endsWith(e,"[]")?e.slice(0,-2):e}function Q(e,t,n){return e?e.concat(t).map((function(e,t){return e=H(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{q[e]={value:e}})),Object.defineProperties(W,q),Object.defineProperty($,"isAxiosError",{value:!0}),W.from=(e,t,n,r,o,a)=>{const i=Object.create($);return U.toFlatObject(e,i,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),W.call(i,e.message,t,n,r,o),i.cause=e,i.name=e.name,a&&Object.assign(i,a),i};const K=U.toFlatObject(U,{},null,(function(e){return/^is[A-Z]/.test(e)}));function G(e,t,n){if(!U.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=U.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!U.isUndefined(t[e])}))).metaTokens,o=n.visitor||s,a=n.dots,i=n.indexes,l=(n.Blob||"undefined"!=typeof Blob&&Blob)&&U.isSpecCompliantForm(t);if(!U.isFunction(o))throw new TypeError("visitor must be a function");function u(e){if(null===e)return"";if(U.isDate(e))return e.toISOString();if(!l&&U.isBlob(e))throw new W("Blob is not supported. Use a Buffer instead.");return U.isArrayBuffer(e)||U.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function s(e,n,o){let l=e;if(e&&!o&&"object"==typeof e)if(U.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(U.isArray(e)&&function(e){return U.isArray(e)&&!e.some(V)}(e)||(U.isFileList(e)||U.endsWith(n,"[]"))&&(l=U.toArray(e)))return n=H(n),l.forEach((function(e,r){!U.isUndefined(e)&&null!==e&&t.append(!0===i?Q([n],r,a):null===i?n:n+"[]",u(e))})),!1;return!!V(e)||(t.append(Q(o,n,a),u(e)),!1)}const c=[],f=Object.assign(K,{defaultVisitor:s,convertValue:u,isVisitable:V});if(!U.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!U.isUndefined(n)){if(-1!==c.indexOf(n))throw Error("Circular reference detected in "+r.join("."));c.push(n),U.forEach(n,(function(n,a){!0===(!(U.isUndefined(n)||null===n)&&o.call(t,n,U.isString(a)?a.trim():a,r,f))&&e(n,r?r.concat(a):[a])})),c.pop()}}(e),t}function J(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function Y(e,t){this._pairs=[],e&&G(e,this,t)}const X=Y.prototype;function Z(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function ee(e,t,n){if(!t)return e;const r=n&&n.encode||Z,o=n&&n.serialize;let a;if(a=o?o(t,n):U.isURLSearchParams(t)?t.toString():new Y(t,n).toString(r),a){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}X.append=function(e,t){this._pairs.push([e,t])},X.toString=function(e){const t=e?function(t){return e.call(this,t,J)}:J;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};var te=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){U.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},ne={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},re={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:Y,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]};const oe="undefined"!=typeof window&&"undefined"!=typeof document,ae=(ie="undefined"!=typeof navigator&&navigator.product,oe&&["ReactNative","NativeScript","NS"].indexOf(ie)<0);var ie;const le="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,ue=oe&&window.location.href||"http://localhost";var se={...Object.freeze({__proto__:null,hasBrowserEnv:oe,hasStandardBrowserWebWorkerEnv:le,hasStandardBrowserEnv:ae,origin:ue}),...re};function ce(e){function t(e,n,r,o){let a=e[o++];if("__proto__"===a)return!0;const i=Number.isFinite(+a),l=o>=e.length;return a=!a&&U.isArray(r)?r.length:a,l?(U.hasOwnProp(r,a)?r[a]=[r[a],n]:r[a]=n,!i):(r[a]&&U.isObject(r[a])||(r[a]=[]),t(e,n,r[a],o)&&U.isArray(r[a])&&(r[a]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let a;for(r=0;r<o;r++)a=n[r],t[a]=e[a];return t}(r[a])),!i)}if(U.isFormData(e)&&U.isFunction(e.entries)){const n={};return U.forEachEntry(e,((e,r)=>{t(function(e){return U.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null}const fe={transitional:ne,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=U.isObject(e);if(o&&U.isHTMLForm(e)&&(e=new FormData(e)),U.isFormData(e))return r?JSON.stringify(ce(e)):e;if(U.isArrayBuffer(e)||U.isBuffer(e)||U.isStream(e)||U.isFile(e)||U.isBlob(e)||U.isReadableStream(e))return e;if(U.isArrayBufferView(e))return e.buffer;if(U.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let a;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return G(e,new se.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return se.isNode&&U.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((a=U.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return G(a?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(U.isString(e))try{return(0,JSON.parse)(e),U.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||fe.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(U.isResponse(e)||U.isReadableStream(e))return e;if(e&&U.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw W.from(e,W.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:se.classes.FormData,Blob:se.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};U.forEach(["delete","get","head","post","put","patch"],(e=>{fe.headers[e]={}}));var de=fe;const pe=U.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),he=Symbol("internals");function me(e){return e&&String(e).trim().toLowerCase()}function ge(e){return!1===e||null==e?e:U.isArray(e)?e.map(ge):String(e)}function ye(e,t,n,r,o){return U.isFunction(r)?r.call(this,t,n):(o&&(t=n),U.isString(t)?U.isString(r)?-1!==t.indexOf(r):U.isRegExp(r)?r.test(t):void 0:void 0)}class be{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=me(t);if(!o)throw new Error("header name must be a non-empty string");const a=U.findKey(r,o);(!a||void 0===r[a]||!0===n||void 0===n&&!1!==r[a])&&(r[a||t]=ge(e))}const a=(e,t)=>U.forEach(e,((e,n)=>o(e,n,t)));if(U.isPlainObject(e)||e instanceof this.constructor)a(e,t);else if(U.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))a((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&pe[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t);else if(U.isHeaders(e))for(const[t,r]of e.entries())o(r,t,n);else null!=e&&o(t,e,n);return this}get(e,t){if(e=me(e)){const n=U.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(U.isFunction(t))return t.call(this,e,n);if(U.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=me(e)){const n=U.findKey(this,e);return!(!n||void 0===this[n]||t&&!ye(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=me(e)){const o=U.findKey(n,e);!o||t&&!ye(0,n[o],o,t)||(delete n[o],r=!0)}}return U.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!ye(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return U.forEach(this,((r,o)=>{const a=U.findKey(n,o);if(a)return t[a]=ge(r),void delete t[o];const i=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();i!==o&&delete t[o],t[i]=ge(r),n[i]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return U.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&U.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[he]=this[he]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=me(e);t[r]||(function(e,t){const n=U.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return U.isArray(e)?e.forEach(r):r(e),this}}be.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),U.reduceDescriptors(be.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),U.freezeMethods(be);var ve=be;function we(e,t){const n=this||de,r=t||n,o=ve.from(r.headers);let a=r.data;return U.forEach(e,(function(e){a=e.call(n,a,o.normalize(),t?t.status:void 0)})),o.normalize(),a}function Ae(e){return!(!e||!e.__CANCEL__)}function Ce(e,t,n){W.call(this,null==e?"canceled":e,W.ERR_CANCELED,t,n),this.name="CanceledError"}function ke(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new W("Request failed with status code "+n.status,[W.ERR_BAD_REQUEST,W.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}U.inherits(Ce,W,{__CANCEL__:!0});var Se=(e,t,n=3)=>{let r=0;const o=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,a=0,i=0;return t=void 0!==t?t:1e3,function(l){const u=Date.now(),s=r[i];o||(o=u),n[a]=l,r[a]=u;let c=i,f=0;for(;c!==a;)f+=n[c++],c%=e;if(a=(a+1)%e,a===i&&(i=(i+1)%e),u-o<t)return;const d=s&&u-s;return d?Math.round(1e3*f/d):void 0}}(50,250);return function(e,t){let n=0;const r=1e3/t;let o=null;return function(){const t=!0===this,a=Date.now();if(t||a-n>r)return o&&(clearTimeout(o),o=null),n=a,e.apply(null,arguments);o||(o=setTimeout((()=>(o=null,n=Date.now(),e.apply(null,arguments))),r-(a-n)))}}((n=>{const a=n.loaded,i=n.lengthComputable?n.total:void 0,l=a-r,u=o(l);r=a;const s={loaded:a,total:i,progress:i?a/i:void 0,bytes:l,rate:u||void 0,estimated:u&&i&&a<=i?(i-a)/u:void 0,event:n,lengthComputable:null!=i};s[t?"download":"upload"]=!0,e(s)}),n)},xe=se.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=U.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0},Ee=se.hasStandardBrowserEnv?{write(e,t,n,r,o,a){const i=[e+"="+encodeURIComponent(t)];U.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),U.isString(r)&&i.push("path="+r),U.isString(o)&&i.push("domain="+o),!0===a&&i.push("secure"),document.cookie=i.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function _e(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Oe=e=>e instanceof ve?{...e}:e;function Pe(e,t){t=t||{};const n={};function r(e,t,n){return U.isPlainObject(e)&&U.isPlainObject(t)?U.merge.call({caseless:n},e,t):U.isPlainObject(t)?U.merge({},t):U.isArray(t)?t.slice():t}function o(e,t,n){return U.isUndefined(t)?U.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function a(e,t){if(!U.isUndefined(t))return r(void 0,t)}function i(e,t){return U.isUndefined(t)?U.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function l(n,o,a){return a in t?r(n,o):a in e?r(void 0,n):void 0}const u={url:a,method:a,data:a,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,withXSRFToken:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:l,headers:(e,t)=>o(Oe(e),Oe(t),!0)};return U.forEach(Object.keys(Object.assign({},e,t)),(function(r){const a=u[r]||o,i=a(e[r],t[r],r);U.isUndefined(i)&&a!==l||(n[r]=i)})),n}var Ne=e=>{const t=Pe({},e);let n,{data:r,withXSRFToken:o,xsrfHeaderName:a,xsrfCookieName:i,headers:l,auth:u}=t;if(t.headers=l=ve.from(l),t.url=ee(_e(t.baseURL,t.url),e.params,e.paramsSerializer),u&&l.set("Authorization","Basic "+btoa((u.username||"")+":"+(u.password?unescape(encodeURIComponent(u.password)):""))),U.isFormData(r))if(se.hasStandardBrowserEnv||se.hasStandardBrowserWebWorkerEnv)l.setContentType(void 0);else if(!1!==(n=l.getContentType())){const[e,...t]=n?n.split(";").map((e=>e.trim())).filter(Boolean):[];l.setContentType([e||"multipart/form-data",...t].join("; "))}if(se.hasStandardBrowserEnv&&(o&&U.isFunction(o)&&(o=o(t)),o||!1!==o&&xe(t.url))){const e=a&&i&&Ee.read(i);e&&l.set(a,e)}return t},Te="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){const r=Ne(e);let o=r.data;const a=ve.from(r.headers).normalize();let i,{responseType:l}=r;function u(){r.cancelToken&&r.cancelToken.unsubscribe(i),r.signal&&r.signal.removeEventListener("abort",i)}let s=new XMLHttpRequest;function c(){if(!s)return;const r=ve.from("getAllResponseHeaders"in s&&s.getAllResponseHeaders());ke((function(e){t(e),u()}),(function(e){n(e),u()}),{data:l&&"text"!==l&&"json"!==l?s.response:s.responseText,status:s.status,statusText:s.statusText,headers:r,config:e,request:s}),s=null}s.open(r.method.toUpperCase(),r.url,!0),s.timeout=r.timeout,"onloadend"in s?s.onloadend=c:s.onreadystatechange=function(){s&&4===s.readyState&&(0!==s.status||s.responseURL&&0===s.responseURL.indexOf("file:"))&&setTimeout(c)},s.onabort=function(){s&&(n(new W("Request aborted",W.ECONNABORTED,r,s)),s=null)},s.onerror=function(){n(new W("Network Error",W.ERR_NETWORK,r,s)),s=null},s.ontimeout=function(){let e=r.timeout?"timeout of "+r.timeout+"ms exceeded":"timeout exceeded";const t=r.transitional||ne;r.timeoutErrorMessage&&(e=r.timeoutErrorMessage),n(new W(e,t.clarifyTimeoutError?W.ETIMEDOUT:W.ECONNABORTED,r,s)),s=null},void 0===o&&a.setContentType(null),"setRequestHeader"in s&&U.forEach(a.toJSON(),(function(e,t){s.setRequestHeader(t,e)})),U.isUndefined(r.withCredentials)||(s.withCredentials=!!r.withCredentials),l&&"json"!==l&&(s.responseType=r.responseType),"function"==typeof r.onDownloadProgress&&s.addEventListener("progress",Se(r.onDownloadProgress,!0)),"function"==typeof r.onUploadProgress&&s.upload&&s.upload.addEventListener("progress",Se(r.onUploadProgress)),(r.cancelToken||r.signal)&&(i=t=>{s&&(n(!t||t.type?new Ce(null,e,s):t),s.abort(),s=null)},r.cancelToken&&r.cancelToken.subscribe(i),r.signal&&(r.signal.aborted?i():r.signal.addEventListener("abort",i)));const f=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(r.url);f&&-1===se.protocols.indexOf(f)?n(new W("Unsupported protocol "+f+":",W.ERR_BAD_REQUEST,e)):s.send(o||null)}))},Re=(e,t)=>{let n,r=new AbortController;const o=function(e){if(!n){n=!0,i();const t=e instanceof Error?e:this.reason;r.abort(t instanceof W?t:new Ce(t instanceof Error?t.message:t))}};let a=t&&setTimeout((()=>{o(new W(`timeout ${t} of ms exceeded`,W.ETIMEDOUT))}),t);const i=()=>{e&&(a&&clearTimeout(a),a=null,e.forEach((e=>{e&&(e.removeEventListener?e.removeEventListener("abort",o):e.unsubscribe(o))})),e=null)};e.forEach((e=>e&&e.addEventListener&&e.addEventListener("abort",o)));const{signal:l}=r;return l.unsubscribe=i,[l,()=>{a&&clearTimeout(a),a=null}]};const je=function*(e,t){let n=e.byteLength;if(!t||n<t)return void(yield e);let r,o=0;for(;o<n;)r=o+t,yield e.slice(o,r),o=r},ze=(e,t,n,r,o)=>{const a=async function*(e,t,n){for await(const r of e)yield*je(ArrayBuffer.isView(r)?r:await n(String(r)),t)}(e,t,o);let i=0;return new ReadableStream({type:"bytes",async pull(e){const{done:t,value:o}=await a.next();if(t)return e.close(),void r();let l=o.byteLength;n&&n(i+=l),e.enqueue(new Uint8Array(o))},cancel:e=>(r(e),a.return())},{highWaterMark:2})},Me=(e,t)=>{const n=null!=e;return r=>setTimeout((()=>t({lengthComputable:n,total:e,loaded:r})))},Ie="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,Le=Ie&&"function"==typeof ReadableStream,Be=Ie&&("function"==typeof TextEncoder?(De=new TextEncoder,e=>De.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var De;const Fe=Le&&(()=>{let e=!1;const t=new Request(se.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})(),Ue=Le&&!!(()=>{try{return U.isReadableStream(new Response("").body)}catch(e){}})(),We={stream:Ue&&(e=>e.body)};var $e;Ie&&($e=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!We[e]&&(We[e]=U.isFunction($e[e])?t=>t[e]():(t,n)=>{throw new W(`Response type '${e}' is not supported`,W.ERR_NOT_SUPPORT,n)})})));const qe={http:null,xhr:Te,fetch:Ie&&(async e=>{let{url:t,method:n,data:r,signal:o,cancelToken:a,timeout:i,onDownloadProgress:l,onUploadProgress:u,responseType:s,headers:c,withCredentials:f="same-origin",fetchOptions:d}=Ne(e);s=s?(s+"").toLowerCase():"text";let p,h,[m,g]=o||a||i?Re([o,a],i):[];const y=()=>{!p&&setTimeout((()=>{m&&m.unsubscribe()})),p=!0};let b;try{if(u&&Fe&&"get"!==n&&"head"!==n&&0!==(b=await(async(e,t)=>{const n=U.toFiniteNumber(e.getContentLength());return null==n?(async e=>null==e?0:U.isBlob(e)?e.size:U.isSpecCompliantForm(e)?(await new Request(e).arrayBuffer()).byteLength:U.isArrayBufferView(e)?e.byteLength:(U.isURLSearchParams(e)&&(e+=""),U.isString(e)?(await Be(e)).byteLength:void 0))(t):n})(c,r))){let e,n=new Request(t,{method:"POST",body:r,duplex:"half"});U.isFormData(r)&&(e=n.headers.get("content-type"))&&c.setContentType(e),n.body&&(r=ze(n.body,65536,Me(b,Se(u)),null,Be))}U.isString(f)||(f=f?"cors":"omit"),h=new Request(t,{...d,signal:m,method:n.toUpperCase(),headers:c.normalize().toJSON(),body:r,duplex:"half",withCredentials:f});let o=await fetch(h);const a=Ue&&("stream"===s||"response"===s);if(Ue&&(l||a)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=o[t]}));const t=U.toFiniteNumber(o.headers.get("content-length"));o=new Response(ze(o.body,65536,l&&Me(t,Se(l,!0)),a&&y,Be),e)}s=s||"text";let i=await We[U.findKey(We,s)||"text"](o,e);return!a&&y(),g&&g(),await new Promise(((t,n)=>{ke(t,n,{data:i,headers:ve.from(o.headers),status:o.status,statusText:o.statusText,config:e,request:h})}))}catch(t){if(y(),t&&"TypeError"===t.name&&/fetch/i.test(t.message))throw Object.assign(new W("Network Error",W.ERR_NETWORK,e,h),{cause:t.cause||t});throw W.from(t,t&&t.code,e,h)}})};U.forEach(qe,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const Ve=e=>`- ${e}`,He=e=>U.isFunction(e)||null===e||!1===e;var Qe=e=>{e=U.isArray(e)?e:[e];const{length:t}=e;let n,r;const o={};for(let a=0;a<t;a++){let t;if(n=e[a],r=n,!He(n)&&(r=qe[(t=String(n)).toLowerCase()],void 0===r))throw new W(`Unknown adapter '${t}'`);if(r)break;o[t||"#"+a]=r}if(!r){const e=Object.entries(o).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));throw new W("There is no suitable adapter to dispatch the request "+(t?e.length>1?"since :\n"+e.map(Ve).join("\n"):" "+Ve(e[0]):"as no adapter specified"),"ERR_NOT_SUPPORT")}return r};function Ke(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Ce(null,e)}function Ge(e){return Ke(e),e.headers=ve.from(e.headers),e.data=we.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Qe(e.adapter||de.adapter)(e).then((function(t){return Ke(e),t.data=we.call(e,e.transformResponse,t),t.headers=ve.from(t.headers),t}),(function(t){return Ae(t)||(Ke(e),t&&t.response&&(t.response.data=we.call(e,e.transformResponse,t.response),t.response.headers=ve.from(t.response.headers))),Promise.reject(t)}))}const Je={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{Je[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const Ye={};Je.transitional=function(e,t,n){function r(e,t){return"[Axios v1.7.2] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,a)=>{if(!1===e)throw new W(r(o," has been removed"+(t?" in "+t:"")),W.ERR_DEPRECATED);return t&&!Ye[o]&&(Ye[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,a)}};var Xe={assertOptions:function(e,t,n){if("object"!=typeof e)throw new W("options must be an object",W.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const a=r[o],i=t[a];if(i){const t=e[a],n=void 0===t||i(t,a,e);if(!0!==n)throw new W("option "+a+" must be "+n,W.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new W("Unknown option "+a,W.ERR_BAD_OPTION)}},validators:Je};const Ze=Xe.validators;class et{constructor(e){this.defaults=e,this.interceptors={request:new te,response:new te}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t;Error.captureStackTrace?Error.captureStackTrace(t={}):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Pe(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;void 0!==n&&Xe.assertOptions(n,{silentJSONParsing:Ze.transitional(Ze.boolean),forcedJSONParsing:Ze.transitional(Ze.boolean),clarifyTimeoutError:Ze.transitional(Ze.boolean)},!1),null!=r&&(U.isFunction(r)?t.paramsSerializer={serialize:r}:Xe.assertOptions(r,{encode:Ze.function,serialize:Ze.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let a=o&&U.merge(o.common,o[t.method]);o&&U.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=ve.concat(a,o);const i=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));const u=[];let s;this.interceptors.response.forEach((function(e){u.push(e.fulfilled,e.rejected)}));let c,f=0;if(!l){const e=[Ge.bind(this),void 0];for(e.unshift.apply(e,i),e.push.apply(e,u),c=e.length,s=Promise.resolve(t);f<c;)s=s.then(e[f++],e[f++]);return s}c=i.length;let d=t;for(f=0;f<c;){const e=i[f++],t=i[f++];try{d=e(d)}catch(e){t.call(this,e);break}}try{s=Ge.call(this,d)}catch(e){return Promise.reject(e)}for(f=0,c=u.length;f<c;)s=s.then(u[f++],u[f++]);return s}getUri(e){return ee(_e((e=Pe(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}U.forEach(["delete","get","head","options"],(function(e){et.prototype[e]=function(t,n){return this.request(Pe(n||{},{method:e,url:t,data:(n||{}).data}))}})),U.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(Pe(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}et.prototype[e]=t(),et.prototype[e+"Form"]=t(!0)}));var tt=et;class nt{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new Ce(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new nt((function(t){e=t})),cancel:e}}}var rt=nt;const ot={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(ot).forEach((([e,t])=>{ot[t]=e}));var at=ot;const it=function e(t){const n=new tt(t),o=r(tt.prototype.request,n);return U.extend(o,tt.prototype,n,{allOwnKeys:!0}),U.extend(o,n,null,{allOwnKeys:!0}),o.create=function(n){return e(Pe(t,n))},o}(de);it.Axios=tt,it.CanceledError=Ce,it.CancelToken=rt,it.isCancel=Ae,it.VERSION="1.7.2",it.toFormData=G,it.AxiosError=W,it.Cancel=it.CanceledError,it.all=function(e){return Promise.all(e)},it.spread=function(e){return function(t){return e.apply(null,t)}},it.isAxiosError=function(e){return U.isObject(e)&&!0===e.isAxiosError},it.mergeConfig=Pe,it.AxiosHeaders=ve,it.formToJSON=e=>ce(U.isHTMLForm(e)?new FormData(e):e),it.getAdapter=Qe,it.HttpStatusCode=at,it.default=it,e.exports=it},7372:(e,t,n)=>{var r,o=Object.create,a=Object.defineProperty,i=Object.getOwnPropertyDescriptor,l=Object.getOwnPropertyNames,u=Object.getPrototypeOf,s=Object.prototype.hasOwnProperty,c=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let o of l(t))!s.call(e,o)&&o!==n&&a(e,o,{get:()=>t[o],enumerable:!(r=i(t,o))||r.enumerable});return e},f=(e,t,n)=>(n=null!=e?o(u(e)):{},c(!t&&e&&e.__esModule?n:a(n,"default",{value:e,enumerable:!0}),e)),d={};((e,t)=>{for(var n in t)a(e,n,{get:t[n],enumerable:!0})})(d,{Provider:()=>ve,ReactReduxContext:()=>v,batch:()=>Se,connect:()=>be,createDispatchHook:()=>Ce,createSelectorHook:()=>x,createStoreHook:()=>we,shallowEqual:()=>te,useDispatch:()=>ke,useSelector:()=>E,useStore:()=>Ae}),e.exports=(r=d,c(a({},"__esModule",{value:!0}),r));var p=f(n(6540)),h=n(8418),m=f(n(6540)),g="default"in m?m.default:m,y=Symbol.for("react-redux-context"),b=typeof globalThis<"u"?globalThis:{},v=function(){if(!g.createContext)return{};let e=b[y]??(b[y]=new Map),t=e.get(g.createContext);return t||(t=g.createContext(null),e.set(g.createContext,t)),t}(),w=()=>{throw new Error("uSES not initialized!")};function A(e=v){return function(){return g.useContext(e)}}var C=A(),k=w,S=(e,t)=>e===t;function x(e=v){let t=e===v?C:A(e),n=(e,n={})=>{let{equalityFn:r=S,devModeChecks:o={}}="function"==typeof n?{equalityFn:n}:n,{store:a,subscription:i,getServerState:l,stabilityCheck:u,identityFunctionCheck:s}=t(),c=(g.useRef(!0),g.useCallback({[e.name]:t=>e(t)}[e.name],[e,u,o.stabilityCheck])),f=k(i.addNestedSub,a.getState,l||a.getState,c,r);return g.useDebugValue(f),f};return Object.assign(n,{withTypes:()=>n}),n}var E=x(),_=Symbol.for("react.element"),O=Symbol.for("react.portal"),P=Symbol.for("react.fragment"),N=Symbol.for("react.strict_mode"),T=Symbol.for("react.profiler"),R=Symbol.for("react.provider"),j=Symbol.for("react.context"),z=Symbol.for("react.server_context"),M=Symbol.for("react.forward_ref"),I=Symbol.for("react.suspense"),L=Symbol.for("react.suspense_list"),B=Symbol.for("react.memo"),D=Symbol.for("react.lazy"),F=(Symbol.for("react.offscreen"),Symbol.for("react.client.reference"),M),U=B;function W(e,t,n,r,{areStatesEqual:o,areOwnPropsEqual:a,areStatePropsEqual:i}){let l,u,s,c,f,d=!1;return function(p,h){return d?function(d,p){let h=!a(p,u),m=!o(d,l,p,u);return l=d,u=p,h&&m?(s=e(l,u),t.dependsOnOwnProps&&(c=t(r,u)),f=n(s,c,u),f):h?(e.dependsOnOwnProps&&(s=e(l,u)),t.dependsOnOwnProps&&(c=t(r,u)),f=n(s,c,u),f):m?function(){let t=e(l,u),r=!i(t,s);return s=t,r&&(f=n(s,c,u)),f}():f}(p,h):function(o,a){return l=o,u=a,s=e(l,u),c=t(r,u),f=n(s,c,u),d=!0,f}(p,h)}}function $(e){return function(t){let n=e(t);function r(){return n}return r.dependsOnOwnProps=!1,r}}function q(e){return e.dependsOnOwnProps?!!e.dependsOnOwnProps:1!==e.length}function V(e,t){return function(t,{displayName:n}){let r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e,void 0)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=q(e);let o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=q(o),o=r(t,n)),o},r}}function H(e,t){return(n,r)=>{throw new Error(`Invalid value of type ${typeof e} for ${t} argument when connecting component ${r.wrappedComponentName}.`)}}function Q(e,t,n){return{...n,...e,...t}}function K(e){e()}var G={notify(){},get:()=>[]};function J(e,t){let n,r=G,o=0,a=!1;function i(){s.onStateChange&&s.onStateChange()}function l(){o++,n||(n=t?t.addNestedSub(i):e.subscribe(i),r=function(){let e=null,t=null;return{clear(){e=null,t=null},notify(){K((()=>{let t=e;for(;t;)t.callback(),t=t.next}))},get(){let t=[],n=e;for(;n;)t.push(n),n=n.next;return t},subscribe(n){let r=!0,o=t={callback:n,next:null,prev:t};return o.prev?o.prev.next=o:e=o,function(){!r||null===e||(r=!1,o.next?o.next.prev=o.prev:t=o.prev,o.prev?o.prev.next=o.next:e=o.next)}}}}())}function u(){o--,n&&0===o&&(n(),n=void 0,r.clear(),r=G)}let s={addNestedSub:function(e){l();let t=r.subscribe(e),n=!1;return()=>{n||(n=!0,t(),u())}},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:i,isSubscribed:function(){return a},trySubscribe:function(){a||(a=!0,l())},tryUnsubscribe:function(){a&&(a=!1,u())},getListeners:()=>r};return s}var Y=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u",X=typeof navigator<"u"&&"ReactNative"===navigator.product,Z=Y||X?g.useLayoutEffect:g.useEffect;function ee(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function te(e,t){if(ee(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;let n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(let r=0;r<n.length;r++)if(!Object.prototype.hasOwnProperty.call(t,n[r])||!ee(e[n[r]],t[n[r]]))return!1;return!0}var ne={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},re={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},oe={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},ae={[F]:{$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},[U]:oe};function ie(e){return function(e){return function(e){if("object"==typeof e&&null!==e){let t=e.$$typeof;switch(t){case _:{let n=e.type;switch(n){case P:case T:case N:case I:case L:return n;default:{let e=n&&n.$$typeof;switch(e){case z:case j:case M:case D:case B:case R:return e;default:return t}}}}case O:return t}}}(e)===B}(e)?oe:ae[e.$$typeof]||ne}var le=Object.defineProperty,ue=Object.getOwnPropertyNames,se=Object.getOwnPropertySymbols,ce=Object.getOwnPropertyDescriptor,fe=Object.getPrototypeOf,de=Object.prototype;function pe(e,t){if("string"!=typeof t){if(de){let n=fe(t);n&&n!==de&&pe(e,n)}let n=ue(t);se&&(n=n.concat(se(t)));let r=ie(e),o=ie(t);for(let a=0;a<n.length;++a){let i=n[a];if(!(re[i]||o&&o[i]||r&&r[i])){let n=ce(t,i);try{le(e,i,n)}catch{}}}}return e}var he=w,me=[null,null];function ge(e,t,n,r,o,a){e.current=r,n.current=!1,o.current&&(o.current=null,a())}function ye(e,t){return e===t}var be=function(e,t,n,{pure:r,areStatesEqual:o=ye,areOwnPropsEqual:a=te,areStatePropsEqual:i=te,areMergedPropsEqual:l=te,forwardRef:u=!1,context:s=v}={}){let c=s,f=function(e){return e?"function"==typeof e?V(e):H(e,"mapStateToProps"):$((()=>({})))}(e),d=function(e){return e&&"object"==typeof e?$((t=>function(e,t){let n={};for(let r in e){let o=e[r];"function"==typeof o&&(n[r]=(...e)=>t(o(...e)))}return n}(e,t))):e?"function"==typeof e?V(e):H(e,"mapDispatchToProps"):$((e=>({dispatch:e})))}(t),p=function(e){return e?"function"==typeof e?function(e){return function(t,{displayName:n,areMergedPropsEqual:r}){let o,a=!1;return function(t,n,i){let l=e(t,n,i);return a?r(l,o)||(o=l):(a=!0,o=l),o}}}(e):H(e,"mergeProps"):()=>Q}(n),h=!!e;return e=>{let t=e.displayName||e.name||"Component",n=`Connect(${t})`,r={shouldHandleStateChanges:h,displayName:n,wrappedComponentName:t,WrappedComponent:e,initMapStateToProps:f,initMapDispatchToProps:d,initMergeProps:p,areStatesEqual:o,areStatePropsEqual:i,areOwnPropsEqual:a,areMergedPropsEqual:l};function s(t){let[n,o,a]=g.useMemo((()=>{let{reactReduxForwardedRef:e,...n}=t;return[t.context,e,n]}),[t]),i=g.useMemo((()=>c),[n,c]),l=g.useContext(i),u=!!t.store&&!!t.store.getState&&!!t.store.dispatch,s=!!l&&!!l.store,f=u?t.store:l.store,d=s?l.getServerState:f.getState,p=g.useMemo((()=>function(e,{initMapStateToProps:t,initMapDispatchToProps:n,initMergeProps:r,...o}){return W(t(e,o),n(e,o),r(e,o),e,o)}(f.dispatch,r)),[f]),[m,y]=g.useMemo((()=>{if(!h)return me;let e=J(f,u?void 0:l.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[f,u,l]),b=g.useMemo((()=>u?l:{...l,subscription:m}),[u,l,m]),v=g.useRef(void 0),w=g.useRef(a),A=g.useRef(void 0),C=g.useRef(!1),k=g.useRef(!1),S=g.useRef(void 0);Z((()=>(k.current=!0,()=>{k.current=!1})),[]);let x,E=g.useMemo((()=>()=>A.current&&a===w.current?A.current:p(f.getState(),a)),[f,a]),_=g.useMemo((()=>e=>m?function(e,t,n,r,o,a,i,l,u,s,c){if(!e)return()=>{};let f=!1,d=null,p=()=>{if(f||!l.current)return;let e,n,p=t.getState();try{e=r(p,o.current)}catch(e){n=e,d=e}n||(d=null),e===a.current?i.current||s():(a.current=e,u.current=e,i.current=!0,c())};return n.onStateChange=p,n.trySubscribe(),p(),()=>{if(f=!0,n.tryUnsubscribe(),n.onStateChange=null,d)throw d}}(h,f,m,p,w,v,C,k,A,y,e):()=>{}),[m]);!function(e,t,n){Z((()=>e(...t)),void 0)}(ge,[w,v,C,a,A,y]);try{x=he(_,E,d?()=>p(d(),a):E)}catch(e){throw S.current&&(e.message+=`\nThe error may be correlated with this previous error:\n${S.current.stack}\n\n`),e}Z((()=>{S.current=void 0,A.current=void 0,v.current=x}));let O=g.useMemo((()=>g.createElement(e,{...x,ref:o})),[o,e,x]);return g.useMemo((()=>h?g.createElement(i.Provider,{value:b},O):O),[i,O,b])}let m=g.memo(s);if(m.WrappedComponent=e,m.displayName=s.displayName=n,u){let t=g.forwardRef((function(e,t){return g.createElement(m,{...e,reactReduxForwardedRef:t})}));return t.displayName=n,t.WrappedComponent=e,pe(t,e)}return pe(m,e)}},ve=function({store:e,context:t,children:n,serverState:r,stabilityCheck:o="once",identityFunctionCheck:a="once"}){let i=g.useMemo((()=>{let t=J(e);return{store:e,subscription:t,getServerState:r?()=>r:void 0,stabilityCheck:o,identityFunctionCheck:a}}),[e,r,o,a]),l=g.useMemo((()=>e.getState()),[e]);return Z((()=>{let{subscription:t}=i;return t.onStateChange=t.notifyNestedSubs,t.trySubscribe(),l!==e.getState()&&t.notifyNestedSubs(),()=>{t.tryUnsubscribe(),t.onStateChange=void 0}}),[i,l]),g.createElement((t||v).Provider,{value:i},n)};function we(e=v){let t=e===v?C:A(e),n=()=>{let{store:e}=t();return e};return Object.assign(n,{withTypes:()=>n}),n}var Ae=we();function Ce(e=v){let t=e===v?Ae:we(e),n=()=>t().dispatch;return Object.assign(n,{withTypes:()=>n}),n}var ke=Ce(),Se=K;(e=>{k=e})(h.useSyncExternalStoreWithSelector),(e=>{he=e})(p.useSyncExternalStore)},9069:e=>{var t,n=Object.defineProperty,r=Object.getOwnPropertyDescriptor,o=Object.getOwnPropertyNames,a=Object.prototype.hasOwnProperty,i={};function l(e){return({dispatch:t,getState:n})=>r=>o=>"function"==typeof o?o(t,n,e):r(o)}((e,t)=>{for(var r in t)n(e,r,{get:t[r],enumerable:!0})})(i,{thunk:()=>u,withExtraArgument:()=>s}),e.exports=(t=i,((e,t,i,l)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let i of o(t))a.call(e,i)||undefined===i||n(e,i,{get:()=>t[i],enumerable:!(l=r(t,i))||l.enumerable});return e})(n({},"__esModule",{value:!0}),t));var u=l(),s=l},8895:e=>{var t,n=Object.defineProperty,r=Object.getOwnPropertyDescriptor,o=Object.getOwnPropertyNames,a=Object.prototype.hasOwnProperty,i={};function l(e){return`Minified Redux error #${e}; visit https://redux.js.org/Errors?code=${e} for the full message or use the non-minified dev environment for full errors. `}((e,t)=>{for(var r in t)n(e,r,{get:t[r],enumerable:!0})})(i,{__DO_NOT_USE__ActionTypes:()=>c,applyMiddleware:()=>b,bindActionCreators:()=>g,combineReducers:()=>h,compose:()=>y,createStore:()=>d,isAction:()=>v,isPlainObject:()=>f,legacy_createStore:()=>p}),e.exports=(t=i,((e,t,i,l)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let i of o(t))a.call(e,i)||undefined===i||n(e,i,{get:()=>t[i],enumerable:!(l=r(t,i))||l.enumerable});return e})(n({},"__esModule",{value:!0}),t));var u=(()=>"function"==typeof Symbol&&Symbol.observable||"@@observable")(),s=()=>Math.random().toString(36).substring(7).split("").join("."),c={INIT:`@@redux/INIT${s()}`,REPLACE:`@@redux/REPLACE${s()}`,PROBE_UNKNOWN_ACTION:()=>`@@redux/PROBE_UNKNOWN_ACTION${s()}`};function f(e){if("object"!=typeof e||null===e)return!1;let t=e;for(;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t||null===Object.getPrototypeOf(e)}function d(e,t,n){if("function"!=typeof e)throw new Error(l(2));if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(l(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(l(1));return n(d)(e,t)}let r=e,o=t,a=new Map,i=a,s=0,p=!1;function h(){i===a&&(i=new Map,a.forEach(((e,t)=>{i.set(t,e)})))}function m(){if(p)throw new Error(l(3));return o}function g(e){if("function"!=typeof e)throw new Error(l(4));if(p)throw new Error(l(5));let t=!0;h();const n=s++;return i.set(n,e),function(){if(t){if(p)throw new Error(l(6));t=!1,h(),i.delete(n),a=null}}}function y(e){if(!f(e))throw new Error(l(7));if(void 0===e.type)throw new Error(l(8));if("string"!=typeof e.type)throw new Error(l(17));if(p)throw new Error(l(9));try{p=!0,o=r(o,e)}finally{p=!1}return(a=i).forEach((e=>{e()})),e}return y({type:c.INIT}),{dispatch:y,subscribe:g,getState:m,replaceReducer:function(e){if("function"!=typeof e)throw new Error(l(10));r=e,y({type:c.REPLACE})},[u]:function(){const e=g;return{subscribe(t){if("object"!=typeof t||null===t)throw new Error(l(11));function n(){const e=t;e.next&&e.next(m())}return n(),{unsubscribe:e(n)}},[u](){return this}}}}}function p(e,t,n){return d(e,t,n)}function h(e){const t=Object.keys(e),n={};for(let r=0;r<t.length;r++){const o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}const r=Object.keys(n);let o;try{!function(e){Object.keys(e).forEach((t=>{const n=e[t];if(void 0===n(void 0,{type:c.INIT}))throw new Error(l(12));if(void 0===n(void 0,{type:c.PROBE_UNKNOWN_ACTION()}))throw new Error(l(13))}))}(n)}catch(e){o=e}return function(e={},t){if(o)throw o;let a=!1;const i={};for(let o=0;o<r.length;o++){const u=r[o],s=n[u],c=e[u],f=s(c,t);if(void 0===f)throw t&&t.type,new Error(l(14));i[u]=f,a=a||f!==c}return a=a||r.length!==Object.keys(e).length,a?i:e}}function m(e,t){return function(...n){return t(e.apply(this,n))}}function g(e,t){if("function"==typeof e)return m(e,t);if("object"!=typeof e||null===e)throw new Error(l(16));const n={};for(const r in e){const o=e[r];"function"==typeof o&&(n[r]=m(o,t))}return n}function y(...e){return 0===e.length?e=>e:1===e.length?e[0]:e.reduce(((e,t)=>(...n)=>e(t(...n))))}function b(...e){return t=>(n,r)=>{const o=t(n,r);let a=()=>{throw new Error(l(15))};const i={getState:o.getState,dispatch:(e,...t)=>a(e,...t)},u=e.map((e=>e(i)));return a=y(...u)(o.dispatch),{...o,dispatch:a}}}function v(e){return f(e)&&"type"in e&&"string"==typeof e.type}},2885:e=>{var t,n=Object.defineProperty,r=Object.getOwnPropertyDescriptor,o=Object.getOwnPropertyNames,a=Object.prototype.hasOwnProperty,i={};((e,t)=>{for(var r in t)n(e,r,{get:t[r],enumerable:!0})})(i,{createSelector:()=>W,createSelectorCreator:()=>U,createStructuredSelector:()=>$,lruMemoize:()=>z,referenceEqualityCheck:()=>R,setGlobalDevModeChecks:()=>u,unstable_autotrackMemoize:()=>M,weakMapMemoize:()=>F}),e.exports=(t=i,((e,t,i,l)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let i of o(t))a.call(e,i)||undefined===i||n(e,i,{get:()=>t[i],enumerable:!(l=r(t,i))||l.enumerable});return e})(n({},"__esModule",{value:!0}),t));var l={inputStabilityCheck:"once",identityFunctionCheck:"once"},u=e=>{Object.assign(l,e)},s=Symbol("NOT_FOUND");function c(e,t="expected a function, instead received "+typeof e){if("function"!=typeof e)throw new TypeError(t)}var f=e=>Array.isArray(e)?e:[e];var d=0,p=null,h=class{revision=d;_value;_lastValue;_isEqual=m;constructor(e,t=m){this._value=this._lastValue=e,this._isEqual=t}get value(){return p?.add(this),this._value}set value(e){this.value!==e&&(this._value=e,this.revision=++d)}};function m(e,t){return e===t}var g=class{_cachedValue;_cachedRevision=-1;_deps=[];hits=0;fn;constructor(e){this.fn=e}clear(){this._cachedValue=void 0,this._cachedRevision=-1,this._deps=[],this.hits=0}get value(){if(this.revision>this._cachedRevision){const{fn:e}=this,t=new Set,n=p;p=t,this._cachedValue=e(),p=n,this.hits++,this._deps=Array.from(t),this._cachedRevision=this.revision}return p?.add(this),this._cachedValue}get revision(){return Math.max(...this._deps.map((e=>e.revision)),0)}};function y(e){return e instanceof h||console.warn("Not a valid cell! ",e),e.value}var b=(e,t)=>!1;function v(){return function(e,t=m){return new h(null,t)}(0,b)}function w(e,t){!function(e,t){if(!(e instanceof h))throw new TypeError("setValue must be passed a tracked store created with `createStorage`.");e.value=e._lastValue=t}(e,t)}var A=e=>{let t=e.collectionTag;null===t&&(t=e.collectionTag=v()),y(t)},C=e=>{const t=e.collectionTag;null!==t&&w(t,null)},k=(Symbol(),0),S=Object.getPrototypeOf({}),x=class{constructor(e){this.value=e,this.value=e,this.tag.value=e}proxy=new Proxy(this,E);tag=v();tags={};children={};collectionTag=null;id=k++},E={get:(e,t)=>function(){const{value:n}=e,r=Reflect.get(n,t);if("symbol"==typeof t)return r;if(t in S)return r;if("object"==typeof r&&null!==r){let n=e.children[t];return void 0===n&&(n=e.children[t]=P(r)),n.tag&&y(n.tag),n.proxy}{let n=e.tags[t];return void 0===n&&(n=e.tags[t]=v(),n.value=r),y(n),r}}(),ownKeys:e=>(A(e),Reflect.ownKeys(e.value)),getOwnPropertyDescriptor:(e,t)=>Reflect.getOwnPropertyDescriptor(e.value,t),has:(e,t)=>Reflect.has(e.value,t)},_=class{constructor(e){this.value=e,this.value=e,this.tag.value=e}proxy=new Proxy([this],O);tag=v();tags={};children={};collectionTag=null;id=k++},O={get:([e],t)=>("length"===t&&A(e),E.get(e,t)),ownKeys:([e])=>E.ownKeys(e),getOwnPropertyDescriptor:([e],t)=>E.getOwnPropertyDescriptor(e,t),has:([e],t)=>E.has(e,t)};function P(e){return Array.isArray(e)?new _(e):new x(e)}function N(e,t){const{value:n,tags:r,children:o}=e;if(e.value=t,Array.isArray(n)&&Array.isArray(t)&&n.length!==t.length)C(e);else if(n!==t){let r=0,o=0,a=!1;for(const e in n)r++;for(const e in t)if(o++,!(e in n)){a=!0;break}(a||r!==o)&&C(e)}for(const o in r){const a=n[o],i=t[o];a!==i&&(C(e),w(r[o],i)),"object"==typeof i&&null!==i&&delete r[o]}for(const e in o){const n=o[e],r=t[e];n.value!==r&&("object"==typeof r&&null!==r?N(n,r):(T(n),delete o[e]))}}function T(e){e.tag&&w(e.tag,null),C(e);for(const t in e.tags)w(e.tags[t],null);for(const t in e.children)T(e.children[t])}var R=(e,t)=>e===t;function j(e){return function(t,n){if(null===t||null===n||t.length!==n.length)return!1;const{length:r}=t;for(let o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}}function z(e,t){const n="object"==typeof t?t:{equalityCheck:t},{equalityCheck:r=R,maxSize:o=1,resultEqualityCheck:a}=n,i=j(r);let l=0;const u=o<=1?function(e){let t;return{get:n=>t&&e(t.key,n)?t.value:s,put(e,n){t={key:e,value:n}},getEntries:()=>t?[t]:[],clear(){t=void 0}}}(i):function(e,t){let n=[];function r(e){const r=n.findIndex((n=>t(e,n.key)));if(r>-1){const e=n[r];return r>0&&(n.splice(r,1),n.unshift(e)),e.value}return s}return{get:r,put:function(t,o){r(t)===s&&(n.unshift({key:t,value:o}),n.length>e&&n.pop())},getEntries:function(){return n},clear:function(){n=[]}}}(o,i);function c(){let t=u.get(arguments);if(t===s){if(t=e.apply(null,arguments),l++,a){const e=u.getEntries().find((e=>a(e.value,t)));e&&(t=e.value,0!==l&&l--)}u.put(arguments,t)}return t}return c.clearCache=()=>{u.clear(),c.resetResultsCount()},c.resultsCount=()=>l,c.resetResultsCount=()=>{l=0},c}function M(e){const t=P([]);let n=null;const r=j(R),o=(c(a=()=>e.apply(null,t.proxy),"the first parameter to `createCache` must be a function"),new g(a));var a;function i(){return r(n,arguments)||(N(t,arguments),n=arguments),o.value}return i.clearCache=()=>o.clear(),i}var I="undefined"!=typeof WeakRef?WeakRef:class{constructor(e){this.value=e}deref(){return this.value}},L=0,B=1;function D(){return{s:L,v:void 0,o:null,p:null}}function F(e,t={}){let n=D();const{resultEqualityCheck:r}=t;let o,a=0;function i(){let t=n;const{length:i}=arguments;for(let e=0,n=i;e<n;e++){const n=arguments[e];if("function"==typeof n||"object"==typeof n&&null!==n){let e=t.o;null===e&&(t.o=e=new WeakMap);const r=e.get(n);void 0===r?(t=D(),e.set(n,t)):t=r}else{let e=t.p;null===e&&(t.p=e=new Map);const r=e.get(n);void 0===r?(t=D(),e.set(n,t)):t=r}}const l=t;let u;if(t.s===B)u=t.v;else if(u=e.apply(null,arguments),a++,r){const e=o?.deref?.()??o;null!=e&&r(e,u)&&(u=e,0!==a&&a--),o="object"==typeof u&&null!==u||"function"==typeof u?new I(u):u}return l.s=B,l.v=u,u}return i.clearCache=()=>{n=D(),i.resetResultsCount()},i.resultsCount=()=>a,i.resetResultsCount=()=>{a=0},i}function U(e,...t){const n="function"==typeof e?{memoize:e,memoizeOptions:t}:e,r=(...e)=>{let t,r=0,o=0,a={},i=e.pop();"object"==typeof i&&(a=i,i=e.pop()),c(i,`createSelector expects an output function after the inputs, but received: [${typeof i}]`);const l={...n,...a},{memoize:u,memoizeOptions:s=[],argsMemoize:d=F,argsMemoizeOptions:p=[],devModeChecks:h={}}=l,m=f(s),g=f(p),y=function(e){const t=Array.isArray(e[0])?e[0]:e;return function(e,t="expected all items to be functions, instead received the following types: "){if(!e.every((e=>"function"==typeof e))){const n=e.map((e=>"function"==typeof e?`function ${e.name||"unnamed"}()`:typeof e)).join(", ");throw new TypeError(`${t}[${n}]`)}}(t,"createSelector expects all input-selectors to be functions, but received the following types: "),t}(e),b=u((function(){return r++,i.apply(null,arguments)}),...m),v=d((function(){o++;const e=function(e,t){const n=[],{length:r}=e;for(let o=0;o<r;o++)n.push(e[o].apply(null,t));return n}(y,arguments);return t=b.apply(null,e),t}),...g);return Object.assign(v,{resultFunc:i,memoizedResultFunc:b,dependencies:y,dependencyRecomputations:()=>o,resetDependencyRecomputations:()=>{o=0},lastResult:()=>t,recomputations:()=>r,resetRecomputations:()=>{r=0},memoize:u,argsMemoize:d})};return Object.assign(r,{withTypes:()=>r}),r}var W=U(F),$=Object.assign(((e,t=W)=>{!function(e,t="expected an object, instead received "+typeof e){if("object"!=typeof e)throw new TypeError(t)}(e,"createStructuredSelector expects first argument to be an object where each property is a selector, instead received a "+typeof e);const n=Object.keys(e);return t(n.map((t=>e[t])),((...e)=>e.reduce(((e,t,r)=>(e[n[r]]=t,e)),{})))}),{withTypes:()=>$})}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=r[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,n(3900)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEtBQU8wL0UsSUFBYyxhQUFhMytFLEtBQUsyK0UsS0FBYUEsRUFBWUUsRUFBUTUvRSxLQUFLNG9DLEdBRTNGLENBSUQsSUFBSzgyQyxFQUFXLE1BQU0sSUFBSTk1RSxNQUFNLHlEQUNoQzg1RSxFQUFZQSxFQUFVditFLFFBQVEsT0FBUSxJQUFJQSxRQUFRLFFBQVMsSUFBSUEsUUFBUSxZQUFhLEtBQ3BGaStFLEVBQW9CcDJFLEVBQUkwMkUsTUNsQnhCTixFQUFvQjEyRSxFQUFJc0UsU0FBUzh5RSxTQUFXbnZCLEtBQUtwcEMsU0FBUzZELEtDQTFEZzBELEVBQW9CVyxRQUFLei9FLEVDR0M4K0UsRUFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy8uL25vZGVfbW9kdWxlcy9AcmVkdXhqcy90b29sa2l0L2Rpc3QvY2pzL2luZGV4LmpzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vc3JjL2FwcC5zY3NzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vc3JjL2NvbXBvbmVudHMvYm9vay1jYXJkL2Jvb2stY2FyZC5zY3NzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vc3JjL2NvbXBvbmVudHMvYm9vay1saXN0L2Jvb2tzLWxpc3Quc2NzcyIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy8uL3NyYy9jb21wb25lbnRzL2Jvb2stcGFnZS9ib29rLXBhZ2Uuc2NzcyIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy8uL3NyYy9jb21wb25lbnRzL2hlYWRlci9oZWFkZXIuc2NzcyIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy8uL3NyYy9jb21wb25lbnRzL2xvYWRpbmctcGFnZS9sb2FkaW5nLXBhZ2Uuc2NzcyIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9janMvaW1tZXIuY2pzLnByb2R1Y3Rpb24uanMiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZGlzdC9janMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy8uL3NyYy9hcHAuc2Nzcz85ODg0Iiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vc3JjL2NvbXBvbmVudHMvYm9vay1jYXJkL2Jvb2stY2FyZC5zY3NzPzY4MTkiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9zcmMvY29tcG9uZW50cy9ib29rLWxpc3QvYm9va3MtbGlzdC5zY3NzPzg5ZGIiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9zcmMvY29tcG9uZW50cy9ib29rLXBhZ2UvYm9vay1wYWdlLnNjc3M/NTQ1YyIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy8uL3NyYy9jb21wb25lbnRzL2hlYWRlci9oZWFkZXIuc2Nzcz9jZDc5Iiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vc3JjL2NvbXBvbmVudHMvbG9hZGluZy1wYWdlL2xvYWRpbmctcGFnZS5zY3NzPzNiMmQiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy8uL2NvbmZpZy50cyIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy8uL3NyYy9hcHAudHN4Iiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vc3JjL2NvbXBvbmVudHMvYm9vay1jYXJkL2Jvb2stY2FyZC50c3giLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9zcmMvY29tcG9uZW50cy9ib29rLWxpc3QvYm9va3MtbGlzdC50c3giLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9zcmMvY29tcG9uZW50cy9ib29rLXBhZ2UvYm9vay1wYWdlLnRzeCIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy8uL3NyYy9jb21wb25lbnRzL2hlYWRlci9oZWFkZXIudHN4Iiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vc3JjL2NvbXBvbmVudHMvbG9hZGluZy1wYWdlL2xvYWRpbmctcGFnZS50c3giLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vc3JjL3N0b3JlL3Jvb3RSZWR1Y2VyLnRzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vc3JjL3N0b3JlL3NsaWNlcy9jdXJyZW50Qm9va1NsaWNlLnRzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vc3JjL3N0b3JlL3NsaWNlcy9mb3VuZFNsaWNlLnRzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vc3JjL3N0b3JlL3NsaWNlcy9wYWdlU2xpY2UudHMiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9zcmMvc3RvcmUvc3RvcmUudHMiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9zcmMvdXRpbHMvdXJsR2VuZXJhdG9yLnRzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS13aXRoLXNlbGVjdG9yLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3dpdGgtc2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L2Nqcy9yZWR1eC10b29sa2l0LnByb2R1Y3Rpb24ubWluLmNqcyIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy8uL25vZGVfbW9kdWxlcy9heGlvcy9kaXN0L2Jyb3dzZXIvYXhpb3MuY2pzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2Rpc3QvY2pzL3JlYWN0LXJlZHV4LnByb2R1Y3Rpb24ubWluLmNqcyIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9kaXN0L2Nqcy9yZWR1eC10aHVuay5janMiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvLi9ub2RlX21vZHVsZXMvcmVkdXgvZGlzdC9janMvcmVkdXguY2pzIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzLy4vbm9kZV9tb2R1bGVzL3Jlc2VsZWN0L2Rpc3QvY2pzL3Jlc2VsZWN0LmNqcyIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9ib29rLXNlYXJjaC13cC10cy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYm9vay1zZWFyY2gtd3AtdHMvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL2Jvb2stc2VhcmNoLXdwLXRzL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWR1eC10b29sa2l0LnByb2R1Y3Rpb24ubWluLmNqcycpXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVkdXgtdG9vbGtpdC5kZXZlbG9wbWVudC5janMnKVxufSIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAqe2JvcmRlcjpub25lO21hcmdpbjowO3BhZGRpbmc6MH1ib2R5e2ZvbnQtZmFtaWx5OlwiTHVjaWRhIFNhbnNcIixcIkx1Y2lkYSBTYW5zIFJlZ3VsYXJcIixcIkx1Y2lkYSBHcmFuZGVcIixcIkx1Y2lkYSBTYW5zIFVuaWNvZGVcIixHZW5ldmEsVmVyZGFuYSxzYW5zLXNlcmlmfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2FwcC5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLEVBQ0ksV0FBQSxDQUNBLFFBQUEsQ0FDQSxTQUFBLENBR0osS0FDSSwrR0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqe1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG59XFxyXFxuXFxyXFxuYm9keXtcXHJcXG4gICAgZm9udC1mYW1pbHk6J0x1Y2lkYSBTYW5zJywgJ0x1Y2lkYSBTYW5zIFJlZ3VsYXInLCAnTHVjaWRhIEdyYW5kZScsICdMdWNpZGEgU2FucyBVbmljb2RlJywgR2VuZXZhLCBWZXJkYW5hLCBzYW5zLXNlcmlmO1xcclxcblxcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5ib29rQ2FyZENvbnRhaW5lcnt3aWR0aDoyNjBweDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOjE1cHg7YmFja2dyb3VuZDojZjBmMGYwfS5ib29rQ2FyZENvbnRhaW5lciAuaW1nQ29udGFpbmVye3BhZGRpbmc6MzBweDt3aWR0aDoxNDBweH0uYm9va0NhcmRDb250YWluZXIgLmltZ0NvbnRhaW5lciBpbWd7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtib3gtc2hhZG93OjEwcHggMTBweCAxMHB4IHJnYmEoMCwwLDAsLjI1KTtjdXJzb3I6cG9pbnRlcn0uYm9va0NhcmRDb250YWluZXIgLmluZm9Db250YWluZXJ7d2lkdGg6MTAwJX0uYm9va0NhcmRDb250YWluZXIgLmluZm9Db250YWluZXIgLmNhdGVnb3J5e2ZvbnQtc2l6ZToxNHB4O2NvbG9yOiM0MjQyNDI7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTttYXJnaW4tYm90dG9tOjEwcHh9LmJvb2tDYXJkQ29udGFpbmVyIC5pbmZvQ29udGFpbmVyIC5ib29rTmFtZXtmb250LXNpemU6MTVweDttYXJnaW4tYm90dG9tOjVweDtjdXJzb3I6cG9pbnRlcn0uYm9va0NhcmRDb250YWluZXIgLmluZm9Db250YWluZXIgLmF1dGhvck5hbWV7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6bm9ybWFsO2NvbG9yOiM0MjQyNDI7bWFyZ2luLWJvdHRvbToyMHB4fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDUwMHB4KXsuYm9va0NhcmRDb250YWluZXJ7d2lkdGg6MjIwcHh9LmJvb2tDYXJkQ29udGFpbmVyIC5pbWdDb250YWluZXJ7cGFkZGluZzoyMHB4O3dpZHRoOjEyMHB4fS5ib29rQ2FyZENvbnRhaW5lciAuaW5mb0NvbnRhaW5lciAuY2F0ZWdvcnl7Zm9udC1zaXplOjEycHg7Y29sb3I6IzQyNDI0Mjt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO21hcmdpbi1ib3R0b206MTBweH0uYm9va0NhcmRDb250YWluZXIgLmluZm9Db250YWluZXIgLmJvb2tOYW1le2ZvbnQtc2l6ZToxM3B4O21hcmdpbi1ib3R0b206NXB4fS5ib29rQ2FyZENvbnRhaW5lciAuaW5mb0NvbnRhaW5lciAuYXV0aG9yTmFtZXtmb250LXNpemU6MTJweDtmb250LXdlaWdodDpub3JtYWw7Y29sb3I6IzQyNDI0MjttYXJnaW4tYm90dG9tOjIwcHh9fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvYm9vay1jYXJkL2Jvb2stY2FyZC5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLG1CQUNJLFdBQUEsQ0FDQSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxrQkFBQSxDQUNBLFlBQUEsQ0FDQSxrQkFBQSxDQUVBLGlDQUNJLFlBQUEsQ0FDQSxXQUFBLENBRUEscUNBQ0ksV0FBQSxDQUNBLFVBQUEsQ0FDQSx5Q0FBQSxDQUNBLGNBQUEsQ0FLUixrQ0FDSSxVQUFBLENBRUEsNENBQ0ksY0FBQSxDQUNBLGFBQUEsQ0FDQSx5QkFBQSxDQUNBLGtCQUFBLENBR0osNENBQ0ksY0FBQSxDQUNBLGlCQUFBLENBQ0EsY0FBQSxDQUdKLDhDQUNJLGNBQUEsQ0FDQSxrQkFBQSxDQUNBLGFBQUEsQ0FDQSxrQkFBQSxDQUdSLHFDQTVDSixtQkE2Q1EsV0FBQSxDQUVBLGlDQUNJLFlBQUEsQ0FDQSxXQUFBLENBT0EsNENBQ0ksY0FBQSxDQUNBLGFBQUEsQ0FDQSx5QkFBQSxDQUNBLGtCQUFBLENBSUosNENBQ0ksY0FBQSxDQUNBLGlCQUFBLENBR0osOENBQ0ksY0FBQSxDQUNBLGtCQUFBLENBQ0EsYUFBQSxDQUNBLGtCQUFBLENBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmJvb2tDYXJkQ29udGFpbmVye1xcclxcbiAgICB3aWR0aDogMjYwcHg7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIHBhZGRpbmc6IDE1cHg7XFxyXFxuICAgIGJhY2tncm91bmQ6IHJnYigyNDAsIDI0MCwgMjQwKTtcXHJcXG5cXHJcXG4gICAgLmltZ0NvbnRhaW5lcntcXHJcXG4gICAgICAgIHBhZGRpbmc6IDMwcHg7XFxyXFxuICAgICAgICB3aWR0aDogMTQwcHg7XFxyXFxuICAgICAgICBcXHJcXG4gICAgICAgIGltZ3tcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICAgICAgYm94LXNoYWRvdzogMTBweCAxMHB4IDEwcHggIHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxyXFxuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5pbmZvQ29udGFpbmVye1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuXFxyXFxuICAgICAgICAuY2F0ZWdvcnl7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xcclxcbiAgICAgICAgICAgIGNvbG9yOiByZ2IoNjYsIDY2LCA2Nik7XFxyXFxuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxyXFxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5ib29rTmFtZXtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDE1cHg7XFxyXFxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNXB4O1xcclxcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5hdXRob3JOYW1le1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xcclxcbiAgICAgICAgICAgIGNvbG9yOiByZ2IoNjYsIDY2LCA2Nik7XFxyXFxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1MDBweCkge1xcclxcbiAgICAgICAgd2lkdGg6IDIyMHB4O1xcclxcblxcclxcbiAgICAgICAgLmltZ0NvbnRhaW5lcntcXHJcXG4gICAgICAgICAgICBwYWRkaW5nOiAyMHB4O1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAxMjBweDtcXHJcXG5cXHJcXG4gICAgXFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAuaW5mb0NvbnRhaW5lcntcXHJcXG5cXHJcXG4gICAgICAgICAgICAuY2F0ZWdvcnl7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gICAgICAgICAgICAgICAgY29sb3I6IHJnYig2NiwgNjYsIDY2KTtcXHJcXG4gICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxyXFxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxyXFxuXFxyXFxuICAgICAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgICAgIC5ib29rTmFtZXtcXHJcXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxM3B4O1xcclxcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA1cHg7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIFxcclxcbiAgICAgICAgICAgIC5hdXRob3JOYW1le1xcclxcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEycHg7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICAgICAgICAgICAgICAgIGNvbG9yOiByZ2IoNjYsIDY2LCA2Nik7XFxyXFxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLmJvb2tzQ291bnR7dGV4dC1hbGlnbjpjZW50ZXI7bWFyZ2luLXRvcDoyMHB4O21hcmdpbi1ib3R0b206MzBweH0uYm9va2xpc3RDb250YWluZXJ7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2p1c3RpZnktY29udGVudDpjZW50ZXI7bWF4LXdpZHRoOjE0MDBweDttYXJnaW46YXV0bztnYXA6NTBweH0ubW9yZUJ1dHRvbkNvbnRhaW5lcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjtwYWRkaW5nOjMwcHggMCAzMHB4IDB9Lm1vcmVCdXR0b25Db250YWluZXIgLm1vcmVCdXR0b257cGFkZGluZzoxNXB4IDI1cHg7Ym9yZGVyLXJhZGl1czo1cHg7Zm9udC1zaXplOjE1cHg7YmFja2dyb3VuZDojZjBmMGYwfS5tb3JlQnV0dG9uQ29udGFpbmVyIC5tb3JlQnV0dG9uOmhvdmVye2JhY2tncm91bmQ6I2Q0ZDRkNH1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL2Jvb2stbGlzdC9ib29rcy1saXN0LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsWUFDSSxpQkFBQSxDQUNBLGVBQUEsQ0FDQSxrQkFBQSxDQUdKLG1CQUNJLFlBQUEsQ0FDQSxjQUFBLENBQ0Esc0JBQUEsQ0FDQSxnQkFBQSxDQUNBLFdBQUEsQ0FDQSxRQUFBLENBR0oscUJBQ0ksWUFBQSxDQUNBLHNCQUFBLENBQ0EscUJBQUEsQ0FFQSxpQ0FDSSxpQkFBQSxDQUNBLGlCQUFBLENBQ0EsY0FBQSxDQUNBLGtCQUFBLENBSUosdUNBQ0ksa0JBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmJvb2tzQ291bnR7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgbWFyZ2luLXRvcDogMjBweDtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmJvb2tsaXN0Q29udGFpbmVyIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgbWF4LXdpZHRoOiAxNDAwcHg7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgZ2FwOiA1MHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubW9yZUJ1dHRvbkNvbnRhaW5lcntcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIHBhZGRpbmc6IDMwcHggMCAzMHB4IDA7XFxyXFxuXFxyXFxuICAgIC5tb3JlQnV0dG9ue1xcclxcbiAgICAgICAgcGFkZGluZzogMTVweCAyNXB4O1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xcclxcbiAgICAgICAgZm9udC1zaXplOiAxNXB4O1xcclxcbiAgICAgICAgYmFja2dyb3VuZDogcmdiKDI0MCwgMjQwLCAyNDApO1xcclxcblxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5tb3JlQnV0dG9uOmhvdmVye1xcclxcbiAgICAgICAgYmFja2dyb3VuZDogcmdiKDIxMiwgMjEyLCAyMTIpO1xcclxcbiAgICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLmJvb2tQYWdlQ29udGFpbmVye2Rpc3BsYXk6ZmxleH0uYm9va1BhZ2VDb250YWluZXIgLmJvb2tGYWNle3dpZHRoOjQ1JTtwYWRkaW5nOjYwcHggMDtiYWNrZ3JvdW5kOiNlN2U3ZTc7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmJvb2tQYWdlQ29udGFpbmVyIC5ib29rRmFjZSBpbWd7d2lkdGg6NjAlO2JveC1zaGFkb3c6MjBweCAyMHB4IDEwcHggcmdiYSgwLDAsMCwuMjUpfS5ib29rUGFnZUNvbnRhaW5lciAuYm9va2luZm97d2lkdGg6NTUlO3BhZGRpbmc6NTBweCAyMHB4fS5ib29rUGFnZUNvbnRhaW5lciAuYm9va2luZm8gLmJvb2tNYXB7bWFyZ2luLWJvdHRvbTo0MHB4O2ZvbnQtc2l6ZToxOHB4O2N1cnNvcjpwb2ludGVyO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmV9LmJvb2tQYWdlQ29udGFpbmVyIC5ib29raW5mbyAuYm9va05hbWV7bWFyZ2luLWJvdHRvbToxMHB4fS5ib29rUGFnZUNvbnRhaW5lciAuYm9va2luZm8gLmF1dGhvck5hbWV7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTtjb2xvcjojNDI0MjQyO2ZvbnQtc2l6ZToxOHB4O2ZvbnQtd2VpZ2h0Om5vcm1hbDttYXJnaW4tYm90dG9tOjEwcHh9LmJvb2tQYWdlQ29udGFpbmVyIC5ib29raW5mbyAuZGVzY3JpcHRpb25Db250YWluZXJ7Ym9yZGVyOjFweCBzb2xpZCAjYzZjNmM2O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjIwcHg7bWluLWhlaWdodDoyMDBweH1AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxODAwcHgpey5ib29rUGFnZUNvbnRhaW5lciAuYm9va0ZhY2UgaW1ne3dpZHRoOjUwJX19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogODAwcHgpey5ib29rUGFnZUNvbnRhaW5lcntkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveH0uYm9va1BhZ2VDb250YWluZXIgLmJvb2tGYWNle3dpZHRoOmF1dG99LmJvb2tQYWdlQ29udGFpbmVyIC5ib29rRmFjZSBpbWd7d2lkdGg6NjAlfS5ib29rUGFnZUNvbnRhaW5lciAuYm9va2luZm97d2lkdGg6YXV0b30uYm9va1BhZ2VDb250YWluZXIgLmJvb2tpbmZvIC5ib29rTWFwe21hcmdpbi1ib3R0b206NDBweDtmb250LXNpemU6MTZweH0uYm9va1BhZ2VDb250YWluZXIgLmJvb2tpbmZvIC5ib29rTmFtZXtmb250LXNpemU6MjBweH0uYm9va1BhZ2VDb250YWluZXIgLmJvb2tpbmZvIC5hdXRob3JOYW1le2ZvbnQtc2l6ZToxNnB4fS5ib29rUGFnZUNvbnRhaW5lciAuYm9va2luZm8gLmRlc2NyaXB0aW9uQ29udGFpbmVyIC5kZXNjcmlwdGlvbntmb250LXNpemU6MTZweH19YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9ib29rLXBhZ2UvYm9vay1wYWdlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsbUJBQ0ksWUFBQSxDQUVBLDZCQUNJLFNBQUEsQ0FDQSxjQUFBLENBQ0Esa0JBQUEsQ0FDQSxZQUFBLENBQ0Esc0JBQUEsQ0FFQSxpQ0FDSSxTQUFBLENBQ0EseUNBQUEsQ0FJUiw2QkFDSSxTQUFBLENBQ0EsaUJBQUEsQ0FFQSxzQ0FDSSxrQkFBQSxDQUNBLGNBQUEsQ0FDQSxjQUFBLENBQ0EseUJBQUEsQ0FHSix1Q0FDSSxrQkFBQSxDQUdKLHlDQUNJLHlCQUFBLENBQ0EsYUFBQSxDQUNBLGNBQUEsQ0FDQSxrQkFBQSxDQUNBLGtCQUFBLENBR0osbURBQ0ksd0JBQUEsQ0FDQSxxQkFBQSxDQUNBLFlBQUEsQ0FDQSxnQkFBQSxDQVFaLHNDQUtZLGlDQUNJLFNBQUEsQ0FBQSxDQU1oQixxQ0FDSSxtQkFDSSxhQUFBLENBQ0EscUJBQUEsQ0FFQSw2QkFDSSxVQUFBLENBRUEsaUNBQ0ksU0FBQSxDQUlSLDZCQUNJLFVBQUEsQ0FFQSxzQ0FDSSxrQkFBQSxDQUNBLGNBQUEsQ0FHSix1Q0FDSSxjQUFBLENBR0oseUNBQ0ksY0FBQSxDQUtBLGdFQUNJLGNBQUEsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuYm9va1BhZ2VDb250YWluZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBcXHJcXG4gICAgLmJvb2tGYWNlIHtcXHJcXG4gICAgICAgIHdpZHRoOiA0NSU7XFxyXFxuICAgICAgICBwYWRkaW5nOiA2MHB4IDA7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kOiByZ2IoMjMxLCAyMzEsIDIzMSk7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuXFxyXFxuICAgICAgICBpbWcge1xcclxcbiAgICAgICAgICAgIHdpZHRoOiA2MCU7XFxyXFxuICAgICAgICAgICAgYm94LXNoYWRvdzogMjBweCAyMHB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjI1KTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuYm9va2luZm8ge1xcclxcbiAgICAgICAgd2lkdGg6IDU1JTtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDUwcHggMjBweDtcXHJcXG5cXHJcXG4gICAgICAgIC5ib29rTWFwe1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4O1xcclxcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIFxcclxcbiAgICAgICAgLmJvb2tOYW1le1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAuYXV0aG9yTmFtZXtcXHJcXG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXHJcXG4gICAgICAgICAgICBjb2xvcjogcmdiKDY2LCA2NiwgNjYpO1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG4gICAgICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAuZGVzY3JpcHRpb25Db250YWluZXJ7XFxyXFxuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmdiKDE5OCwgMTk4LCAxOTgpO1xcclxcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogMjBweDtcXHJcXG4gICAgICAgICAgICBtaW4taGVpZ2h0OiAyMDBweDtcXHJcXG4gICAgICAgICAgICAuZGVzY3JpcHRpb257XFxyXFxuXFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE4MDBweCkge1xcclxcbiAgICAuYm9va1BhZ2VDb250YWluZXIge1xcclxcblxcclxcbiAgICAgICAgLmJvb2tGYWNlIHtcXHJcXG5cXHJcXG4gICAgICAgICAgICBpbWcge1xcclxcbiAgICAgICAgICAgICAgICB3aWR0aDogNTAlO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA4MDBweCkge1xcclxcbiAgICAuYm9va1BhZ2VDb250YWluZXIge1xcclxcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcblxcclxcbiAgICAgICAgLmJvb2tGYWNlIHtcXHJcXG4gICAgICAgICAgICB3aWR0aDogYXV0bztcXHJcXG5cXHJcXG4gICAgICAgICAgICBpbWcge1xcclxcbiAgICAgICAgICAgICAgICB3aWR0aDogNjAlO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5ib29raW5mbyB7XFxyXFxuICAgICAgICAgICAgd2lkdGg6IGF1dG87XFxyXFxuXFxyXFxuICAgICAgICAgICAgLmJvb2tNYXB7XFxyXFxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAgICAgLmJvb2tOYW1le1xcclxcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XFxyXFxuICAgICAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgICAgIC5hdXRob3JOYW1le1xcclxcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIFxcclxcbiAgICAgICAgICAgIC5kZXNjcmlwdGlvbkNvbnRhaW5lcntcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgLmRlc2NyaXB0aW9ue1xcclxcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiLi4vLi4vLi4vcHVibGljL2ltZy9IZWFkZXJCYWNrZ3JvdW5kLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLmhlYWRlcntiYWNrZ3JvdW5kLWltYWdlOnVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX199KTt3aWR0aDoxMDAlO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlcjtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9LmhlYWRlciAuY29udGVudHttYXgtd2lkdGg6MTgwMHB4O3BhZGRpbmctdG9wOjQwcHg7cGFkZGluZy1ib3R0b206NDBweDtmbGV4LWdyb3c6MTtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5oZWFkZXIgLmNvbnRlbnQgLmhlYWRlckgxe21hcmdpbjphdXRvO2NvbG9yOiNmZmY7bWFyZ2luLWJvdHRvbTo0MHB4O2ZvbnQtc2l6ZTo1MHB4O3RleHQtYWxpZ246Y2VudGVyfS5oZWFkZXIgLmNvbnRlbnQgLmZpbHRlcnttYXJnaW46YXV0bzt3aWR0aDoxMDAlfS5oZWFkZXIgLmNvbnRlbnQgLmZpbHRlciAuc2VhcmNoQmFyQ29udGFpbmVye3BhZGRpbmc6MCAyMHB4IDAgMjBweDttYXJnaW4tYm90dG9tOjIwcHg7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmhlYWRlciAuY29udGVudCAuZmlsdGVyIC5zZWFyY2hCYXJDb250YWluZXIgaW5wdXR7aGVpZ2h0OjQwcHg7d2lkdGg6MTAwJTttaW4td2lkdGg6MTMwcHg7bWF4LXdpZHRoOjcwMHB4O3BhZGRpbmctbGVmdDoyMHB4O3BhZGRpbmctcmlnaHQ6MjBweDtmb250LXNpemU6MjBweDtmbGV4LWdyb3c6MX0uaGVhZGVyIC5jb250ZW50IC5maWx0ZXIgLnNlYXJjaEJhckNvbnRhaW5lciBidXR0b257aGVpZ2h0OjQwcHg7d2lkdGg6NDBweDtiYWNrZ3JvdW5kOiNmZmY7dmVydGljYWwtYWxpZ246bWlkZGxlfS5oZWFkZXIgLmNvbnRlbnQgLmZpbHRlciAuc2VhcmNoQmFyQ29udGFpbmVyIGJ1dHRvbiBpbWd7d2lkdGg6NDBweDtoZWlnaHQ6NDBweDtwYWRkaW5nOjdweDtib3gtc2l6aW5nOmJvcmRlci1ib3h9LmhlYWRlciAuY29udGVudCAuZmlsdGVyIC5zZWFyY2hCYXJDb250YWluZXIgYnV0dG9uIGltZzpob3ZlcntwYWRkaW5nOjZweH0uaGVhZGVyIC5jb250ZW50IC5maWx0ZXIgLnNlbGVjdHNDb250YWluZXJ7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7ZmxleC13cmFwOndyYXB9LmhlYWRlciAuY29udGVudCAuZmlsdGVyIC5zZWxlY3RzQ29udGFpbmVyIC5zZWxlY3RJdGVte2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2ZsZXgtd3JhcDp3cmFwO21hcmdpbjowIDIwcHggMjBweCAyMHB4O2FsaWduLWl0ZW1zOmNlbnRlcn0uaGVhZGVyIC5jb250ZW50IC5maWx0ZXIgLnNlbGVjdHNDb250YWluZXIgLnNlbGVjdEl0ZW0gcHtmb250LXNpemU6MjVweDtjb2xvcjojZmZmO21hcmdpbi1yaWdodDoxMHB4O3dpZHRoOjEzMHB4fS5oZWFkZXIgLmNvbnRlbnQgLmZpbHRlciAuc2VsZWN0c0NvbnRhaW5lciAuc2VsZWN0SXRlbSBzZWxlY3R7Ym94LXNpemluZzpjb250ZW50LWJveDtoZWlnaHQ6MzBweDt3aWR0aDoyMDBweDttaW4taGVpZ2h0OjMwcHg7cGFkZGluZzo1cHggMTBweCA1cHggMTBweDtmb250LXNpemU6MjBweDtjb2xvcjojNDI0MjQyfWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvaGVhZGVyL2hlYWRlci5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLFFBQ0ksd0RBQUEsQ0FDQSxVQUFBLENBQ0EscUJBQUEsQ0FDQSwwQkFBQSxDQUNBLFlBQUEsQ0FDQSxzQkFBQSxDQUNBLGtCQUFBLENBRUEsaUJBQ0ksZ0JBQUEsQ0FDQSxnQkFBQSxDQUNBLG1CQUFBLENBQ0EsV0FBQSxDQUNBLFlBQUEsQ0FDQSxxQkFBQSxDQUVBLDJCQUNJLFdBQUEsQ0FDQSxVQUFBLENBQ0Esa0JBQUEsQ0FDQSxjQUFBLENBQ0EsaUJBQUEsQ0FHSix5QkFDSSxXQUFBLENBQ0EsVUFBQSxDQUVBLDZDQUNJLHFCQUFBLENBQ0Esa0JBQUEsQ0FDQSxZQUFBLENBQ0Esc0JBQUEsQ0FFQSxtREFDSSxXQUFBLENBQ0EsVUFBQSxDQUNBLGVBQUEsQ0FDQSxlQUFBLENBQ0EsaUJBQUEsQ0FDQSxrQkFBQSxDQUNBLGNBQUEsQ0FDQSxXQUFBLENBR0osb0RBQ0ksV0FBQSxDQUNBLFVBQUEsQ0FDQSxlQUFBLENBQ0EscUJBQUEsQ0FFQSx3REFFSSxVQUFBLENBQ0EsV0FBQSxDQUNBLFdBQUEsQ0FDQSxxQkFBQSxDQUdKLDhEQUNJLFdBQUEsQ0FLWiwyQ0FDSSxZQUFBLENBQ0Esc0JBQUEsQ0FDQSxjQUFBLENBRUEsdURBQ0ksWUFBQSxDQUNBLHNCQUFBLENBQ0EsY0FBQSxDQUNBLHVCQUFBLENBQ0Esa0JBQUEsQ0FFQSx5REFDSSxjQUFBLENBQ0EsVUFBQSxDQUNBLGlCQUFBLENBQ0EsV0FBQSxDQUdKLDhEQUNJLHNCQUFBLENBQ0EsV0FBQSxDQUNBLFdBQUEsQ0FDQSxlQUFBLENBQ0EseUJBQUEsQ0FDQSxjQUFBLENBQ0EsYUFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuaGVhZGVye1xcclxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcIi4uLy4uLy4uL3B1YmxpYy9pbWcvSGVhZGVyQmFja2dyb3VuZC5wbmdcXFwiKTtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxyXFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuXFxyXFxuICAgIC5jb250ZW50e1xcclxcbiAgICAgICAgbWF4LXdpZHRoOiAxODAwcHg7XFxyXFxuICAgICAgICBwYWRkaW5nLXRvcDogNDBweDtcXHJcXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiA0MHB4O1xcclxcbiAgICAgICAgZmxleC1ncm93OiAxO1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgICAgICBcXHJcXG4gICAgICAgIC5oZWFkZXJIMXtcXHJcXG4gICAgICAgICAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiA1MHB4O1xcclxcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5maWx0ZXJ7XFxyXFxuICAgICAgICAgICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xcclxcblxcclxcbiAgICAgICAgICAgIC5zZWFyY2hCYXJDb250YWluZXJ7XFxyXFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAgMjBweCAwIDIwcHg7XFxyXFxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxyXFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgICAgICAgICBcXHJcXG4gICAgICAgICAgICAgICAgaW5wdXR7XFxyXFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDQwcHg7XFxyXFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIG1pbi13aWR0aDogMTMwcHg7XFxyXFxuICAgICAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDcwMHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAyMHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMjBweDtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGZsZXgtZ3JvdzogMTtcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgICAgICAgICBidXR0b257XFxyXFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDQwcHg7XFxyXFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogNDBweDtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xcclxcbiAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246bWlkZGxlO1xcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgaW1ne1xcclxcblxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0MHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNDBweDtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA3cHg7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgICAgICAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgIGltZzpob3ZlcntcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA2cHg7XFxyXFxuICAgICAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAgICAgLnNlbGVjdHNDb250YWluZXJ7XFxyXFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgIC5zZWxlY3RJdGVte1xcclxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwIDIwcHggMjBweCAyMHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgIHB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyNXB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEzMHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICAgICAgXFxyXFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3R7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogY29udGVudC1ib3g7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAyMDBweDtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW4taGVpZ2h0OiAzMHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4IDVweCAxMHB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcmdiKDY2LCA2NiwgNjYpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuICAgIFxcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4uLy4uLy4uL3B1YmxpYy9pbWcvbG9hZGluZy5naWZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5tYWluRm9yTG9hZGluZ3tkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5tYWluRm9yTG9hZGluZyAubG9kaW5nSW1nQ29udGFpbmVye2JhY2tncm91bmQtaW1hZ2U6dXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlcjttYXJnaW46MzBweDt3aWR0aDoyMDBweDtoZWlnaHQ6MTgwcHh9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9sb2FkaW5nLXBhZ2UvbG9hZGluZy1wYWdlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsZ0JBQ0ksWUFBQSxDQUNBLHNCQUFBLENBQ0Esa0JBQUEsQ0FDQSxxQkFBQSxDQUVBLG9DQUNJLHdEQUFBLENBQ0EscUJBQUEsQ0FDQSwwQkFBQSxDQUNBLFdBQUEsQ0FDQSxXQUFBLENBQ0EsWUFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubWFpbkZvckxvYWRpbmd7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcblxcclxcbiAgICAubG9kaW5nSW1nQ29udGFpbmVye1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCIuLi8uLi8uLi9wdWJsaWMvaW1nL2xvYWRpbmcuZ2lmXFxcIik7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xcclxcbiAgICAgICAgbWFyZ2luOiAzMHB4O1xcclxcbiAgICAgICAgd2lkdGg6IDIwMHB4O1xcclxcbiAgICAgICAgaGVpZ2h0OiAxODBweDtcXHJcXG4gICAgfVxcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpO1xuXG4gIC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9XG5cbiAgLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjt2YXIgbmU9T2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciBnZT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3ZhciBiZT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lczt2YXIgVGU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTt2YXIgQWU9KGUsdCk9Pntmb3IodmFyIHIgaW4gdCluZShlLHIse2dldDp0W3JdLGVudW1lcmFibGU6ITB9KX0sSWU9KGUsdCxyLG4pPT57aWYodCYmdHlwZW9mIHQ9PVwib2JqZWN0XCJ8fHR5cGVvZiB0PT1cImZ1bmN0aW9uXCIpZm9yKGxldCBpIG9mIGJlKHQpKSFUZS5jYWxsKGUsaSkmJmkhPT1yJiZuZShlLGkse2dldDooKT0+dFtpXSxlbnVtZXJhYmxlOiEobj1nZSh0LGkpKXx8bi5lbnVtZXJhYmxlfSk7cmV0dXJuIGV9O3ZhciBEZT1lPT5JZShuZSh7fSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlKTt2YXIgQmU9e307QWUoQmUse0ltbWVyOigpPT5KLGFwcGx5UGF0Y2hlczooKT0+Q2UsY2FzdERyYWZ0OigpPT5rZSxjYXN0SW1tdXRhYmxlOigpPT5LZSxjcmVhdGVEcmFmdDooKT0+UmUsY3VycmVudDooKT0+cmUsZW5hYmxlTWFwU2V0OigpPT54ZSxlbmFibGVQYXRjaGVzOigpPT5QZSxmaW5pc2hEcmFmdDooKT0+dmUsZnJlZXplOigpPT5LLGltbWVyYWJsZTooKT0+Tixpc0RyYWZ0OigpPT5PLGlzRHJhZnRhYmxlOigpPT5BLG5vdGhpbmc6KCk9Pmosb3JpZ2luYWw6KCk9PmxlLHByb2R1Y2U6KCk9PkZlLHByb2R1Y2VXaXRoUGF0Y2hlczooKT0+TmUsc2V0QXV0b0ZyZWV6ZTooKT0+emUsc2V0VXNlU3RyaWN0U2hhbGxvd0NvcHk6KCk9PmplfSk7bW9kdWxlLmV4cG9ydHM9RGUoQmUpO3ZhciBqPVN5bWJvbC5mb3IoXCJpbW1lci1ub3RoaW5nXCIpLE49U3ltYm9sLmZvcihcImltbWVyLWRyYWZ0YWJsZVwiKSx1PVN5bWJvbC5mb3IoXCJpbW1lci1zdGF0ZVwiKTtmdW5jdGlvbiBoKGUsLi4udCl7dGhyb3cgbmV3IEVycm9yKGBbSW1tZXJdIG1pbmlmaWVkIGVycm9yIG5yOiAke2V9LiBGdWxsIGVycm9yIGF0OiBodHRwczovL2JpdC5seS8zY1hFS1dmYCl9dmFyIHo9T2JqZWN0LmdldFByb3RvdHlwZU9mO2Z1bmN0aW9uIE8oZSl7cmV0dXJuISFlJiYhIWVbdV19ZnVuY3Rpb24gQShlKXtyZXR1cm4gZT95ZShlKXx8QXJyYXkuaXNBcnJheShlKXx8ISFlW05dfHwhIWUuY29uc3RydWN0b3I/LltOXXx8dihlKXx8ayhlKTohMX12YXIgT2U9T2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci50b1N0cmluZygpO2Z1bmN0aW9uIHllKGUpe2lmKCFlfHx0eXBlb2YgZSE9XCJvYmplY3RcIilyZXR1cm4hMTtsZXQgdD16KGUpO2lmKHQ9PT1udWxsKXJldHVybiEwO2xldCByPU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsXCJjb25zdHJ1Y3RvclwiKSYmdC5jb25zdHJ1Y3RvcjtyZXR1cm4gcj09PU9iamVjdD8hMDp0eXBlb2Ygcj09XCJmdW5jdGlvblwiJiZGdW5jdGlvbi50b1N0cmluZy5jYWxsKHIpPT09T2V9ZnVuY3Rpb24gbGUoZSl7cmV0dXJuIE8oZSl8fGgoMTUsZSksZVt1XS50fWZ1bmN0aW9uIF8oZSx0KXtDKGUpPT09MD9SZWZsZWN0Lm93bktleXMoZSkuZm9yRWFjaChyPT57dChyLGVbcl0sZSl9KTplLmZvckVhY2goKHIsbik9PnQobixyLGUpKX1mdW5jdGlvbiBDKGUpe2xldCB0PWVbdV07cmV0dXJuIHQ/dC5vOkFycmF5LmlzQXJyYXkoZSk/MTp2KGUpPzI6ayhlKT8zOjB9ZnVuY3Rpb24gUihlLHQpe3JldHVybiBDKGUpPT09Mj9lLmhhcyh0KTpPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX1mdW5jdGlvbiBYKGUsdCl7cmV0dXJuIEMoZSk9PT0yP2UuZ2V0KHQpOmVbdF19ZnVuY3Rpb24gUShlLHQscil7bGV0IG49QyhlKTtuPT09Mj9lLnNldCh0LHIpOm49PT0zP2UuYWRkKHIpOmVbdF09cn1mdW5jdGlvbiBwZShlLHQpe3JldHVybiBlPT09dD9lIT09MHx8MS9lPT09MS90OmUhPT1lJiZ0IT09dH1mdW5jdGlvbiB2KGUpe3JldHVybiBlIGluc3RhbmNlb2YgTWFwfWZ1bmN0aW9uIGsoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBTZXR9ZnVuY3Rpb24gVChlKXtyZXR1cm4gZS5lfHxlLnR9ZnVuY3Rpb24gTChlLHQpe2lmKHYoZSkpcmV0dXJuIG5ldyBNYXAoZSk7aWYoayhlKSlyZXR1cm4gbmV3IFNldChlKTtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlKTtsZXQgcj15ZShlKTtpZih0PT09ITB8fHQ9PT1cImNsYXNzX29ubHlcIiYmIXIpe2xldCBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKGUpO2RlbGV0ZSBuW3VdO2xldCBpPVJlZmxlY3Qub3duS2V5cyhuKTtmb3IobGV0IGY9MDtmPGkubGVuZ3RoO2YrKyl7bGV0IGw9aVtmXSxjPW5bbF07Yy53cml0YWJsZT09PSExJiYoYy53cml0YWJsZT0hMCxjLmNvbmZpZ3VyYWJsZT0hMCksKGMuZ2V0fHxjLnNldCkmJihuW2xdPXtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsZW51bWVyYWJsZTpjLmVudW1lcmFibGUsdmFsdWU6ZVtsXX0pfXJldHVybiBPYmplY3QuY3JlYXRlKHooZSksbil9ZWxzZXtsZXQgbj16KGUpO2lmKG4hPT1udWxsJiZyKXJldHVybnsuLi5lfTtsZXQgaT1PYmplY3QuY3JlYXRlKG4pO3JldHVybiBPYmplY3QuYXNzaWduKGksZSl9fWZ1bmN0aW9uIEsoZSx0PSExKXtyZXR1cm4gJChlKXx8TyhlKXx8IUEoZSl8fChDKGUpPjEmJihlLnNldD1lLmFkZD1lLmNsZWFyPWUuZGVsZXRlPU1lKSxPYmplY3QuZnJlZXplKGUpLHQmJk9iamVjdC5lbnRyaWVzKGUpLmZvckVhY2goKFtyLG5dKT0+SyhuLCEwKSkpLGV9ZnVuY3Rpb24gTWUoKXtoKDIpfWZ1bmN0aW9uICQoZSl7cmV0dXJuIE9iamVjdC5pc0Zyb3plbihlKX12YXIgYWU9e307ZnVuY3Rpb24gdyhlKXtsZXQgdD1hZVtlXTtyZXR1cm4gdHx8aCgwLGUpLHR9ZnVuY3Rpb24gWShlLHQpe2FlW2VdfHwoYWVbZV09dCl9dmFyIFU7ZnVuY3Rpb24gQigpe3JldHVybiBVfWZ1bmN0aW9uIF9lKGUsdCl7cmV0dXJue2E6W10saTplLHA6dCxQOiEwLGQ6MH19ZnVuY3Rpb24gb2UoZSx0KXt0JiYodyhcIlBhdGNoZXNcIiksZS5mPVtdLGUuaD1bXSxlLmI9dCl9ZnVuY3Rpb24gVihlKXtaKGUpLGUuYS5mb3JFYWNoKHdlKSxlLmE9bnVsbH1mdW5jdGlvbiBaKGUpe2U9PT1VJiYoVT1lLmkpfWZ1bmN0aW9uIGllKGUpe3JldHVybiBVPV9lKFUsZSl9ZnVuY3Rpb24gd2UoZSl7bGV0IHQ9ZVt1XTt0Lm89PT0wfHx0Lm89PT0xP3QueCgpOnQubT0hMH1mdW5jdGlvbiBzZShlLHQpe3QuZD10LmEubGVuZ3RoO2xldCByPXQuYVswXTtyZXR1cm4gZSE9PXZvaWQgMCYmZSE9PXI/KHJbdV0ucyYmKFYodCksaCg0KSksQShlKSYmKGU9ZWUodCxlKSx0Lml8fHRlKHQsZSkpLHQuZiYmdyhcIlBhdGNoZXNcIikuVChyW3VdLnQsZSx0LmYsdC5oKSk6ZT1lZSh0LHIsW10pLFYodCksdC5mJiZ0LmIodC5mLHQuaCksZSE9PWo/ZTp2b2lkIDB9ZnVuY3Rpb24gZWUoZSx0LHIpe2lmKCQodCkpcmV0dXJuIHQ7bGV0IG49dFt1XTtpZighbilyZXR1cm4gXyh0LChpLGYpPT5kZShlLG4sdCxpLGYscikpLHQ7aWYobi5uIT09ZSlyZXR1cm4gdDtpZighbi5zKXJldHVybiB0ZShlLG4udCwhMCksbi50O2lmKCFuLmMpe24uYz0hMCxuLm4uZC0tO2xldCBpPW4uZSxmPWksbD0hMTtuLm89PT0zJiYoZj1uZXcgU2V0KGkpLGkuY2xlYXIoKSxsPSEwKSxfKGYsKGMsYik9PmRlKGUsbixpLGMsYixyLGwpKSx0ZShlLGksITEpLHImJmUuZiYmdyhcIlBhdGNoZXNcIikuZyhuLHIsZS5mLGUuaCl9cmV0dXJuIG4uZX1mdW5jdGlvbiBkZShlLHQscixuLGksZixsKXtpZihPKGkpKXtsZXQgYz1mJiZ0JiZ0Lm8hPT0zJiYhUih0LnIsbik/Zi5jb25jYXQobik6dm9pZCAwLGI9ZWUoZSxpLGMpO2lmKFEocixuLGIpLE8oYikpZS5QPSExO2Vsc2UgcmV0dXJufWVsc2UgbCYmci5hZGQoaSk7aWYoQShpKSYmISQoaSkpe2lmKCFlLnAueSYmZS5kPDEpcmV0dXJuO2VlKGUsaSksKCF0fHwhdC5uLmkpJiZ0eXBlb2YgbiE9XCJzeW1ib2xcIiYmT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHIsbikmJnRlKGUsaSl9fWZ1bmN0aW9uIHRlKGUsdCxyPSExKXshZS5pJiZlLnAueSYmZS5QJiZLKHQscil9ZnVuY3Rpb24gaGUoZSx0KXtsZXQgcj1BcnJheS5pc0FycmF5KGUpLG49e286cj8xOjAsbjp0P3QubjpCKCksczohMSxjOiExLHI6e30saTp0LHQ6ZSx1Om51bGwsZTpudWxsLHg6bnVsbCxsOiExfSxpPW4sZj11ZTtyJiYoaT1bbl0sZj1xKTtsZXR7cmV2b2tlOmwscHJveHk6Y309UHJveHkucmV2b2NhYmxlKGksZik7cmV0dXJuIG4udT1jLG4ueD1sLGN9dmFyIHVlPXtnZXQoZSx0KXtpZih0PT09dSlyZXR1cm4gZTtsZXQgcj1UKGUpO2lmKCFSKHIsdCkpcmV0dXJuIEVlKGUscix0KTtsZXQgbj1yW3RdO3JldHVybiBlLmN8fCFBKG4pP246bj09PWNlKGUudCx0KT8oZmUoZSksZS5lW3RdPVcobixlKSk6bn0saGFzKGUsdCl7cmV0dXJuIHQgaW4gVChlKX0sb3duS2V5cyhlKXtyZXR1cm4gUmVmbGVjdC5vd25LZXlzKFQoZSkpfSxzZXQoZSx0LHIpe2xldCBuPW1lKFQoZSksdCk7aWYobj8uc2V0KXJldHVybiBuLnNldC5jYWxsKGUudSxyKSwhMDtpZighZS5zKXtsZXQgaT1jZShUKGUpLHQpLGY9aT8uW3VdO2lmKGYmJmYudD09PXIpcmV0dXJuIGUuZVt0XT1yLGUuclt0XT0hMSwhMDtpZihwZShyLGkpJiYociE9PXZvaWQgMHx8UihlLnQsdCkpKXJldHVybiEwO2ZlKGUpLEUoZSl9cmV0dXJuIGUuZVt0XT09PXImJihyIT09dm9pZCAwfHx0IGluIGUuZSl8fE51bWJlci5pc05hTihyKSYmTnVtYmVyLmlzTmFOKGUuZVt0XSl8fChlLmVbdF09cixlLnJbdF09ITApLCEwfSxkZWxldGVQcm9wZXJ0eShlLHQpe3JldHVybiBjZShlLnQsdCkhPT12b2lkIDB8fHQgaW4gZS50PyhlLnJbdF09ITEsZmUoZSksRShlKSk6ZGVsZXRlIGUuclt0XSxlLmUmJmRlbGV0ZSBlLmVbdF0sITB9LGdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpe2xldCByPVQoZSksbj1SZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLHQpO3JldHVybiBuJiZ7d3JpdGFibGU6ITAsY29uZmlndXJhYmxlOmUubyE9PTF8fHQhPT1cImxlbmd0aFwiLGVudW1lcmFibGU6bi5lbnVtZXJhYmxlLHZhbHVlOnJbdF19fSxkZWZpbmVQcm9wZXJ0eSgpe2goMTEpfSxnZXRQcm90b3R5cGVPZihlKXtyZXR1cm4geihlLnQpfSxzZXRQcm90b3R5cGVPZigpe2goMTIpfX0scT17fTtfKHVlLChlLHQpPT57cVtlXT1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF09YXJndW1lbnRzWzBdWzBdLHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0pO3EuZGVsZXRlUHJvcGVydHk9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcS5zZXQuY2FsbCh0aGlzLGUsdCx2b2lkIDApfTtxLnNldD1mdW5jdGlvbihlLHQscil7cmV0dXJuIHVlLnNldC5jYWxsKHRoaXMsZVswXSx0LHIsZVswXSl9O2Z1bmN0aW9uIGNlKGUsdCl7bGV0IHI9ZVt1XTtyZXR1cm4ocj9UKHIpOmUpW3RdfWZ1bmN0aW9uIEVlKGUsdCxyKXtsZXQgbj1tZSh0LHIpO3JldHVybiBuP1widmFsdWVcImluIG4/bi52YWx1ZTpuLmdldD8uY2FsbChlLnUpOnZvaWQgMH1mdW5jdGlvbiBtZShlLHQpe2lmKCEodCBpbiBlKSlyZXR1cm47bGV0IHI9eihlKTtmb3IoO3I7KXtsZXQgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsdCk7aWYobilyZXR1cm4gbjtyPXoocil9fWZ1bmN0aW9uIEUoZSl7ZS5zfHwoZS5zPSEwLGUuaSYmRShlLmkpKX1mdW5jdGlvbiBmZShlKXtlLmV8fChlLmU9TChlLnQsZS5uLnAuUykpfXZhciBKPWNsYXNze2NvbnN0cnVjdG9yKHQpe3RoaXMueT0hMDt0aGlzLlM9ITE7dGhpcy5wcm9kdWNlPSh0LHIsbik9PntpZih0eXBlb2YgdD09XCJmdW5jdGlvblwiJiZ0eXBlb2YgciE9XCJmdW5jdGlvblwiKXtsZXQgZj1yO3I9dDtsZXQgbD10aGlzO3JldHVybiBmdW5jdGlvbihiPWYsLi4uYSl7cmV0dXJuIGwucHJvZHVjZShiLG89PnIuY2FsbCh0aGlzLG8sLi4uYSkpfX10eXBlb2YgciE9XCJmdW5jdGlvblwiJiZoKDYpLG4hPT12b2lkIDAmJnR5cGVvZiBuIT1cImZ1bmN0aW9uXCImJmgoNyk7bGV0IGk7aWYoQSh0KSl7bGV0IGY9aWUodGhpcyksbD1XKHQsdm9pZCAwKSxjPSEwO3RyeXtpPXIobCksYz0hMX1maW5hbGx5e2M/VihmKTpaKGYpfXJldHVybiBvZShmLG4pLHNlKGksZil9ZWxzZSBpZighdHx8dHlwZW9mIHQhPVwib2JqZWN0XCIpe2lmKGk9cih0KSxpPT09dm9pZCAwJiYoaT10KSxpPT09aiYmKGk9dm9pZCAwKSx0aGlzLnkmJksoaSwhMCksbil7bGV0IGY9W10sbD1bXTt3KFwiUGF0Y2hlc1wiKS5UKHQsaSxmLGwpLG4oZixsKX1yZXR1cm4gaX1lbHNlIGgoMSx0KX07dGhpcy5wcm9kdWNlV2l0aFBhdGNoZXM9KHQscik9PntpZih0eXBlb2YgdD09XCJmdW5jdGlvblwiKXJldHVybihsLC4uLmMpPT50aGlzLnByb2R1Y2VXaXRoUGF0Y2hlcyhsLGI9PnQoYiwuLi5jKSk7bGV0IG4saTtyZXR1cm5bdGhpcy5wcm9kdWNlKHQsciwobCxjKT0+e249bCxpPWN9KSxuLGldfTt0eXBlb2YgdD8uYXV0b0ZyZWV6ZT09XCJib29sZWFuXCImJnRoaXMuc2V0QXV0b0ZyZWV6ZSh0LmF1dG9GcmVlemUpLHR5cGVvZiB0Py51c2VTdHJpY3RTaGFsbG93Q29weT09XCJib29sZWFuXCImJnRoaXMuc2V0VXNlU3RyaWN0U2hhbGxvd0NvcHkodC51c2VTdHJpY3RTaGFsbG93Q29weSl9Y3JlYXRlRHJhZnQodCl7QSh0KXx8aCg4KSxPKHQpJiYodD1yZSh0KSk7bGV0IHI9aWUodGhpcyksbj1XKHQsdm9pZCAwKTtyZXR1cm4gblt1XS5sPSEwLFoociksbn1maW5pc2hEcmFmdCh0LHIpe2xldCBuPXQmJnRbdV07KCFufHwhbi5sKSYmaCg5KTtsZXR7bjppfT1uO3JldHVybiBvZShpLHIpLHNlKHZvaWQgMCxpKX1zZXRBdXRvRnJlZXplKHQpe3RoaXMueT10fXNldFVzZVN0cmljdFNoYWxsb3dDb3B5KHQpe3RoaXMuUz10fWFwcGx5UGF0Y2hlcyh0LHIpe2xldCBuO2ZvcihuPXIubGVuZ3RoLTE7bj49MDtuLS0pe2xldCBmPXJbbl07aWYoZi5wYXRoLmxlbmd0aD09PTAmJmYub3A9PT1cInJlcGxhY2VcIil7dD1mLnZhbHVlO2JyZWFrfX1uPi0xJiYocj1yLnNsaWNlKG4rMSkpO2xldCBpPXcoXCJQYXRjaGVzXCIpLkE7cmV0dXJuIE8odCk/aSh0LHIpOnRoaXMucHJvZHVjZSh0LGY9PmkoZixyKSl9fTtmdW5jdGlvbiBXKGUsdCl7bGV0IHI9dihlKT93KFwiTWFwU2V0XCIpLkkoZSx0KTprKGUpP3coXCJNYXBTZXRcIikuRChlLHQpOmhlKGUsdCk7cmV0dXJuKHQ/dC5uOkIoKSkuYS5wdXNoKHIpLHJ9ZnVuY3Rpb24gcmUoZSl7cmV0dXJuIE8oZSl8fGgoMTAsZSksU2UoZSl9ZnVuY3Rpb24gU2UoZSl7aWYoIUEoZSl8fCQoZSkpcmV0dXJuIGU7bGV0IHQ9ZVt1XSxyO2lmKHQpe2lmKCF0LnMpcmV0dXJuIHQudDt0LmM9ITAscj1MKGUsdC5uLnAuUyl9ZWxzZSByPUwoZSwhMCk7cmV0dXJuIF8ociwobixpKT0+e1EocixuLFNlKGkpKX0pLHQmJih0LmM9ITEpLHJ9ZnVuY3Rpb24gUGUoKXtsZXQgdD1cInJlcGxhY2VcIixyPVwiYWRkXCIsbj1cInJlbW92ZVwiO2Z1bmN0aW9uIGkocyxTLG0seCl7c3dpdGNoKHMubyl7Y2FzZSAwOmNhc2UgMjpyZXR1cm4gbChzLFMsbSx4KTtjYXNlIDE6cmV0dXJuIGYocyxTLG0seCk7Y2FzZSAzOnJldHVybiBjKHMsUyxtLHgpfX1mdW5jdGlvbiBmKHMsUyxtLHgpe2xldHt0OkkscjpQfT1zLGc9cy5lO2cubGVuZ3RoPEkubGVuZ3RoJiYoW0ksZ109W2csSV0sW20seF09W3gsbV0pO2ZvcihsZXQgeT0wO3k8SS5sZW5ndGg7eSsrKWlmKFBbeV0mJmdbeV0hPT1JW3ldKXtsZXQgZD1TLmNvbmNhdChbeV0pO20ucHVzaCh7b3A6dCxwYXRoOmQsdmFsdWU6cChnW3ldKX0pLHgucHVzaCh7b3A6dCxwYXRoOmQsdmFsdWU6cChJW3ldKX0pfWZvcihsZXQgeT1JLmxlbmd0aDt5PGcubGVuZ3RoO3krKyl7bGV0IGQ9Uy5jb25jYXQoW3ldKTttLnB1c2goe29wOnIscGF0aDpkLHZhbHVlOnAoZ1t5XSl9KX1mb3IobGV0IHk9Zy5sZW5ndGgtMTtJLmxlbmd0aDw9eTstLXkpe2xldCBkPVMuY29uY2F0KFt5XSk7eC5wdXNoKHtvcDpuLHBhdGg6ZH0pfX1mdW5jdGlvbiBsKHMsUyxtLHgpe2xldHt0OkksZTpQfT1zO18ocy5yLChnLHkpPT57bGV0IGQ9WChJLGcpLEg9WChQLGcpLEY9eT9SKEksZyk/dDpyOm47aWYoZD09PUgmJkY9PT10KXJldHVybjtsZXQgRD1TLmNvbmNhdChnKTttLnB1c2goRj09PW4/e29wOkYscGF0aDpEfTp7b3A6RixwYXRoOkQsdmFsdWU6SH0pLHgucHVzaChGPT09cj97b3A6bixwYXRoOkR9OkY9PT1uP3tvcDpyLHBhdGg6RCx2YWx1ZTpwKGQpfTp7b3A6dCxwYXRoOkQsdmFsdWU6cChkKX0pfSl9ZnVuY3Rpb24gYyhzLFMsbSx4KXtsZXR7dDpJLGU6UH09cyxnPTA7SS5mb3JFYWNoKHk9PntpZighUC5oYXMoeSkpe2xldCBkPVMuY29uY2F0KFtnXSk7bS5wdXNoKHtvcDpuLHBhdGg6ZCx2YWx1ZTp5fSkseC51bnNoaWZ0KHtvcDpyLHBhdGg6ZCx2YWx1ZTp5fSl9ZysrfSksZz0wLFAuZm9yRWFjaCh5PT57aWYoIUkuaGFzKHkpKXtsZXQgZD1TLmNvbmNhdChbZ10pO20ucHVzaCh7b3A6cixwYXRoOmQsdmFsdWU6eX0pLHgudW5zaGlmdCh7b3A6bixwYXRoOmQsdmFsdWU6eX0pfWcrK30pfWZ1bmN0aW9uIGIocyxTLG0seCl7bS5wdXNoKHtvcDp0LHBhdGg6W10sdmFsdWU6Uz09PWo/dm9pZCAwOlN9KSx4LnB1c2goe29wOnQscGF0aDpbXSx2YWx1ZTpzfSl9ZnVuY3Rpb24gYShzLFMpe3JldHVybiBTLmZvckVhY2gobT0+e2xldHtwYXRoOngsb3A6SX09bSxQPXM7Zm9yKGxldCBIPTA7SDx4Lmxlbmd0aC0xO0grKyl7bGV0IEY9QyhQKSxEPXhbSF07dHlwZW9mIEQhPVwic3RyaW5nXCImJnR5cGVvZiBEIT1cIm51bWJlclwiJiYoRD1cIlwiK0QpLChGPT09MHx8Rj09PTEpJiYoRD09PVwiX19wcm90b19fXCJ8fEQ9PT1cImNvbnN0cnVjdG9yXCIpJiZoKDE2KzMpLHR5cGVvZiBQPT1cImZ1bmN0aW9uXCImJkQ9PT1cInByb3RvdHlwZVwiJiZoKDE2KzMpLFA9WChQLEQpLHR5cGVvZiBQIT1cIm9iamVjdFwiJiZoKDE2KzIseC5qb2luKFwiL1wiKSl9bGV0IGc9QyhQKSx5PW8obS52YWx1ZSksZD14W3gubGVuZ3RoLTFdO3N3aXRjaChJKXtjYXNlIHQ6c3dpdGNoKGcpe2Nhc2UgMjpyZXR1cm4gUC5zZXQoZCx5KTtjYXNlIDM6aCgxNik7ZGVmYXVsdDpyZXR1cm4gUFtkXT15fWNhc2Ugcjpzd2l0Y2goZyl7Y2FzZSAxOnJldHVybiBkPT09XCItXCI/UC5wdXNoKHkpOlAuc3BsaWNlKGQsMCx5KTtjYXNlIDI6cmV0dXJuIFAuc2V0KGQseSk7Y2FzZSAzOnJldHVybiBQLmFkZCh5KTtkZWZhdWx0OnJldHVybiBQW2RdPXl9Y2FzZSBuOnN3aXRjaChnKXtjYXNlIDE6cmV0dXJuIFAuc3BsaWNlKGQsMSk7Y2FzZSAyOnJldHVybiBQLmRlbGV0ZShkKTtjYXNlIDM6cmV0dXJuIFAuZGVsZXRlKG0udmFsdWUpO2RlZmF1bHQ6cmV0dXJuIGRlbGV0ZSBQW2RdfWRlZmF1bHQ6aCgxNisxLEkpfX0pLHN9ZnVuY3Rpb24gbyhzKXtpZighQShzKSlyZXR1cm4gcztpZihBcnJheS5pc0FycmF5KHMpKXJldHVybiBzLm1hcChvKTtpZih2KHMpKXJldHVybiBuZXcgTWFwKEFycmF5LmZyb20ocy5lbnRyaWVzKCkpLm1hcCgoW20seF0pPT5bbSxvKHgpXSkpO2lmKGsocykpcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbShzKS5tYXAobykpO2xldCBTPU9iamVjdC5jcmVhdGUoeihzKSk7Zm9yKGxldCBtIGluIHMpU1ttXT1vKHNbbV0pO3JldHVybiBSKHMsTikmJihTW05dPXNbTl0pLFN9ZnVuY3Rpb24gcChzKXtyZXR1cm4gTyhzKT9vKHMpOnN9WShcIlBhdGNoZXNcIix7QTphLGc6aSxUOmJ9KX1mdW5jdGlvbiB4ZSgpe2NsYXNzIGUgZXh0ZW5kcyBNYXB7Y29uc3RydWN0b3IoYSxvKXtzdXBlcigpO3RoaXNbdV09e286MixpOm8sbjpvP28ubjpCKCksczohMSxjOiExLGU6dm9pZCAwLHI6dm9pZCAwLHQ6YSx1OnRoaXMsbDohMSxtOiExfX1nZXQgc2l6ZSgpe3JldHVybiBUKHRoaXNbdV0pLnNpemV9aGFzKGEpe3JldHVybiBUKHRoaXNbdV0pLmhhcyhhKX1zZXQoYSxvKXtsZXQgcD10aGlzW3VdO3JldHVybiBsKHApLCghVChwKS5oYXMoYSl8fFQocCkuZ2V0KGEpIT09bykmJihyKHApLEUocCkscC5yLnNldChhLCEwKSxwLmUuc2V0KGEsbykscC5yLnNldChhLCEwKSksdGhpc31kZWxldGUoYSl7aWYoIXRoaXMuaGFzKGEpKXJldHVybiExO2xldCBvPXRoaXNbdV07cmV0dXJuIGwobykscihvKSxFKG8pLG8udC5oYXMoYSk/by5yLnNldChhLCExKTpvLnIuZGVsZXRlKGEpLG8uZS5kZWxldGUoYSksITB9Y2xlYXIoKXtsZXQgYT10aGlzW3VdO2woYSksVChhKS5zaXplJiYocihhKSxFKGEpLGEucj1uZXcgTWFwLF8oYS50LG89PnthLnIuc2V0KG8sITEpfSksYS5lLmNsZWFyKCkpfWZvckVhY2goYSxvKXtsZXQgcD10aGlzW3VdO1QocCkuZm9yRWFjaCgocyxTLG0pPT57YS5jYWxsKG8sdGhpcy5nZXQoUyksUyx0aGlzKX0pfWdldChhKXtsZXQgbz10aGlzW3VdO2wobyk7bGV0IHA9VChvKS5nZXQoYSk7aWYoby5jfHwhQShwKXx8cCE9PW8udC5nZXQoYSkpcmV0dXJuIHA7bGV0IHM9VyhwLG8pO3JldHVybiByKG8pLG8uZS5zZXQoYSxzKSxzfWtleXMoKXtyZXR1cm4gVCh0aGlzW3VdKS5rZXlzKCl9dmFsdWVzKCl7bGV0IGE9dGhpcy5rZXlzKCk7cmV0dXJue1tTeW1ib2wuaXRlcmF0b3JdOigpPT50aGlzLnZhbHVlcygpLG5leHQ6KCk9PntsZXQgbz1hLm5leHQoKTtyZXR1cm4gby5kb25lP286e2RvbmU6ITEsdmFsdWU6dGhpcy5nZXQoby52YWx1ZSl9fX19ZW50cmllcygpe2xldCBhPXRoaXMua2V5cygpO3JldHVybntbU3ltYm9sLml0ZXJhdG9yXTooKT0+dGhpcy5lbnRyaWVzKCksbmV4dDooKT0+e2xldCBvPWEubmV4dCgpO2lmKG8uZG9uZSlyZXR1cm4gbztsZXQgcD10aGlzLmdldChvLnZhbHVlKTtyZXR1cm57ZG9uZTohMSx2YWx1ZTpbby52YWx1ZSxwXX19fX1bKHUsU3ltYm9sLml0ZXJhdG9yKV0oKXtyZXR1cm4gdGhpcy5lbnRyaWVzKCl9fWZ1bmN0aW9uIHQoYyxiKXtyZXR1cm4gbmV3IGUoYyxiKX1mdW5jdGlvbiByKGMpe2MuZXx8KGMucj1uZXcgTWFwLGMuZT1uZXcgTWFwKGMudCkpfWNsYXNzIG4gZXh0ZW5kcyBTZXR7Y29uc3RydWN0b3IoYSxvKXtzdXBlcigpO3RoaXNbdV09e286MyxpOm8sbjpvP28ubjpCKCksczohMSxjOiExLGU6dm9pZCAwLHQ6YSx1OnRoaXMsYTpuZXcgTWFwLG06ITEsbDohMX19Z2V0IHNpemUoKXtyZXR1cm4gVCh0aGlzW3VdKS5zaXplfWhhcyhhKXtsZXQgbz10aGlzW3VdO3JldHVybiBsKG8pLG8uZT8hIShvLmUuaGFzKGEpfHxvLmEuaGFzKGEpJiZvLmUuaGFzKG8uYS5nZXQoYSkpKTpvLnQuaGFzKGEpfWFkZChhKXtsZXQgbz10aGlzW3VdO3JldHVybiBsKG8pLHRoaXMuaGFzKGEpfHwoZihvKSxFKG8pLG8uZS5hZGQoYSkpLHRoaXN9ZGVsZXRlKGEpe2lmKCF0aGlzLmhhcyhhKSlyZXR1cm4hMTtsZXQgbz10aGlzW3VdO3JldHVybiBsKG8pLGYobyksRShvKSxvLmUuZGVsZXRlKGEpfHwoby5hLmhhcyhhKT9vLmUuZGVsZXRlKG8uYS5nZXQoYSkpOiExKX1jbGVhcigpe2xldCBhPXRoaXNbdV07bChhKSxUKGEpLnNpemUmJihmKGEpLEUoYSksYS5lLmNsZWFyKCkpfXZhbHVlcygpe2xldCBhPXRoaXNbdV07cmV0dXJuIGwoYSksZihhKSxhLmUudmFsdWVzKCl9ZW50cmllcygpe2xldCBhPXRoaXNbdV07cmV0dXJuIGwoYSksZihhKSxhLmUuZW50cmllcygpfWtleXMoKXtyZXR1cm4gdGhpcy52YWx1ZXMoKX1bKHUsU3ltYm9sLml0ZXJhdG9yKV0oKXtyZXR1cm4gdGhpcy52YWx1ZXMoKX1mb3JFYWNoKGEsbyl7bGV0IHA9dGhpcy52YWx1ZXMoKSxzPXAubmV4dCgpO2Zvcig7IXMuZG9uZTspYS5jYWxsKG8scy52YWx1ZSxzLnZhbHVlLHRoaXMpLHM9cC5uZXh0KCl9fWZ1bmN0aW9uIGkoYyxiKXtyZXR1cm4gbmV3IG4oYyxiKX1mdW5jdGlvbiBmKGMpe2MuZXx8KGMuZT1uZXcgU2V0LGMudC5mb3JFYWNoKGI9PntpZihBKGIpKXtsZXQgYT1XKGIsYyk7Yy5hLnNldChiLGEpLGMuZS5hZGQoYSl9ZWxzZSBjLmUuYWRkKGIpfSkpfWZ1bmN0aW9uIGwoYyl7Yy5tJiZoKDMsSlNPTi5zdHJpbmdpZnkoVChjKSkpfVkoXCJNYXBTZXRcIix7STp0LEQ6aX0pfXZhciBNPW5ldyBKLEZlPU0ucHJvZHVjZSxOZT1NLnByb2R1Y2VXaXRoUGF0Y2hlcy5iaW5kKE0pLHplPU0uc2V0QXV0b0ZyZWV6ZS5iaW5kKE0pLGplPU0uc2V0VXNlU3RyaWN0U2hhbGxvd0NvcHkuYmluZChNKSxDZT1NLmFwcGx5UGF0Y2hlcy5iaW5kKE0pLFJlPU0uY3JlYXRlRHJhZnQuYmluZChNKSx2ZT1NLmZpbmlzaERyYWZ0LmJpbmQoTSk7ZnVuY3Rpb24ga2UoZSl7cmV0dXJuIGV9ZnVuY3Rpb24gS2UoZSl7cmV0dXJuIGV9MCYmKG1vZHVsZS5leHBvcnRzPXtJbW1lcixhcHBseVBhdGNoZXMsY2FzdERyYWZ0LGNhc3RJbW11dGFibGUsY3JlYXRlRHJhZnQsY3VycmVudCxlbmFibGVNYXBTZXQsZW5hYmxlUGF0Y2hlcyxmaW5pc2hEcmFmdCxmcmVlemUsaW1tZXJhYmxlLGlzRHJhZnQsaXNEcmFmdGFibGUsbm90aGluZyxvcmlnaW5hbCxwcm9kdWNlLHByb2R1Y2VXaXRoUGF0Y2hlcyxzZXRBdXRvRnJlZXplLHNldFVzZVN0cmljdFNoYWxsb3dDb3B5fSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbW1lci5janMucHJvZHVjdGlvbi5qcy5tYXAiLCJcbid1c2Ugc3RyaWN0J1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaW1tZXIuY2pzLnByb2R1Y3Rpb24uanMnKVxufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ltbWVyLmNqcy5kZXZlbG9wbWVudC5qcycpXG59IiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksY2E9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBwKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifXZhciBkYT1uZXcgU2V0LGVhPXt9O2Z1bmN0aW9uIGZhKGEsYil7aGEoYSxiKTtoYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gaGEoYSxiKXtlYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspZGEuYWRkKGJbYV0pfVxudmFyIGlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxqYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGthPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxsYT1cbnt9LG1hPXt9O2Z1bmN0aW9uIG9hKGEpe2lmKGphLmNhbGwobWEsYSkpcmV0dXJuITA7aWYoamEuY2FsbChsYSxhKSlyZXR1cm4hMTtpZihrYS50ZXN0KGEpKXJldHVybiBtYVthXT0hMDtsYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBwYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHFhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHBhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIHo9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07eltiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciByYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHNhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLFxuc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuei54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gdGEoYSxiLGMsZCl7dmFyIGU9ei5oYXNPd25Qcm9wZXJ0eShiKT96W2JdOm51bGw7aWYobnVsbCE9PWU/MCE9PWUudHlwZTpkfHwhKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0pcWEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP29hKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKX1cbnZhciB1YT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCx2YT1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSx3YT1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHlhPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSx6YT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksQWE9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLEJhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxDYT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxEYT1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksRWE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLEZhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLEdhPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLEhhPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtcbnZhciBJYT1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5jYWNoZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QudHJhY2luZ19tYXJrZXJcIik7dmFyIEphPVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBLYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9SmEmJmFbSmFdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIEE9T2JqZWN0LmFzc2lnbixMYTtmdW5jdGlvbiBNYShhKXtpZih2b2lkIDA9PT1MYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtMYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTGErYX12YXIgTmE9ITE7XG5mdW5jdGlvbiBPYShhLGIpe2lmKCFhfHxOYSlyZXR1cm5cIlwiO05hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChsKXt2YXIgZD1sfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2gobCl7ZD1sfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2gobCl7ZD1sfWEoKX19Y2F0Y2gobCl7aWYobCYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBsLnN0YWNrKXtmb3IodmFyIGU9bC5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXt2YXIgaz1cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO2EuZGlzcGxheU5hbWUmJmsuaW5jbHVkZXMoXCI8YW5vbnltb3VzPlwiKSYmKGs9ay5yZXBsYWNlKFwiPGFub255bW91cz5cIixhLmRpc3BsYXlOYW1lKSk7cmV0dXJuIGt9d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e05hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TWEoYSk6XCJcIn1cbmZ1bmN0aW9uIFBhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBNYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE1hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBNYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE1hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1PYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1PYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1PYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFFhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2Ugd2E6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIEFhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHphOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgRWE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgRmE6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQ2E6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgQmE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgRGE6dmFyIGI9YS5yZW5kZXI7YT1hLmRpc3BsYXlOYW1lO2F8fChhPWIuZGlzcGxheU5hbWV8fFxuYi5uYW1lfHxcIlwiLGE9XCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO3JldHVybiBhO2Nhc2UgR2E6cmV0dXJuIGI9YS5kaXNwbGF5TmFtZXx8bnVsbCxudWxsIT09Yj9iOlFhKGEudHlwZSl8fFwiTWVtb1wiO2Nhc2UgSGE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFFhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBSYShhKXt2YXIgYj1hLnR5cGU7c3dpdGNoKGEudGFnKXtjYXNlIDI0OnJldHVyblwiQ2FjaGVcIjtjYXNlIDk6cmV0dXJuKGIuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgMTA6cmV0dXJuKGIuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgMTg6cmV0dXJuXCJEZWh5ZHJhdGVkRnJhZ21lbnRcIjtjYXNlIDExOnJldHVybiBhPWIucmVuZGVyLGE9YS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIlwiLGIuZGlzcGxheU5hbWV8fChcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSA3OnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIDU6cmV0dXJuIGI7Y2FzZSA0OnJldHVyblwiUG9ydGFsXCI7Y2FzZSAzOnJldHVyblwiUm9vdFwiO2Nhc2UgNjpyZXR1cm5cIlRleHRcIjtjYXNlIDE2OnJldHVybiBRYShiKTtjYXNlIDg6cmV0dXJuIGI9PT16YT9cIlN0cmljdE1vZGVcIjpcIk1vZGVcIjtjYXNlIDIyOnJldHVyblwiT2Zmc2NyZWVuXCI7XG5jYXNlIDEyOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIDIxOnJldHVyblwiU2NvcGVcIjtjYXNlIDEzOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIDE5OnJldHVyblwiU3VzcGVuc2VMaXN0XCI7Y2FzZSAyNTpyZXR1cm5cIlRyYWNpbmdNYXJrZXJcIjtjYXNlIDE6Y2FzZSAwOmNhc2UgMTc6Y2FzZSAyOmNhc2UgMTQ6Y2FzZSAxNTppZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilyZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7Y2FzZSBcIm9iamVjdFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIEEoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gYWIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ0YShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYmIoYSxiKXthYihhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2NiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmNiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gZGIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBlYj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IocCg5MSkpO3JldHVybiBBKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHAoOTIpKTtpZihlYihjKSl7aWYoMTxjLmxlbmd0aCl0aHJvdyBFcnJvcihwKDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX1mdW5jdGlvbiBrYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fVxuZnVuY3Rpb24gbGIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2tiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG1iLG5iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIhPT1hLm5hbWVzcGFjZVVSSXx8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle21iPW1ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO21iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW1iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIG9iKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcGI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGFzcGVjdFJhdGlvOiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCxcbnpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scWI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHBiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3FiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cGJbYl09cGJbYV19KX0pO2Z1bmN0aW9uIHJiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxwYi5oYXNPd25Qcm9wZXJ0eShhKSYmcGJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gc2IoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9cmIoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdGI9QSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHViKGEsYil7aWYoYil7aWYodGJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcihwKDYwKSk7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfHwhKFwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcihwKDYyKSk7fX1cbmZ1bmN0aW9uIHZiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgd2I9bnVsbDtmdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHAoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKCl7fXZhciBJYj0hMTtmdW5jdGlvbiBKYihhLGIsYyl7aWYoSWIpcmV0dXJuIGEoYixjKTtJYj0hMDt0cnl7cmV0dXJuIEdiKGEsYixjKX1maW5hbGx5e2lmKEliPSExLG51bGwhPT16Ynx8bnVsbCE9PUFiKUhiKCksRmIoKX19XG5mdW5jdGlvbiBLYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHAoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgTGI9ITE7aWYoaWEpdHJ5e3ZhciBNYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe0xiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYil9Y2F0Y2goYSl7TGI9ITF9ZnVuY3Rpb24gTmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIE9iPSExLFBiPW51bGwsUWI9ITEsUmI9bnVsbCxTYj17b25FcnJvcjpmdW5jdGlvbihhKXtPYj0hMDtQYj1hfX07ZnVuY3Rpb24gVGIoYSxiLGMsZCxlLGYsZyxoLGspe09iPSExO1BiPW51bGw7TmIuYXBwbHkoU2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFViKGEsYixjLGQsZSxmLGcsaCxrKXtUYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoT2Ipe2lmKE9iKXt2YXIgbD1QYjtPYj0hMTtQYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IocCgxOTgpKTtRYnx8KFFiPSEwLFJiPWwpfX1mdW5jdGlvbiBWYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmNDA5OCkmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIFdiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gWGIoYSl7aWYoVmIoYSkhPT1hKXRocm93IEVycm9yKHAoMTg4KSk7fVxuZnVuY3Rpb24gWWIoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9VmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gWGIoZSksYTtpZihmPT09ZClyZXR1cm4gWGIoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcihwKDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHAoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IocCgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBaYihhKXthPVliKGEpO3JldHVybiBudWxsIT09YT8kYihhKTpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhO2ZvcihhPWEuY2hpbGQ7bnVsbCE9PWE7KXt2YXIgYj0kYihhKTtpZihudWxsIT09YilyZXR1cm4gYjthPWEuc2libGluZ31yZXR1cm4gbnVsbH1cbnZhciBhYz1jYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLGJjPWNhLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLGNjPWNhLnVuc3RhYmxlX3Nob3VsZFlpZWxkLGRjPWNhLnVuc3RhYmxlX3JlcXVlc3RQYWludCxCPWNhLnVuc3RhYmxlX25vdyxlYz1jYS51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxmYz1jYS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxnYz1jYS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxoYz1jYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxpYz1jYS51bnN0YWJsZV9Mb3dQcmlvcml0eSxqYz1jYS51bnN0YWJsZV9JZGxlUHJpb3JpdHksa2M9bnVsbCxsYz1udWxsO2Z1bmN0aW9uIG1jKGEpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclJvb3QpdHJ5e2xjLm9uQ29tbWl0RmliZXJSb290KGtjLGEsdm9pZCAwLDEyOD09PShhLmN1cnJlbnQuZmxhZ3MmMTI4KSl9Y2F0Y2goYil7fX1cbnZhciBvYz1NYXRoLmNsejMyP01hdGguY2x6MzI6bmMscGM9TWF0aC5sb2cscWM9TWF0aC5MTjI7ZnVuY3Rpb24gbmMoYSl7YT4+Pj0wO3JldHVybiAwPT09YT8zMjozMS0ocGMoYSkvcWN8MCl8MH12YXIgcmM9NjQsc2M9NDE5NDMwNDtcbmZ1bmN0aW9uIHRjKGEpe3N3aXRjaChhJi1hKXtjYXNlIDE6cmV0dXJuIDE7Y2FzZSAyOnJldHVybiAyO2Nhc2UgNDpyZXR1cm4gNDtjYXNlIDg6cmV0dXJuIDg7Y2FzZSAxNjpyZXR1cm4gMTY7Y2FzZSAzMjpyZXR1cm4gMzI7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYSY0MTk0MjQwO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuIGEmMTMwMDIzNDI0O2Nhc2UgMTM0MjE3NzI4OnJldHVybiAxMzQyMTc3Mjg7Y2FzZSAyNjg0MzU0NTY6cmV0dXJuIDI2ODQzNTQ1NjtjYXNlIDUzNjg3MDkxMjpyZXR1cm4gNTM2ODcwOTEyO2Nhc2UgMTA3Mzc0MTgyNDpyZXR1cm4gMTA3Mzc0MTgyNDtcbmRlZmF1bHQ6cmV0dXJuIGF9fWZ1bmN0aW9uIHVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIDA7dmFyIGQ9MCxlPWEuc3VzcGVuZGVkTGFuZXMsZj1hLnBpbmdlZExhbmVzLGc9YyYyNjg0MzU0NTU7aWYoMCE9PWcpe3ZhciBoPWcmfmU7MCE9PWg/ZD10YyhoKTooZiY9ZywwIT09ZiYmKGQ9dGMoZikpKX1lbHNlIGc9YyZ+ZSwwIT09Zz9kPXRjKGcpOjAhPT1mJiYoZD10YyhmKSk7aWYoMD09PWQpcmV0dXJuIDA7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZSkmJihlPWQmLWQsZj1iJi1iLGU+PWZ8fDE2PT09ZSYmMCE9PShmJjQxOTQyNDApKSlyZXR1cm4gYjswIT09KGQmNCkmJihkfD1jJjE2KTtiPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLW9jKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gdmMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6cmV0dXJuIGIrMjUwO2Nhc2UgODpjYXNlIDE2OmNhc2UgMzI6Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYis1RTM7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4tMTtjYXNlIDEzNDIxNzcyODpjYXNlIDI2ODQzNTQ1NjpjYXNlIDUzNjg3MDkxMjpjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuLTE7ZGVmYXVsdDpyZXR1cm4tMX19XG5mdW5jdGlvbiB3YyhhLGIpe2Zvcih2YXIgYz1hLnN1c3BlbmRlZExhbmVzLGQ9YS5waW5nZWRMYW5lcyxlPWEuZXhwaXJhdGlvblRpbWVzLGY9YS5wZW5kaW5nTGFuZXM7MDxmOyl7dmFyIGc9MzEtb2MoZiksaD0xPDxnLGs9ZVtnXTtpZigtMT09PWspe2lmKDA9PT0oaCZjKXx8MCE9PShoJmQpKWVbZ109dmMoaCxiKX1lbHNlIGs8PWImJihhLmV4cGlyZWRMYW5lc3w9aCk7ZiY9fmh9fWZ1bmN0aW9uIHhjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiB5Yygpe3ZhciBhPXJjO3JjPDw9MTswPT09KHJjJjQxOTQyNDApJiYocmM9NjQpO3JldHVybiBhfWZ1bmN0aW9uIHpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gQWMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iOzUzNjg3MDkxMiE9PWImJihhLnN1c3BlbmRlZExhbmVzPTAsYS5waW5nZWRMYW5lcz0wKTthPWEuZXZlbnRUaW1lcztiPTMxLW9jKGIpO2FbYl09Y31mdW5jdGlvbiBCYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzJn5iO2EucGVuZGluZ0xhbmVzPWI7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9YjthLm11dGFibGVSZWFkTGFuZXMmPWI7YS5lbnRhbmdsZWRMYW5lcyY9YjtiPWEuZW50YW5nbGVtZW50czt2YXIgZD1hLmV2ZW50VGltZXM7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxjOyl7dmFyIGU9MzEtb2MoYyksZj0xPDxlO2JbZV09MDtkW2VdPS0xO2FbZV09LTE7YyY9fmZ9fVxuZnVuY3Rpb24gQ2MoYSxiKXt2YXIgYz1hLmVudGFuZ2xlZExhbmVzfD1iO2ZvcihhPWEuZW50YW5nbGVtZW50cztjOyl7dmFyIGQ9MzEtb2MoYyksZT0xPDxkO2UmYnxhW2RdJmImJihhW2RdfD1iKTtjJj1+ZX19dmFyIEM9MDtmdW5jdGlvbiBEYyhhKXthJj0tYTtyZXR1cm4gMTxhPzQ8YT8wIT09KGEmMjY4NDM1NDU1KT8xNjo1MzY4NzA5MTI6NDoxfXZhciBFYyxGYyxHYyxIYyxJYyxKYz0hMSxLYz1bXSxMYz1udWxsLE1jPW51bGwsTmM9bnVsbCxPYz1uZXcgTWFwLFBjPW5ldyBNYXAsUWM9W10sUmM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gU2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpMYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6TWM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6TmM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOk9jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOlBjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gVGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT17YmxvY2tlZE9uOmIsZG9tRXZlbnROYW1lOmMsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmYsdGFyZ2V0Q29udGFpbmVyczpbZV19LG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmRmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gVWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4gTGM9VGMoTGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIE1jPVRjKE1jLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBOYz1UYyhOYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO09jLnNldChmLFRjKE9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxQYy5zZXQoZixUYyhQYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBWYyhhKXt2YXIgYj1XYyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVZiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPVdiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO0ljKGEucHJpb3JpdHksZnVuY3Rpb24oKXtHYyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiBYYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9WWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbD09PWMpe2M9YS5uYXRpdmVFdmVudDt2YXIgZD1uZXcgYy5jb25zdHJ1Y3RvcihjLnR5cGUsYyk7d2I9ZDtjLnRhcmdldC5kaXNwYXRjaEV2ZW50KGQpO3diPW51bGx9ZWxzZSByZXR1cm4gYj1DYihjKSxudWxsIT09YiYmRmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gWmMoYSxiLGMpe1hjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiAkYygpe0pjPSExO251bGwhPT1MYyYmWGMoTGMpJiYoTGM9bnVsbCk7bnVsbCE9PU1jJiZYYyhNYykmJihNYz1udWxsKTtudWxsIT09TmMmJlhjKE5jKSYmKE5jPW51bGwpO09jLmZvckVhY2goWmMpO1BjLmZvckVhY2goWmMpfVxuZnVuY3Rpb24gYWQoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLEpjfHwoSmM9ITAsY2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhjYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSwkYykpKX1cbmZ1bmN0aW9uIGJkKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIGFkKGIsYSl9aWYoMDxLYy5sZW5ndGgpe2FkKEtjWzBdLGEpO2Zvcih2YXIgYz0xO2M8S2MubGVuZ3RoO2MrKyl7dmFyIGQ9S2NbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1MYyYmYWQoTGMsYSk7bnVsbCE9PU1jJiZhZChNYyxhKTtudWxsIT09TmMmJmFkKE5jLGEpO09jLmZvckVhY2goYik7UGMuZm9yRWFjaChiKTtmb3IoYz0wO2M8UWMubGVuZ3RoO2MrKylkPVFjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxRYy5sZW5ndGgmJihjPVFjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmUWMuc2hpZnQoKX12YXIgY2Q9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsZGQ9ITA7XG5mdW5jdGlvbiBlZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9MSxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fWZ1bmN0aW9uIGdkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz00LGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19XG5mdW5jdGlvbiBmZChhLGIsYyxkKXtpZihkZCl7dmFyIGU9WWMoYSxiLGMsZCk7aWYobnVsbD09PWUpaGQoYSxiLGQsaWQsYyksU2MoYSxkKTtlbHNlIGlmKFVjKGUsYSxiLGMsZCkpZC5zdG9wUHJvcGFnYXRpb24oKTtlbHNlIGlmKFNjKGEsZCksYiY0JiYtMTxSYy5pbmRleE9mKGEpKXtmb3IoO251bGwhPT1lOyl7dmFyIGY9Q2IoZSk7bnVsbCE9PWYmJkVjKGYpO2Y9WWMoYSxiLGMsZCk7bnVsbD09PWYmJmhkKGEsYixkLGlkLGMpO2lmKGY9PT1lKWJyZWFrO2U9Zn1udWxsIT09ZSYmZC5zdG9wUHJvcGFnYXRpb24oKX1lbHNlIGhkKGEsYixkLG51bGwsYyl9fXZhciBpZD1udWxsO1xuZnVuY3Rpb24gWWMoYSxiLGMsZCl7aWQ9bnVsbDthPXhiKGQpO2E9V2MoYSk7aWYobnVsbCE9PWEpaWYoYj1WYihhKSxudWxsPT09YilhPW51bGw7ZWxzZSBpZihjPWIudGFnLDEzPT09Yyl7YT1XYihiKTtpZihudWxsIT09YSlyZXR1cm4gYTthPW51bGx9ZWxzZSBpZigzPT09Yyl7aWYoYi5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZClyZXR1cm4gMz09PWIudGFnP2Iuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDthPW51bGx9ZWxzZSBiIT09YSYmKGE9bnVsbCk7aWQ9YTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGpkKGEpe3N3aXRjaChhKXtjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsaWNrXCI6Y2FzZSBcImNsb3NlXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjpjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwia2V5dXBcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwicGFzdGVcIjpjYXNlIFwicGF1c2VcIjpjYXNlIFwicGxheVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmNhc2UgXCJyYXRlY2hhbmdlXCI6Y2FzZSBcInJlc2V0XCI6Y2FzZSBcInJlc2l6ZVwiOmNhc2UgXCJzZWVrZWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjpjYXNlIFwidm9sdW1lY2hhbmdlXCI6Y2FzZSBcImNoYW5nZVwiOmNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpjYXNlIFwidGV4dElucHV0XCI6Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjpjYXNlIFwiYmVmb3JlaW5wdXRcIjpjYXNlIFwiYmx1clwiOmNhc2UgXCJmdWxsc2NyZWVuY2hhbmdlXCI6Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImhhc2hjaGFuZ2VcIjpjYXNlIFwicG9wc3RhdGVcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInNlbGVjdHN0YXJ0XCI6cmV0dXJuIDE7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwic2Nyb2xsXCI6Y2FzZSBcInRvZ2dsZVwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwid2hlZWxcIjpjYXNlIFwibW91c2VlbnRlclwiOmNhc2UgXCJtb3VzZWxlYXZlXCI6Y2FzZSBcInBvaW50ZXJlbnRlclwiOmNhc2UgXCJwb2ludGVybGVhdmVcIjpyZXR1cm4gNDtcbmNhc2UgXCJtZXNzYWdlXCI6c3dpdGNoKGVjKCkpe2Nhc2UgZmM6cmV0dXJuIDE7Y2FzZSBnYzpyZXR1cm4gNDtjYXNlIGhjOmNhc2UgaWM6cmV0dXJuIDE2O2Nhc2UgamM6cmV0dXJuIDUzNjg3MDkxMjtkZWZhdWx0OnJldHVybiAxNn1kZWZhdWx0OnJldHVybiAxNn19dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO2Z1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1cbmZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9QShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9QSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPUEoe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPUEoe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPUEoe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1BKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9QSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1BKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9QSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1BKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1BKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9QSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9QSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9aWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9aWEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoaWEpe3ZhciB4ZTtpZihpYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO0piKHJlLGIpfX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlO1xuZnVuY3Rpb24gSWUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07aWYoIWphLmNhbGwoYixlKXx8IUhlKGFbZV0sYltlXSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gSmUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gS2UoYSxiKXt2YXIgYz1KZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1KZShjKX19ZnVuY3Rpb24gTGUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9MZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBNZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBOZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gT2UoYSl7dmFyIGI9TWUoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZjJiZjLm93bmVyRG9jdW1lbnQmJkxlKGMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG51bGwhPT1kJiZOZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGE9KGI9Yy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdyxhLmdldFNlbGVjdGlvbil7YT1hLmdldFNlbGVjdGlvbigpO3ZhciBlPWMudGV4dENvbnRlbnQubGVuZ3RoLGY9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2Y6TWF0aC5taW4oZC5lbmQsZSk7IWEuZXh0ZW5kJiZmPmQmJihlPWQsZD1mLGY9ZSk7ZT1LZShjLGYpO3ZhciBnPUtlKGMsXG5kKTtlJiZnJiYoMSE9PWEucmFuZ2VDb3VudHx8YS5hbmNob3JOb2RlIT09ZS5ub2RlfHxhLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxhLmZvY3VzTm9kZSE9PWcubm9kZXx8YS5mb2N1c09mZnNldCE9PWcub2Zmc2V0KSYmKGI9Yi5jcmVhdGVSYW5nZSgpLGIuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KSxhLnJlbW92ZUFsbFJhbmdlcygpLGY+ZD8oYS5hZGRSYW5nZShiKSxhLmV4dGVuZChnLm5vZGUsZy5vZmZzZXQpKTooYi5zZXRFbmQoZy5ub2RlLGcub2Zmc2V0KSxhLmFkZFJhbmdlKGIpKSl9Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZm9jdXMmJmMuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH19XG52YXIgUGU9aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk5lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkllKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cbmZ1bmN0aW9uIFZlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFdlPXthbmltYXRpb25lbmQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpWZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFhlPXt9LFllPXt9O1xuaWEmJihZZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBXZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBXZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFplKGEpe2lmKFhlW2FdKXJldHVybiBYZVthXTtpZighV2VbYV0pcmV0dXJuIGE7dmFyIGI9V2VbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gWWUpcmV0dXJuIFhlW2FdPWJbY107cmV0dXJuIGF9dmFyICRlPVplKFwiYW5pbWF0aW9uZW5kXCIpLGFmPVplKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLGJmPVplKFwiYW5pbWF0aW9uc3RhcnRcIiksY2Y9WmUoXCJ0cmFuc2l0aW9uZW5kXCIpLGRmPW5ldyBNYXAsZWY9XCJhYm9ydCBhdXhDbGljayBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBnb3RQb2ludGVyQ2FwdHVyZSBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBsb3N0UG9pbnRlckNhcHR1cmUgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcG9pbnRlckNhbmNlbCBwb2ludGVyRG93biBwb2ludGVyTW92ZSBwb2ludGVyT3V0IHBvaW50ZXJPdmVyIHBvaW50ZXJVcCBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2Ugc2Nyb2xsIHRvZ2dsZSB0b3VjaE1vdmUgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIGZmKGEsYil7ZGYuc2V0KGEsYik7ZmEoYixbYV0pfWZvcih2YXIgZ2Y9MDtnZjxlZi5sZW5ndGg7Z2YrKyl7dmFyIGhmPWVmW2dmXSxqZj1oZi50b0xvd2VyQ2FzZSgpLGtmPWhmWzBdLnRvVXBwZXJDYXNlKCkraGYuc2xpY2UoMSk7ZmYoamYsXCJvblwiK2tmKX1mZigkZSxcIm9uQW5pbWF0aW9uRW5kXCIpO2ZmKGFmLFwib25BbmltYXRpb25JdGVyYXRpb25cIik7ZmYoYmYsXCJvbkFuaW1hdGlvblN0YXJ0XCIpO2ZmKFwiZGJsY2xpY2tcIixcIm9uRG91YmxlQ2xpY2tcIik7ZmYoXCJmb2N1c2luXCIsXCJvbkZvY3VzXCIpO2ZmKFwiZm9jdXNvdXRcIixcIm9uQmx1clwiKTtmZihjZixcIm9uVHJhbnNpdGlvbkVuZFwiKTtoYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtcbmhhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZmEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtmYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5mYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgbGY9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxtZj1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChsZikpO1xuZnVuY3Rpb24gbmYoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7VWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfX19aWYoUWIpdGhyb3cgYT1SYixRYj0hMSxSYj1udWxsLGE7fVxuZnVuY3Rpb24gRChhLGIpe3ZhciBjPWJbb2ZdO3ZvaWQgMD09PWMmJihjPWJbb2ZdPW5ldyBTZXQpO3ZhciBkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwocGYoYixhLDIsITEpLGMuYWRkKGQpKX1mdW5jdGlvbiBxZihhLGIsYyl7dmFyIGQ9MDtiJiYoZHw9NCk7cGYoYyxhLGQsYil9dmFyIHJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gc2YoYSl7aWYoIWFbcmZdKXthW3JmXT0hMDtkYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1wic2VsZWN0aW9uY2hhbmdlXCIhPT1iJiYobWYuaGFzKGIpfHxxZihiLCExLGEpLHFmKGIsITAsYSkpfSk7dmFyIGI9OT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7bnVsbD09PWJ8fGJbcmZdfHwoYltyZl09ITAscWYoXCJzZWxlY3Rpb25jaGFuZ2VcIiwhMSxiKSl9fVxuZnVuY3Rpb24gcGYoYSxiLGMsZCl7c3dpdGNoKGpkKGIpKXtjYXNlIDE6dmFyIGU9ZWQ7YnJlYWs7Y2FzZSA0OmU9Z2Q7YnJlYWs7ZGVmYXVsdDplPWZkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFMYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPVdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1KYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9ZGYuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLG49YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6bj1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpuPVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSAkZTpjYXNlIGFmOmNhc2UgYmY6az1IZDticmVhaztjYXNlIGNmOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHQ9MCE9PShiJjQpLEo9IXQmJlwic2Nyb2xsXCI9PT1hLHg9dD9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt0PVtdO2Zvcih2YXIgdz1kLHU7bnVsbCE9PVxudzspe3U9dzt2YXIgRj11LnN0YXRlTm9kZTs1PT09dS50YWcmJm51bGwhPT1GJiYodT1GLG51bGwhPT14JiYoRj1LYih3LHgpLG51bGwhPUYmJnQucHVzaCh0Zih3LEYsdSkpKSk7aWYoSilicmVhazt3PXcucmV0dXJufTA8dC5sZW5ndGgmJihoPW5ldyBrKGgsbixudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp0fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmYyE9PXdiJiYobj1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYoV2Mobil8fG5bdWZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYobj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCxuPW4/V2Mobik6bnVsbCxudWxsIT09XG5uJiYoSj1WYihuKSxuIT09Snx8NSE9PW4udGFnJiY2IT09bi50YWcpKW49bnVsbH1lbHNlIGs9bnVsbCxuPWQ7aWYoayE9PW4pe3Q9QmQ7Rj1cIm9uTW91c2VMZWF2ZVwiO3g9XCJvbk1vdXNlRW50ZXJcIjt3PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdD1UZCxGPVwib25Qb2ludGVyTGVhdmVcIix4PVwib25Qb2ludGVyRW50ZXJcIix3PVwicG9pbnRlclwiO0o9bnVsbD09az9oOnVlKGspO3U9bnVsbD09bj9oOnVlKG4pO2g9bmV3IHQoRix3K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9SjtoLnJlbGF0ZWRUYXJnZXQ9dTtGPW51bGw7V2MoZSk9PT1kJiYodD1uZXcgdCh4LHcrXCJlbnRlclwiLG4sYyxlKSx0LnRhcmdldD11LHQucmVsYXRlZFRhcmdldD1KLEY9dCk7Sj1GO2lmKGsmJm4pYjp7dD1rO3g9bjt3PTA7Zm9yKHU9dDt1O3U9dmYodSkpdysrO3U9MDtmb3IoRj14O0Y7Rj12ZihGKSl1Kys7Zm9yKDswPHctdTspdD12Zih0KSx3LS07Zm9yKDswPHUtdzspeD1cbnZmKHgpLHUtLTtmb3IoO3ctLTspe2lmKHQ9PT14fHxudWxsIT09eCYmdD09PXguYWx0ZXJuYXRlKWJyZWFrIGI7dD12Zih0KTt4PXZmKHgpfXQ9bnVsbH1lbHNlIHQ9bnVsbDtudWxsIT09ayYmd2YoZyxoLGssdCwhMSk7bnVsbCE9PW4mJm51bGwhPT1KJiZ3ZihnLEosbix0LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBuYT12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKW5hPUZlO2Vsc2V7bmE9RGU7dmFyIHhhPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYobmE9RWUpO2lmKG5hJiYobmE9bmEoYSxkKSkpe25lKGcsbmEsYyxlKTticmVhayBhfXhhJiZ4YShhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKHhhPWguX3dyYXBwZXJTdGF0ZSkmJlxueGEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmY2IoaCxcIm51bWJlclwiLGgudmFsdWUpfXhhPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKHhhKXx8XCJ0cnVlXCI9PT14YS5jb250ZW50RWRpdGFibGUpUWU9eGEsUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciAkYTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmJhPVwib25Db21wb3NpdGlvbkVuZFwiO1xuYnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpiYT1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifWJhPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihiYT1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtiYSYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09YmE/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1iYSYmaWUmJigkYT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLHhhPW9lKGQsYmEpLDA8eGEubGVuZ3RoJiYoYmE9bmV3IExkKGJhLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6YmEsbGlzdGVuZXJzOnhhfSksJGE/YmEuZGF0YT0kYTooJGE9aGUoYyksbnVsbCE9PSRhJiYoYmEuZGF0YT0kYSkpKSk7aWYoJGE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksXG4wPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9JGEpfXNlKGcsYil9KX1mdW5jdGlvbiB0ZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9S2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQodGYoYSxmLGUpKSxmPUtiKGEsYiksbnVsbCE9ZiYmZC5wdXNoKHRmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gdmYoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIHdmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9S2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQodGYoYyxrLGgpKSk6ZXx8KGs9S2IoYyxmKSxudWxsIT1rJiZnLnB1c2godGYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX12YXIgeGY9L1xcclxcbj8vZyx5Zj0vXFx1MDAwMHxcXHVGRkZEL2c7ZnVuY3Rpb24gemYoYSl7cmV0dXJuKFwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiXCIrYSkucmVwbGFjZSh4ZixcIlxcblwiKS5yZXBsYWNlKHlmLFwiXCIpfWZ1bmN0aW9uIEFmKGEsYixjKXtiPXpmKGIpO2lmKHpmKGEpIT09YiYmYyl0aHJvdyBFcnJvcihwKDQyNSkpO31mdW5jdGlvbiBCZigpe31cbnZhciBDZj1udWxsLERmPW51bGw7ZnVuY3Rpb24gRWYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgRmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsR2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEhmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBQcm9taXNlP1Byb21pc2U6dm9pZCAwLEpmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBxdWV1ZU1pY3JvdGFzaz9xdWV1ZU1pY3JvdGFzazpcInVuZGVmaW5lZFwiIT09dHlwZW9mIEhmP2Z1bmN0aW9uKGEpe3JldHVybiBIZi5yZXNvbHZlKG51bGwpLnRoZW4oYSkuY2F0Y2goSWYpfTpGZjtmdW5jdGlvbiBJZihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYTt9KX1cbmZ1bmN0aW9uIEtmKGEsYil7dmFyIGM9YixkPTA7ZG97dmFyIGU9Yy5uZXh0U2libGluZzthLnJlbW92ZUNoaWxkKGMpO2lmKGUmJjg9PT1lLm5vZGVUeXBlKWlmKGM9ZS5kYXRhLFwiLyRcIj09PWMpe2lmKDA9PT1kKXthLnJlbW92ZUNoaWxkKGUpO2JkKGIpO3JldHVybn1kLS19ZWxzZVwiJFwiIT09YyYmXCIkP1wiIT09YyYmXCIkIVwiIT09Y3x8ZCsrO2M9ZX13aGlsZShjKTtiZChiKX1mdW5jdGlvbiBMZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVhaztpZig4PT09Yil7Yj1hLmRhdGE7aWYoXCIkXCI9PT1ifHxcIiQhXCI9PT1ifHxcIiQ/XCI9PT1iKWJyZWFrO2lmKFwiLyRcIj09PWIpcmV0dXJuIG51bGx9fXJldHVybiBhfVxuZnVuY3Rpb24gTWYoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE5mPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE9mPVwiX19yZWFjdEZpYmVyJFwiK05mLFBmPVwiX19yZWFjdFByb3BzJFwiK05mLHVmPVwiX19yZWFjdENvbnRhaW5lciRcIitOZixvZj1cIl9fcmVhY3RFdmVudHMkXCIrTmYsUWY9XCJfX3JlYWN0TGlzdGVuZXJzJFwiK05mLFJmPVwiX19yZWFjdEhhbmRsZXMkXCIrTmY7XG5mdW5jdGlvbiBXYyhhKXt2YXIgYj1hW09mXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1t1Zl18fGNbT2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9TWYoYSk7bnVsbCE9PWE7KXtpZihjPWFbT2ZdKXJldHVybiBjO2E9TWYoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVtPZl18fGFbdWZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IocCgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVtQZl18fG51bGx9dmFyIFNmPVtdLFRmPS0xO2Z1bmN0aW9uIFVmKGEpe3JldHVybntjdXJyZW50OmF9fVxuZnVuY3Rpb24gRShhKXswPlRmfHwoYS5jdXJyZW50PVNmW1RmXSxTZltUZl09bnVsbCxUZi0tKX1mdW5jdGlvbiBHKGEsYil7VGYrKztTZltUZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBWZj17fSxIPVVmKFZmKSxXZj1VZighMSksWGY9VmY7ZnVuY3Rpb24gWWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBWZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFpmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gJGYoKXtFKFdmKTtFKEgpfWZ1bmN0aW9uIGFnKGEsYixjKXtpZihILmN1cnJlbnQhPT1WZil0aHJvdyBFcnJvcihwKDE2OCkpO0coSCxiKTtHKFdmLGMpfWZ1bmN0aW9uIGJnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtiPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYikpdGhyb3cgRXJyb3IocCgxMDgsUmEoYSl8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gQSh7fSxjLGQpfVxuZnVuY3Rpb24gY2coYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFZmO1hmPUguY3VycmVudDtHKEgsYSk7RyhXZixXZi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBkZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IocCgxNjkpKTtjPyhhPWJnKGEsYixYZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEUoV2YpLEUoSCksRyhILGEpKTpFKFdmKTtHKFdmLGMpfXZhciBlZz1udWxsLGZnPSExLGdnPSExO2Z1bmN0aW9uIGhnKGEpe251bGw9PT1lZz9lZz1bYV06ZWcucHVzaChhKX1mdW5jdGlvbiBpZyhhKXtmZz0hMDtoZyhhKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWdnJiZudWxsIT09ZWcpe2dnPSEwO3ZhciBhPTAsYj1DO3RyeXt2YXIgYz1lZztmb3IoQz0xO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdO2RvIGQ9ZCghMCk7d2hpbGUobnVsbCE9PWQpfWVnPW51bGw7Zmc9ITF9Y2F0Y2goZSl7dGhyb3cgbnVsbCE9PWVnJiYoZWc9ZWcuc2xpY2UoYSsxKSksYWMoZmMsamcpLGU7fWZpbmFsbHl7Qz1iLGdnPSExfX1yZXR1cm4gbnVsbH12YXIga2c9W10sbGc9MCxtZz1udWxsLG5nPTAsb2c9W10scGc9MCxxZz1udWxsLHJnPTEsc2c9XCJcIjtmdW5jdGlvbiB0ZyhhLGIpe2tnW2xnKytdPW5nO2tnW2xnKytdPW1nO21nPWE7bmc9Yn1cbmZ1bmN0aW9uIHVnKGEsYixjKXtvZ1twZysrXT1yZztvZ1twZysrXT1zZztvZ1twZysrXT1xZztxZz1hO3ZhciBkPXJnO2E9c2c7dmFyIGU9MzItb2MoZCktMTtkJj1+KDE8PGUpO2MrPTE7dmFyIGY9MzItb2MoYikrZTtpZigzMDxmKXt2YXIgZz1lLWUlNTtmPShkJigxPDxnKS0xKS50b1N0cmluZygzMik7ZD4+PWc7ZS09ZztyZz0xPDwzMi1vYyhiKStlfGM8PGV8ZDtzZz1mK2F9ZWxzZSByZz0xPDxmfGM8PGV8ZCxzZz1hfWZ1bmN0aW9uIHZnKGEpe251bGwhPT1hLnJldHVybiYmKHRnKGEsMSksdWcoYSwxLDApKX1mdW5jdGlvbiB3ZyhhKXtmb3IoO2E9PT1tZzspbWc9a2dbLS1sZ10sa2dbbGddPW51bGwsbmc9a2dbLS1sZ10sa2dbbGddPW51bGw7Zm9yKDthPT09cWc7KXFnPW9nWy0tcGddLG9nW3BnXT1udWxsLHNnPW9nWy0tcGddLG9nW3BnXT1udWxsLHJnPW9nWy0tcGddLG9nW3BnXT1udWxsfXZhciB4Zz1udWxsLHlnPW51bGwsST0hMSx6Zz1udWxsO1xuZnVuY3Rpb24gQWcoYSxiKXt2YXIgYz1CZyg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtiPWEuZGVsZXRpb25zO251bGw9PT1iPyhhLmRlbGV0aW9ucz1bY10sYS5mbGFnc3w9MTYpOmIucHVzaChjKX1cbmZ1bmN0aW9uIENnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9TGYoYi5maXJzdENoaWxkKSwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9bnVsbCwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4gYj04IT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGM9bnVsbCE9PXFnP3tpZDpyZyxvdmVyZmxvdzpzZ306bnVsbCxhLm1lbW9pemVkU3RhdGU9e2RlaHlkcmF0ZWQ6Yix0cmVlQ29udGV4dDpjLHJldHJ5TGFuZToxMDczNzQxODI0fSxjPUJnKDE4LG51bGwsbnVsbCwwKSxjLnN0YXRlTm9kZT1iLGMucmV0dXJuPWEsYS5jaGlsZD1jLHhnPWEseWc9XG5udWxsLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBEZyhhKXtyZXR1cm4gMCE9PShhLm1vZGUmMSkmJjA9PT0oYS5mbGFncyYxMjgpfWZ1bmN0aW9uIEVnKGEpe2lmKEkpe3ZhciBiPXlnO2lmKGIpe3ZhciBjPWI7aWYoIUNnKGEsYikpe2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7Yj1MZihjLm5leHRTaWJsaW5nKTt2YXIgZD14ZztiJiZDZyhhLGIpP0FnKGQsYyk6KGEuZmxhZ3M9YS5mbGFncyYtNDA5N3wyLEk9ITEseGc9YSl9fWVsc2V7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTthLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MjtJPSExO3hnPWF9fX1mdW5jdGlvbiBGZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47eGc9YX1cbmZ1bmN0aW9uIEdnKGEpe2lmKGEhPT14ZylyZXR1cm4hMTtpZighSSlyZXR1cm4gRmcoYSksST0hMCwhMTt2YXIgYjsoYj0zIT09YS50YWcpJiYhKGI9NSE9PWEudGFnKSYmKGI9YS50eXBlLGI9XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFFZihhLnR5cGUsYS5tZW1vaXplZFByb3BzKSk7aWYoYiYmKGI9eWcpKXtpZihEZyhhKSl0aHJvdyBIZygpLEVycm9yKHAoNDE4KSk7Zm9yKDtiOylBZyhhLGIpLGI9TGYoYi5uZXh0U2libGluZyl9RmcoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcihwKDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXt5Zz1MZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfXlnPVxubnVsbH19ZWxzZSB5Zz14Zz9MZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBIZygpe2Zvcih2YXIgYT15ZzthOylhPUxmKGEubmV4dFNpYmxpbmcpfWZ1bmN0aW9uIElnKCl7eWc9eGc9bnVsbDtJPSExfWZ1bmN0aW9uIEpnKGEpe251bGw9PT16Zz96Zz1bYV06emcucHVzaChhKX12YXIgS2c9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7XG5mdW5jdGlvbiBMZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHAoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IocCgxNDcsYSkpO3ZhciBlPWQsZj1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZilyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1lLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZl06YltmXT1hfTtiLl9zdHJpbmdSZWY9ZjtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IocCgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IocCgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIE1nKGEsYil7YT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik7dGhyb3cgRXJyb3IocCgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09YT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjphKSk7fWZ1bmN0aW9uIE5nKGEpe3ZhciBiPWEuX2luaXQ7cmV0dXJuIGIoYS5fcGF5bG9hZCl9XG5mdW5jdGlvbiBPZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5kZWxldGlvbnM7bnVsbD09PWQ/KGIuZGVsZXRpb25zPVtjXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGMpfX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1QZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGIuZmxhZ3N8PTEwNDg1NzYsYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzfD0yLGMpOmQ7Yi5mbGFnc3w9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJlxubnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFnc3w9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVFnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7dmFyIGY9Yy50eXBlO2lmKGY9PT15YSlyZXR1cm4gbShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGMua2V5KTtpZihudWxsIT09YiYmKGIuZWxlbWVudFR5cGU9PT1mfHxcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPT09SGEmJk5nKGYpPT09Yi50eXBlKSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9TGcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVJnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPUxnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8XG5iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9U2coYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVRnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZcIlwiIT09Ynx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVFnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjPVJnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLFxuYy5yZWY9TGcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHdhOnJldHVybiBiPVNnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtjYXNlIEhhOnZhciBkPWIuX2luaXQ7cmV0dXJuIHEoYSxkKGIuX3BheWxvYWQpLGMpfWlmKGViKGIpfHxLYShiKSlyZXR1cm4gYj1UZyhiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtNZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGMmJlwiXCIhPT1jfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsO2Nhc2Ugd2E6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGw7Y2FzZSBIYTpyZXR1cm4gZT1jLl9pbml0LHIoYSxcbmIsZShjLl9wYXlsb2FkKSxkKX1pZihlYihjKXx8S2EoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO01nKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZCYmXCJcIiE9PWR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSk7Y2FzZSB3YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKTtjYXNlIEhhOnZhciBmPWQuX2luaXQ7cmV0dXJuIHkoYSxiLGMsZihkLl9wYXlsb2FkKSxlKX1pZihlYihkKXx8S2EoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO01nKGIsZCl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCx1PWcsdz1nPTAseD1udWxsO251bGwhPT11JiZ3PGgubGVuZ3RoO3crKyl7dS5pbmRleD53Pyh4PXUsdT1udWxsKTp4PXUuc2libGluZzt2YXIgbj1yKGUsdSxoW3ddLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9eCk7YnJlYWt9YSYmdSYmbnVsbD09PW4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx3KTtudWxsPT09bT9sPW46bS5zaWJsaW5nPW47bT1uO3U9eH1pZih3PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PXUpe2Zvcig7dzxoLmxlbmd0aDt3KyspdT1xKGUsaFt3XSxrKSxudWxsIT09dSYmKGc9Zih1LGcsdyksbnVsbD09PW0/bD11Om0uc2libGluZz11LG09dSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7dzxoLmxlbmd0aDt3KyspeD15KHUsZSx3LGhbd10sayksbnVsbCE9PXgmJihhJiZudWxsIT09eC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1cbngua2V5P3c6eC5rZXkpLGc9Zih4LGcsdyksbnVsbD09PW0/bD14Om0uc2libGluZz14LG09eCk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIHQoZSxnLGgsayl7dmFyIGw9S2EoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IocCgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1oKXRocm93IEVycm9yKHAoMTUxKSk7Zm9yKHZhciB1PWw9bnVsbCxtPWcsdz1nPTAseD1udWxsLG49aC5uZXh0KCk7bnVsbCE9PW0mJiFuLmRvbmU7dysrLG49aC5uZXh0KCkpe20uaW5kZXg+dz8oeD1tLG09bnVsbCk6eD1tLnNpYmxpbmc7dmFyIHQ9cihlLG0sbi52YWx1ZSxrKTtpZihudWxsPT09dCl7bnVsbD09PW0mJihtPXgpO2JyZWFrfWEmJm0mJm51bGw9PT10LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih0LGcsdyk7bnVsbD09PXU/bD10OnUuc2libGluZz10O3U9dDttPXh9aWYobi5kb25lKXJldHVybiBjKGUsXG5tKSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PW0pe2Zvcig7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcihtPWQoZSxtKTshbi5kb25lO3crKyxuPWgubmV4dCgpKW49eShtLGUsdyxuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09bi5rZXk/dzpuLmtleSksZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gSihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT15YSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mKXtzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSB2YTphOntmb3IodmFyIGs9XG5mLmtleSxsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspe2s9Zi50eXBlO2lmKGs9PT15YSl7aWYoNz09PWwudGFnKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1lbHNlIGlmKGwuZWxlbWVudFR5cGU9PT1rfHxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09SGEmJk5nKGspPT09bC50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzKTtkLnJlZj1MZyhhLGwsZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsbCk7YnJlYWt9ZWxzZSBiKGEsbCk7bD1sLnNpYmxpbmd9Zi50eXBlPT09eWE/KGQ9VGcoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVJnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPUxnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB3YTphOntmb3IobD1mLmtleTtudWxsIT09XG5kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVNnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgSGE6cmV0dXJuIGw9Zi5faW5pdCxKKGEsZCxsKGYuX3BheWxvYWQpLGgpfWlmKGViKGYpKXJldHVybiBuKGEsZCxmLGgpO2lmKEthKGYpKXJldHVybiB0KGEsZCxmLGgpO01nKGEsZil9cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBmJiZcIlwiIT09Znx8XCJudW1iZXJcIj09PXR5cGVvZiBmPyhmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6XG4oYyhhLGQpLGQ9UWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSkpOmMoYSxkKX1yZXR1cm4gSn12YXIgVWc9T2coITApLFZnPU9nKCExKSxXZz1VZihudWxsKSxYZz1udWxsLFlnPW51bGwsWmc9bnVsbDtmdW5jdGlvbiAkZygpe1pnPVlnPVhnPW51bGx9ZnVuY3Rpb24gYWgoYSl7dmFyIGI9V2cuY3VycmVudDtFKFdnKTthLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBiaChhLGIsYyl7Zm9yKDtudWxsIT09YTspe3ZhciBkPWEuYWx0ZXJuYXRlOyhhLmNoaWxkTGFuZXMmYikhPT1iPyhhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWQmJihkLmNoaWxkTGFuZXN8PWIpKTpudWxsIT09ZCYmKGQuY2hpbGRMYW5lcyZiKSE9PWImJihkLmNoaWxkTGFuZXN8PWIpO2lmKGE9PT1jKWJyZWFrO2E9YS5yZXR1cm59fVxuZnVuY3Rpb24gY2goYSxiKXtYZz1hO1pnPVlnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYoZGg9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfWZ1bmN0aW9uIGVoKGEpe3ZhciBiPWEuX2N1cnJlbnRWYWx1ZTtpZihaZyE9PWEpaWYoYT17Y29udGV4dDphLG1lbW9pemVkVmFsdWU6YixuZXh0Om51bGx9LG51bGw9PT1ZZyl7aWYobnVsbD09PVhnKXRocm93IEVycm9yKHAoMzA4KSk7WWc9YTtYZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmF9fWVsc2UgWWc9WWcubmV4dD1hO3JldHVybiBifXZhciBmaD1udWxsO2Z1bmN0aW9uIGdoKGEpe251bGw9PT1maD9maD1bYV06ZmgucHVzaChhKX1cbmZ1bmN0aW9uIGhoKGEsYixjLGQpe3ZhciBlPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGMubmV4dD1jLGdoKGIpKTooYy5uZXh0PWUubmV4dCxlLm5leHQ9Yyk7Yi5pbnRlcmxlYXZlZD1jO3JldHVybiBpaChhLGQpfWZ1bmN0aW9uIGloKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH12YXIgamg9ITE7ZnVuY3Rpb24ga2goYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIGxoKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIG1oKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fVxuZnVuY3Rpb24gbmgoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZD1kLnNoYXJlZDtpZigwIT09KEsmMikpe3ZhciBlPWQucGVuZGluZztudWxsPT09ZT9iLm5leHQ9YjooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5wZW5kaW5nPWI7cmV0dXJuIGloKGEsYyl9ZT1kLmludGVybGVhdmVkO251bGw9PT1lPyhiLm5leHQ9YixnaChkKSk6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QuaW50ZXJsZWF2ZWQ9YjtyZXR1cm4gaWgoYSxjKX1mdW5jdGlvbiBvaChhLGIsYyl7Yj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLnNoYXJlZCwwIT09KGMmNDE5NDI0MCkpKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxuZnVuY3Rpb24gcGgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIHFoKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7amg9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbT1hLmFsdGVybmF0ZTtudWxsIT09bSYmKG09bS51cGRhdGVRdWV1ZSxoPW0ubGFzdEJhc2VVcGRhdGUsaCE9PWcmJihudWxsPT09aD9tLmZpcnN0QmFzZVVwZGF0ZT1sOmgubmV4dD1sLG0ubGFzdEJhc2VVcGRhdGU9aykpfWlmKG51bGwhPT1mKXt2YXIgcT1lLmJhc2VTdGF0ZTtnPTA7bT1sPWs9bnVsbDtoPWY7ZG97dmFyIHI9aC5sYW5lLHk9aC5ldmVudFRpbWU7aWYoKGQmcik9PT1yKXtudWxsIT09bSYmKG09bS5uZXh0PXtldmVudFRpbWU6eSxsYW5lOjAsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgbj1hLHQ9aDtyPWI7eT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOm49dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuKXtxPW4uY2FsbCh5LHEscik7YnJlYWsgYX1xPW47YnJlYWsgYTtjYXNlIDM6bi5mbGFncz1uLmZsYWdzJi02NTUzN3wxMjg7Y2FzZSAwOm49dC5wYXlsb2FkO3I9XCJmdW5jdGlvblwiPT09dHlwZW9mIG4/bi5jYWxsKHkscSxyKTpuO2lmKG51bGw9PT1yfHx2b2lkIDA9PT1yKWJyZWFrIGE7cT1BKHt9LHEscik7YnJlYWsgYTtjYXNlIDI6amg9ITB9fW51bGwhPT1oLmNhbGxiYWNrJiYwIT09aC5sYW5lJiYoYS5mbGFnc3w9NjQscj1lLmVmZmVjdHMsbnVsbD09PXI/ZS5lZmZlY3RzPVtoXTpyLnB1c2goaCkpfWVsc2UgeT17ZXZlbnRUaW1lOnksbGFuZTpyLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW0/KGw9bT15LGs9cSk6bT1tLm5leHQ9eSxnfD1yO1xuaD1oLm5leHQ7aWYobnVsbD09PWgpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2Ugcj1oLGg9ci5uZXh0LHIubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9cixlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW0mJihrPXEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW07Yj1lLnNoYXJlZC5pbnRlcmxlYXZlZDtpZihudWxsIT09Yil7ZT1iO2RvIGd8PWUubGFuZSxlPWUubmV4dDt3aGlsZShlIT09Yil9ZWxzZSBudWxsPT09ZiYmKGUuc2hhcmVkLmxhbmVzPTApO3JofD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9cX19XG5mdW5jdGlvbiBzaChhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IocCgxOTEsZSkpO2UuY2FsbChkKX19fXZhciB0aD17fSx1aD1VZih0aCksdmg9VWYodGgpLHdoPVVmKHRoKTtmdW5jdGlvbiB4aChhKXtpZihhPT09dGgpdGhyb3cgRXJyb3IocCgxNzQpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHloKGEsYil7Ryh3aCxiKTtHKHZoLGEpO0codWgsdGgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bGIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWxiKGIsYSl9RSh1aCk7Ryh1aCxiKX1mdW5jdGlvbiB6aCgpe0UodWgpO0UodmgpO0Uod2gpfWZ1bmN0aW9uIEFoKGEpe3hoKHdoLmN1cnJlbnQpO3ZhciBiPXhoKHVoLmN1cnJlbnQpO3ZhciBjPWxiKGIsYS50eXBlKTtiIT09YyYmKEcodmgsYSksRyh1aCxjKSl9ZnVuY3Rpb24gQmgoYSl7dmguY3VycmVudD09PWEmJihFKHVoKSxFKHZoKSl9dmFyIEw9VWYoMCk7XG5mdW5jdGlvbiBDaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgRGg9W107XG5mdW5jdGlvbiBFaCgpe2Zvcih2YXIgYT0wO2E8RGgubGVuZ3RoO2ErKylEaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO0RoLmxlbmd0aD0wfXZhciBGaD11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLEdoPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEhoPTAsTT1udWxsLE49bnVsbCxPPW51bGwsSWg9ITEsSmg9ITEsS2g9MCxMaD0wO2Z1bmN0aW9uIFAoKXt0aHJvdyBFcnJvcihwKDMyMSkpO31mdW5jdGlvbiBNaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gTmgoYSxiLGMsZCxlLGYpe0hoPWY7TT1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7RmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9PaDpQaDthPWMoZCxlKTtpZihKaCl7Zj0wO2Rve0poPSExO0toPTA7aWYoMjU8PWYpdGhyb3cgRXJyb3IocCgzMDEpKTtmKz0xO089Tj1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtGaC5jdXJyZW50PVFoO2E9YyhkLGUpfXdoaWxlKEpoKX1GaC5jdXJyZW50PVJoO2I9bnVsbCE9PU4mJm51bGwhPT1OLm5leHQ7SGg9MDtPPU49TT1udWxsO0loPSExO2lmKGIpdGhyb3cgRXJyb3IocCgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBTaCgpe3ZhciBhPTAhPT1LaDtLaD0wO3JldHVybiBhfVxuZnVuY3Rpb24gVGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09Tz9NLm1lbW9pemVkU3RhdGU9Tz1hOk89Ty5uZXh0PWE7cmV0dXJuIE99ZnVuY3Rpb24gVWgoKXtpZihudWxsPT09Til7dmFyIGE9TS5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ti5uZXh0O3ZhciBiPW51bGw9PT1PP00ubWVtb2l6ZWRTdGF0ZTpPLm5leHQ7aWYobnVsbCE9PWIpTz1iLE49YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzEwKSk7Tj1hO2E9e21lbW9pemVkU3RhdGU6Ti5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpOLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ti5iYXNlUXVldWUscXVldWU6Ti5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1PP00ubWVtb2l6ZWRTdGF0ZT1PPWE6Tz1PLm5leHQ9YX1yZXR1cm4gT31cbmZ1bmN0aW9uIFZoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gV2goYSl7dmFyIGI9VWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1OLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2Y9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1udWxsLGs9bnVsbCxsPWY7ZG97dmFyIG09bC5sYW5lO2lmKChIaCZtKT09PW0pbnVsbCE9PWsmJihrPWsubmV4dD17bGFuZTowLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxlYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWwuaGFzRWFnZXJTdGF0ZT9sLmVhZ2VyU3RhdGU6YShkLGwuYWN0aW9uKTtlbHNle3ZhciBxPXtsYW5lOm0sYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLFxuZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09az8oaD1rPXEsZz1kKTprPWsubmV4dD1xO00ubGFuZXN8PW07cmh8PW19bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1mKTtudWxsPT09az9nPWQ6ay5uZXh0PWg7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwoZGg9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWc7Yi5iYXNlUXVldWU9aztjLmxhc3RSZW5kZXJlZFN0YXRlPWR9YT1jLmludGVybGVhdmVkO2lmKG51bGwhPT1hKXtlPWE7ZG8gZj1lLmxhbmUsTS5sYW5lc3w9ZixyaHw9ZixlPWUubmV4dDt3aGlsZShlIT09YSl9ZWxzZSBudWxsPT09ZSYmKGMubGFuZXM9MCk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIFhoKGEpe3ZhciBiPVVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChkaD0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfWZ1bmN0aW9uIFloKCl7fVxuZnVuY3Rpb24gWmgoYSxiKXt2YXIgYz1NLGQ9VWgoKSxlPWIoKSxmPSFIZShkLm1lbW9pemVkU3RhdGUsZSk7ZiYmKGQubWVtb2l6ZWRTdGF0ZT1lLGRoPSEwKTtkPWQucXVldWU7JGgoYWkuYmluZChudWxsLGMsZCxhKSxbYV0pO2lmKGQuZ2V0U25hcHNob3QhPT1ifHxmfHxudWxsIT09TyYmTy5tZW1vaXplZFN0YXRlLnRhZyYxKXtjLmZsYWdzfD0yMDQ4O2JpKDksY2kuYmluZChudWxsLGMsZCxlLGIpLHZvaWQgMCxudWxsKTtpZihudWxsPT09USl0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oSGgmMzApfHxkaShjLGIsZSl9cmV0dXJuIGV9ZnVuY3Rpb24gZGkoYSxiLGMpe2EuZmxhZ3N8PTE2Mzg0O2E9e2dldFNuYXBzaG90OmIsdmFsdWU6Y307Yj1NLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE0udXBkYXRlUXVldWU9YixiLnN0b3Jlcz1bYV0pOihjPWIuc3RvcmVzLG51bGw9PT1jP2Iuc3RvcmVzPVthXTpjLnB1c2goYSkpfVxuZnVuY3Rpb24gY2koYSxiLGMsZCl7Yi52YWx1ZT1jO2IuZ2V0U25hcHNob3Q9ZDtlaShiKSYmZmkoYSl9ZnVuY3Rpb24gYWkoYSxiLGMpe3JldHVybiBjKGZ1bmN0aW9uKCl7ZWkoYikmJmZpKGEpfSl9ZnVuY3Rpb24gZWkoYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hSGUoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gZmkoYSl7dmFyIGI9aWgoYSwxKTtudWxsIT09YiYmZ2koYixhLDEsLTEpfVxuZnVuY3Rpb24gaGkoYSl7dmFyIGI9VGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpWaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPWlpLmJpbmQobnVsbCxNLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBiaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1NLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE0udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gamkoKXtyZXR1cm4gVWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIGtpKGEsYixjLGQpe3ZhciBlPVRoKCk7TS5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9YmkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIGxpKGEsYixjLGQpe3ZhciBlPVVoKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU4pe3ZhciBnPU4ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmTWgoZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9YmkoYixjLGYsZCk7cmV0dXJufX1NLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1iaSgxfGIsYyxmLGQpfWZ1bmN0aW9uIG1pKGEsYil7cmV0dXJuIGtpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uICRoKGEsYil7cmV0dXJuIGxpKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIG5pKGEsYil7cmV0dXJuIGxpKDQsMixhLGIpfWZ1bmN0aW9uIG9pKGEsYil7cmV0dXJuIGxpKDQsNCxhLGIpfVxuZnVuY3Rpb24gcGkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBxaShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIGxpKDQsNCxwaS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiByaSgpe31mdW5jdGlvbiBzaShhLGIpe3ZhciBjPVVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZNaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHRpKGEsYil7dmFyIGM9VWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJk1oKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIHVpKGEsYixjKXtpZigwPT09KEhoJjIxKSlyZXR1cm4gYS5iYXNlU3RhdGUmJihhLmJhc2VTdGF0ZT0hMSxkaD0hMCksYS5tZW1vaXplZFN0YXRlPWM7SGUoYyxiKXx8KGM9eWMoKSxNLmxhbmVzfD1jLHJofD1jLGEuYmFzZVN0YXRlPSEwKTtyZXR1cm4gYn1mdW5jdGlvbiB2aShhLGIpe3ZhciBjPUM7Qz0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1HaC50cmFuc2l0aW9uO0doLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0M9YyxHaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIHdpKCl7cmV0dXJuIFVoKCkubWVtb2l6ZWRTdGF0ZX1cbmZ1bmN0aW9uIHhpKGEsYixjKXt2YXIgZD15aShhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZih6aShhKSlBaShiLGMpO2Vsc2UgaWYoYz1oaChhLGIsYyxkKSxudWxsIT09Yyl7dmFyIGU9UigpO2dpKGMsYSxkLGUpO0JpKGMsYixkKX19XG5mdW5jdGlvbiBpaShhLGIsYyl7dmFyIGQ9eWkoYSksZT17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoemkoYSkpQWkoYixlKTtlbHNle3ZhciBmPWEuYWx0ZXJuYXRlO2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWZ8fDA9PT1mLmxhbmVzKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmhhc0VhZ2VyU3RhdGU9ITA7ZS5lYWdlclN0YXRlPWg7aWYoSGUoaCxnKSl7dmFyIGs9Yi5pbnRlcmxlYXZlZDtudWxsPT09az8oZS5uZXh0PWUsZ2goYikpOihlLm5leHQ9ay5uZXh0LGsubmV4dD1lKTtiLmludGVybGVhdmVkPWU7cmV0dXJufX1jYXRjaChsKXt9ZmluYWxseXt9Yz1oaChhLGIsZSxkKTtudWxsIT09YyYmKGU9UigpLGdpKGMsYSxkLGUpLEJpKGMsYixkKSl9fVxuZnVuY3Rpb24gemkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7cmV0dXJuIGE9PT1NfHxudWxsIT09YiYmYj09PU19ZnVuY3Rpb24gQWkoYSxiKXtKaD1JaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIEJpKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG52YXIgUmg9e3JlYWRDb250ZXh0OmVoLHVzZUNhbGxiYWNrOlAsdXNlQ29udGV4dDpQLHVzZUVmZmVjdDpQLHVzZUltcGVyYXRpdmVIYW5kbGU6UCx1c2VJbnNlcnRpb25FZmZlY3Q6UCx1c2VMYXlvdXRFZmZlY3Q6UCx1c2VNZW1vOlAsdXNlUmVkdWNlcjpQLHVzZVJlZjpQLHVzZVN0YXRlOlAsdXNlRGVidWdWYWx1ZTpQLHVzZURlZmVycmVkVmFsdWU6UCx1c2VUcmFuc2l0aW9uOlAsdXNlTXV0YWJsZVNvdXJjZTpQLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlAsdXNlSWQ6UCx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LE9oPXtyZWFkQ29udGV4dDplaCx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe1RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6ZWgsdXNlRWZmZWN0Om1pLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBraSg0MTk0MzA4LFxuNCxwaS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGtpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4ga2koNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1UaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1UaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPXhpLmJpbmQobnVsbCxNLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cblRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOmhpLHVzZURlYnVnVmFsdWU6cmksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXtyZXR1cm4gVGgoKS5tZW1vaXplZFN0YXRlPWF9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1oaSghMSksYj1hWzBdO2E9dmkuYmluZChudWxsLGFbMV0pO1RoKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TSxlPVRoKCk7aWYoSSl7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PVEpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KEhoJjMwKXx8ZGkoZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9ZjttaShhaS5iaW5kKG51bGwsZCxcbmYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2JpKDksY2kuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT1UaCgpLGI9US5pZGVudGlmaWVyUHJlZml4O2lmKEkpe3ZhciBjPXNnO3ZhciBkPXJnO2M9KGQmfigxPDwzMi1vYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1LaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9TGgrKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFBoPXtyZWFkQ29udGV4dDplaCx1c2VDYWxsYmFjazpzaSx1c2VDb250ZXh0OmVoLHVzZUVmZmVjdDokaCx1c2VJbXBlcmF0aXZlSGFuZGxlOnFpLHVzZUluc2VydGlvbkVmZmVjdDpuaSx1c2VMYXlvdXRFZmZlY3Q6b2ksdXNlTWVtbzp0aSx1c2VSZWR1Y2VyOldoLHVzZVJlZjpqaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBXaChWaCl9LFxudXNlRGVidWdWYWx1ZTpyaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVVoKCk7cmV0dXJuIHVpKGIsTi5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9V2goVmgpWzBdLGI9VWgoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOlloLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlpoLHVzZUlkOndpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sUWg9e3JlYWRDb250ZXh0OmVoLHVzZUNhbGxiYWNrOnNpLHVzZUNvbnRleHQ6ZWgsdXNlRWZmZWN0OiRoLHVzZUltcGVyYXRpdmVIYW5kbGU6cWksdXNlSW5zZXJ0aW9uRWZmZWN0Om5pLHVzZUxheW91dEVmZmVjdDpvaSx1c2VNZW1vOnRpLHVzZVJlZHVjZXI6WGgsdXNlUmVmOmppLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIFhoKFZoKX0sdXNlRGVidWdWYWx1ZTpyaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVVoKCk7cmV0dXJuIG51bGw9PT1cbk4/Yi5tZW1vaXplZFN0YXRlPWE6dWkoYixOLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1YaChWaClbMF0sYj1VaCgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6WWgsdXNlU3luY0V4dGVybmFsU3RvcmU6WmgsdXNlSWQ6d2ksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtmdW5jdGlvbiBDaShhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPUEoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn1mdW5jdGlvbiBEaShhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6QSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgRWk9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/VmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9UigpLGU9eWkoYSksZj1taChkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPW5oKGEsZixlKTtudWxsIT09YiYmKGdpKGIsYSxlLGQpLG9oKGIsYSxlKSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9UigpLGU9eWkoYSksZj1taChkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9bmgoYSxmLGUpO251bGwhPT1iJiYoZ2koYixhLGUsZCksb2goYixhLGUpKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1SKCksZD1cbnlpKGEpLGU9bWgoYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtiPW5oKGEsZSxkKTtudWxsIT09YiYmKGdpKGIsYSxkLGMpLG9oKGIsYSxkKSl9fTtmdW5jdGlvbiBGaShhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFJZShjLGQpfHwhSWUoZSxmKTohMH1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD0hMSxlPVZmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPWVoKGYpOihlPVpmKGIpP1hmOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP1lmKGEsZSk6VmYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1FaTthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEhpKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZFaS5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIElpKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9e307a2goYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1laChmKTooZj1aZihiKT9YZjpILmN1cnJlbnQsZS5jb250ZXh0PVlmKGEsZikpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihEaShhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZFaS5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxxaChhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00MTk0MzA4KX1mdW5jdGlvbiBKaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1QYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZSxkaWdlc3Q6bnVsbH19XG5mdW5jdGlvbiBLaShhLGIsYyl7cmV0dXJue3ZhbHVlOmEsc291cmNlOm51bGwsc3RhY2s6bnVsbCE9Yz9jOm51bGwsZGlnZXN0Om51bGwhPWI/YjpudWxsfX1mdW5jdGlvbiBMaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgTWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gTmkoYSxiLGMpe2M9bWgoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7T2l8fChPaT0hMCxQaT1kKTtMaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFFpKGEsYixjKXtjPW1oKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0xpKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtMaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVJpP1JpPW5ldyBTZXQoW3RoaXNdKTpSaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gU2koYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBNaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPVRpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIFVpKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9bWgoLTEsMSksYi50YWc9MixuaChjLGIsMSkpKSxjLmxhbmVzfD0xKSxhO2EuZmxhZ3N8PTY1NTM2O2EubGFuZXM9ZTtyZXR1cm4gYX12YXIgV2k9dWEuUmVhY3RDdXJyZW50T3duZXIsZGg9ITE7ZnVuY3Rpb24gWGkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9WZyhiLG51bGwsYyxkKTpVZyhiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIFlpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtjaChiLGUpO2Q9TmgoYSxiLGMsZCxmLGUpO2M9U2goKTtpZihudWxsIT09YSYmIWRoKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsWmkoYSxiLGUpO0kmJmMmJnZnKGIpO2IuZmxhZ3N8PTE7WGkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiAkaShhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFhaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixiaihhLGIsZixkLGUpO2E9UmcoYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpJZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuIFppKGEsYixlKX1iLmZsYWdzfD0xO2E9UGcoZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBiaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoSWUoZixkKSYmYS5yZWY9PT1iLnJlZilpZihkaD0hMSxiLnBlbmRpbmdQcm9wcz1kPWYsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYoZGg9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxaaShhLGIsZSl9cmV0dXJuIGNqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBkaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LEcoZWosZmopLGZqfD1jO2Vsc2V7aWYoMD09PShjJjEwNzM3NDE4MjQpKXJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sYi51cGRhdGVRdWV1ZT1udWxsLEcoZWosZmopLGZqfD1hLG51bGw7Yi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfTtkPW51bGwhPT1mP2YuYmFzZUxhbmVzOmM7Ryhlaixmaik7Zmp8PWR9ZWxzZSBudWxsIT09XG5mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxHKGVqLGZqKSxmanw9ZDtYaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBnaihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mn1mdW5jdGlvbiBjaihhLGIsYyxkLGUpe3ZhciBmPVpmKGMpP1hmOkguY3VycmVudDtmPVlmKGIsZik7Y2goYixlKTtjPU5oKGEsYixjLGQsZixlKTtkPVNoKCk7aWYobnVsbCE9PWEmJiFkaClyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLFppKGEsYixlKTtJJiZkJiZ2ZyhiKTtiLmZsYWdzfD0xO1hpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGooYSxiLGMsZCxlKXtpZihaZihjKSl7dmFyIGY9ITA7Y2coYil9ZWxzZSBmPSExO2NoKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKWlqKGEsYiksR2koYixjLGQpLElpKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPWVoKGwpOihsPVpmKGMpP1hmOkguY3VycmVudCxsPVlmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09ZHx8ayE9PWwpJiZIaShiLGcsZCxsKTtqaD0hMTt2YXIgcj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO3FoKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxyIT09a3x8V2YuY3VycmVudHx8amg/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRGkoYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPWpofHxGaShiLGMsaCxkLHIsayxsKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSk6XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTtsaChhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkNpKGIudHlwZSxoKTtnLnByb3BzPWw7cT1iLnBlbmRpbmdQcm9wcztyPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPWVoKGspOihrPVpmKGMpP1hmOkguY3VycmVudCxrPVlmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhtPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB5fHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cXx8ciE9PWspJiZIaShiLGcsZCxrKTtqaD0hMTtyPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7cWgoYixkLGcsZSk7dmFyIG49Yi5tZW1vaXplZFN0YXRlO2ghPT1xfHxyIT09bnx8V2YuY3VycmVudHx8amg/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoRGkoYixjLHksZCksbj1iLm1lbW9pemVkU3RhdGUpLChsPWpofHxGaShiLGMsbCxkLHIsbixrKXx8ITEpPyhtfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLG4sayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG4saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1uKSxnLnByb3BzPWQsZy5zdGF0ZT1uLGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PVxuYS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4gamooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gamooYSxiLGMsZCxlLGYpe2dqKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZkZyhiLGMsITEpLFppKGEsYixmKTtkPWIuc3RhdGVOb2RlO1dpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9VWcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1VZyhiLG51bGwsaCxmKSk6WGkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmZGcoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBraihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P2FnKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJmFnKGEsYi5jb250ZXh0LCExKTt5aChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBsaihhLGIsYyxkLGUpe0lnKCk7SmcoZSk7Yi5mbGFnc3w9MjU2O1hpKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBtaj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIG5qKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfX1cbmZ1bmN0aW9uIG9qKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPUwuY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7RyhMLGUmMSk7aWYobnVsbD09PWEpe0VnKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtnPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmd9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZyk6Zj1waihnLGQsMCxudWxsKSxhPVRnKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPW5qKGMpLGIubWVtb2l6ZWRTdGF0ZT1taixhKTpxaihiLGcpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lJiYoaD1lLmRlaHlkcmF0ZWQsbnVsbCE9PWgpKXJldHVybiByaihhLGIsZyxkLGgsZSxjKTtpZihmKXtmPWQuZmFsbGJhY2s7Zz1iLm1vZGU7ZT1hLmNoaWxkO2g9ZS5zaWJsaW5nO3ZhciBrPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn07MD09PShnJjEpJiZiLmNoaWxkIT09ZT8oZD1iLmNoaWxkLGQuY2hpbGRMYW5lcz0wLGQucGVuZGluZ1Byb3BzPWssYi5kZWxldGlvbnM9bnVsbCk6KGQ9UGcoZSxrKSxkLnN1YnRyZWVGbGFncz1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCk7bnVsbCE9PWg/Zj1QZyhoLGYpOihmPVRnKGYsZyxjLG51bGwpLGYuZmxhZ3N8PTIpO2YucmV0dXJuPVxuYjtkLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDtkPWY7Zj1iLmNoaWxkO2c9YS5jaGlsZC5tZW1vaXplZFN0YXRlO2c9bnVsbD09PWc/bmooYyk6e2Jhc2VMYW5lczpnLmJhc2VMYW5lc3xjLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9O2YubWVtb2l6ZWRTdGF0ZT1nO2YuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmM7Yi5tZW1vaXplZFN0YXRlPW1qO3JldHVybiBkfWY9YS5jaGlsZDthPWYuc2libGluZztkPVBnKGYse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0pOzA9PT0oYi5tb2RlJjEpJiYoZC5sYW5lcz1jKTtkLnJldHVybj1iO2Quc2libGluZz1udWxsO251bGwhPT1hJiYoYz1iLmRlbGV0aW9ucyxudWxsPT09Yz8oYi5kZWxldGlvbnM9W2FdLGIuZmxhZ3N8PTE2KTpjLnB1c2goYSkpO2IuY2hpbGQ9ZDtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gZH1cbmZ1bmN0aW9uIHFqKGEsYil7Yj1waih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9ZnVuY3Rpb24gc2ooYSxiLGMsZCl7bnVsbCE9PWQmJkpnKGQpO1VnKGIsYS5jaGlsZCxudWxsLGMpO2E9cWooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbik7YS5mbGFnc3w9MjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYX1cbmZ1bmN0aW9uIHJqKGEsYixjLGQsZSxmLGcpe2lmKGMpe2lmKGIuZmxhZ3MmMjU2KXJldHVybiBiLmZsYWdzJj0tMjU3LGQ9S2koRXJyb3IocCg0MjIpKSksc2ooYSxiLGcsZCk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPXBqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPVRnKGYsZSxnLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmVWcoYixhLmNoaWxkLG51bGwsZyk7Yi5jaGlsZC5tZW1vaXplZFN0YXRlPW5qKGcpO2IubWVtb2l6ZWRTdGF0ZT1tajtyZXR1cm4gZn1pZigwPT09KGIubW9kZSYxKSlyZXR1cm4gc2ooYSxiLGcsbnVsbCk7aWYoXCIkIVwiPT09ZS5kYXRhKXtkPWUubmV4dFNpYmxpbmcmJmUubmV4dFNpYmxpbmcuZGF0YXNldDtcbmlmKGQpdmFyIGg9ZC5kZ3N0O2Q9aDtmPUVycm9yKHAoNDE5KSk7ZD1LaShmLGQsdm9pZCAwKTtyZXR1cm4gc2ooYSxiLGcsZCl9aD0wIT09KGcmYS5jaGlsZExhbmVzKTtpZihkaHx8aCl7ZD1RO2lmKG51bGwhPT1kKXtzd2l0Y2goZyYtZyl7Y2FzZSA0OmU9MjticmVhaztjYXNlIDE2OmU9ODticmVhaztjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOmNhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6ZT0zMjticmVhaztjYXNlIDUzNjg3MDkxMjplPTI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmU9MH1lPTAhPT0oZSYoZC5zdXNwZW5kZWRMYW5lc3xnKSk/MDplO1xuMCE9PWUmJmUhPT1mLnJldHJ5TGFuZSYmKGYucmV0cnlMYW5lPWUsaWgoYSxlKSxnaShkLGEsZSwtMSkpfXRqKCk7ZD1LaShFcnJvcihwKDQyMSkpKTtyZXR1cm4gc2ooYSxiLGcsZCl9aWYoXCIkP1wiPT09ZS5kYXRhKXJldHVybiBiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9dWouYmluZChudWxsLGEpLGUuX3JlYWN0UmV0cnk9YixudWxsO2E9Zi50cmVlQ29udGV4dDt5Zz1MZihlLm5leHRTaWJsaW5nKTt4Zz1iO0k9ITA7emc9bnVsbDtudWxsIT09YSYmKG9nW3BnKytdPXJnLG9nW3BnKytdPXNnLG9nW3BnKytdPXFnLHJnPWEuaWQsc2c9YS5vdmVyZmxvdyxxZz1iKTtiPXFqKGIsZC5jaGlsZHJlbik7Yi5mbGFnc3w9NDA5NjtyZXR1cm4gYn1mdW5jdGlvbiB2aihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO2JoKGEucmV0dXJuLGIsYyl9XG5mdW5jdGlvbiB3aihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplfTooZi5pc0JhY2t3YXJkcz1iLGYucmVuZGVyaW5nPW51bGwsZi5yZW5kZXJpbmdTdGFydFRpbWU9MCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24geGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtYaShhLGIsZC5jaGlsZHJlbixjKTtkPUwuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD0xMjg7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ2aihhLGMsYik7ZWxzZSBpZigxOT09PWEudGFnKXZqKGEsYyxiKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9RyhMLGQpO2lmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1DaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3dqKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09Q2goYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXdqKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOndqKGIsITEsbnVsbCxudWxsLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlqKGEsYil7MD09PShiLm1vZGUmMSkmJm51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpfWZ1bmN0aW9uIFppKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtyaHw9Yi5sYW5lcztpZigwPT09KGMmYi5jaGlsZExhbmVzKSlyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IocCgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9UGcoYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVBnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB5aihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6a2ooYik7SWcoKTticmVhaztjYXNlIDU6QWgoYik7YnJlYWs7Y2FzZSAxOlpmKGIudHlwZSkmJmNnKGIpO2JyZWFrO2Nhc2UgNDp5aChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5tZW1vaXplZFByb3BzLnZhbHVlO0coV2csZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZTticmVhaztjYXNlIDEzOmQ9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kKXtpZihudWxsIT09ZC5kZWh5ZHJhdGVkKXJldHVybiBHKEwsTC5jdXJyZW50JjEpLGIuZmxhZ3N8PTEyOCxudWxsO2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiBvaihhLGIsYyk7RyhMLEwuY3VycmVudCYxKTthPVppKGEsYixjKTtyZXR1cm4gbnVsbCE9PWE/YS5zaWJsaW5nOm51bGx9RyhMLEwuY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJlxuYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmMTI4KSl7aWYoZClyZXR1cm4geGooYSxiLGMpO2IuZmxhZ3N8PTEyOH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0coTCxMLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGIubGFuZXM9MCxkaihhLGIsYyl9cmV0dXJuIFppKGEsYixjKX12YXIgemosQWosQmosQ2o7XG56aj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07QWo9ZnVuY3Rpb24oKXt9O1xuQmo9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO3hoKHVoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1BKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXViKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09bCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJlxuKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fChjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxcbmMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZEKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtDaj1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtcbmZ1bmN0aW9uIERqKGEsYil7aWYoIUkpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIFMoYSl7dmFyIGI9bnVsbCE9PWEuYWx0ZXJuYXRlJiZhLmFsdGVybmF0ZS5jaGlsZD09PWEuY2hpbGQsYz0wLGQ9MDtpZihiKWZvcih2YXIgZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCxkfD1lLmZsYWdzJjE0NjgwMDY0LGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7ZWxzZSBmb3IoZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyxkfD1lLmZsYWdzLGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7YS5zdWJ0cmVlRmxhZ3N8PWQ7YS5jaGlsZExhbmVzPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiBFaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gUyhiKSxudWxsO2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAzOmQ9Yi5zdGF0ZU5vZGU7emgoKTtFKFdmKTtFKEgpO0VoKCk7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUdnKGIpP2IuZmxhZ3N8PTQ6bnVsbD09PWF8fGEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJjA9PT0oYi5mbGFncyYyNTYpfHwoYi5mbGFnc3w9MTAyNCxudWxsIT09emcmJihGaih6Zyksemc9bnVsbCkpO0FqKGEsYik7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDU6QmgoYik7dmFyIGU9eGgod2guY3VycmVudCk7XG5jPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpQmooYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO1MoYik7cmV0dXJuIG51bGx9YT14aCh1aC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtkW1BmXT1mO2E9MCE9PShiLm1vZGUmMSk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsZCk7RChcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuZCk7RChcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRChcImludmFsaWRcIixkKX11YihjLGYpO2U9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxoLGEpLGU9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxcbmgsYSksZT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmVhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZcIm9uU2Nyb2xsXCI9PT1nJiZEKFwic2Nyb2xsXCIsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2RiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9QmYpfWQ9ZTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hJiYoYT1rYihjKSk7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcblwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW09mXT1iO2FbUGZdPWQ7emooYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2E6e2c9dmIoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixhKTtEKFwiY2xvc2VcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuYSk7RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZDticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1nYihhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dWIoYyxlKTtoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/c2IoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm5iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1cbmN8fFwiXCIhPT1rKSYmb2IoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJm9iKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoZWEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRChcInNjcm9sbFwiLGEpOm51bGwhPWsmJnRhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7ZGIoYSxkLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsXG4hMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX1zd2l0Y2goYyl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpkPSEhZC5hdXRvRm9jdXM7YnJlYWsgYTtjYXNlIFwiaW1nXCI6ZD0hMDticmVhayBhO2RlZmF1bHQ6ZD0hMX19ZCYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKX1TKGIpO3JldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlDaihhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtjPXhoKHdoLmN1cnJlbnQpO3hoKHVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7aWYoZj1kLm5vZGVWYWx1ZSE9PWMpaWYoYT1cbnhnLG51bGwhPT1hKXN3aXRjaChhLnRhZyl7Y2FzZSAzOkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpO2JyZWFrO2Nhc2UgNTohMCE9PWEubWVtb2l6ZWRQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpfWYmJihiLmZsYWdzfD00KX1lbHNlIGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW09mXT1iLGIuc3RhdGVOb2RlPWR9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDEzOkUoTCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7aWYoSSYmbnVsbCE9PXlnJiYwIT09KGIubW9kZSYxKSYmMD09PShiLmZsYWdzJjEyOCkpSGcoKSxJZygpLGIuZmxhZ3N8PTk4NTYwLGY9ITE7ZWxzZSBpZihmPUdnKGIpLG51bGwhPT1kJiZudWxsIT09ZC5kZWh5ZHJhdGVkKXtpZihudWxsPT09XG5hKXtpZighZil0aHJvdyBFcnJvcihwKDMxOCkpO2Y9Yi5tZW1vaXplZFN0YXRlO2Y9bnVsbCE9PWY/Zi5kZWh5ZHJhdGVkOm51bGw7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTcpKTtmW09mXT1ifWVsc2UgSWcoKSwwPT09KGIuZmxhZ3MmMTI4KSYmKGIubWVtb2l6ZWRTdGF0ZT1udWxsKSxiLmZsYWdzfD00O1MoYik7Zj0hMX1lbHNlIG51bGwhPT16ZyYmKEZqKHpnKSx6Zz1udWxsKSxmPSEwO2lmKCFmKXJldHVybiBiLmZsYWdzJjY1NTM2P2I6bnVsbH1pZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtkIT09KG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlKSYmZCYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShMLmN1cnJlbnQmMSk/MD09PVQmJihUPTMpOnRqKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiB6aCgpLFxuQWooYSxiKSxudWxsPT09YSYmc2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksUyhiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIGFoKGIudHlwZS5fY29udGV4dCksUyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMTk6RShMKTtmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gUyhiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKURqKGYsITEpO2Vsc2V7aWYoMCE9PVR8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1DaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O0RqKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LFxuZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7RyhMLEwuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9XG5hLnNpYmxpbmd9bnVsbCE9PWYudGFpbCYmQigpPkdqJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRGooZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9Q2goZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxEaihmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhSSlyZXR1cm4gUyhiKSxudWxsfWVsc2UgMipCKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+R2omJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRGooZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPVxuYixmLnRhaWw9Yi5zaWJsaW5nLGYucmVuZGVyaW5nU3RhcnRUaW1lPUIoKSxiLnNpYmxpbmc9bnVsbCxjPUwuY3VycmVudCxHKEwsZD9jJjF8MjpjJjEpLGI7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIEhqKCksZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oZmomMTA3Mzc0MTgyNCkmJihTKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6UyhiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIElqKGEsYil7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksYT1iLmZsYWdzLGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAzOnJldHVybiB6aCgpLEUoV2YpLEUoSCksRWgoKSxhPWIuZmxhZ3MsMCE9PShhJjY1NTM2KSYmMD09PShhJjEyOCk/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSA1OnJldHVybiBCaChiKSxudWxsO2Nhc2UgMTM6RShMKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7aWYobnVsbD09PWIuYWx0ZXJuYXRlKXRocm93IEVycm9yKHAoMzQwKSk7SWcoKX1hPWIuZmxhZ3M7cmV0dXJuIGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRShMKSxudWxsO2Nhc2UgNDpyZXR1cm4gemgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIGFoKGIudHlwZS5fY29udGV4dCksbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIEhqKCksXG5udWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIEpqPSExLFU9ITEsS2o9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQsVj1udWxsO2Z1bmN0aW9uIExqKGEsYil7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2goZCl7VyhhLGIsZCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBNaihhLGIsYyl7dHJ5e2MoKX1jYXRjaChkKXtXKGEsYixkKX19dmFyIE5qPSExO1xuZnVuY3Rpb24gT2ooYSxiKXtDZj1kZDthPU1lKCk7aWYoTmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGM9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2M9KGM9YS5vd25lckRvY3VtZW50KSYmYy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBkPWMuZ2V0U2VsZWN0aW9uJiZjLmdldFNlbGVjdGlvbigpO2lmKGQmJjAhPT1kLnJhbmdlQ291bnQpe2M9ZC5hbmNob3JOb2RlO3ZhciBlPWQuYW5jaG9yT2Zmc2V0LGY9ZC5mb2N1c05vZGU7ZD1kLmZvY3VzT2Zmc2V0O3RyeXtjLm5vZGVUeXBlLGYubm9kZVR5cGV9Y2F0Y2goRil7Yz1udWxsO2JyZWFrIGF9dmFyIGc9MCxoPS0xLGs9LTEsbD0wLG09MCxxPWEscj1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7cSE9PWN8fDAhPT1lJiYzIT09cS5ub2RlVHlwZXx8KGg9ZytlKTtxIT09Znx8MCE9PWQmJjMhPT1xLm5vZGVUeXBlfHwoaz1nK2QpOzM9PT1xLm5vZGVUeXBlJiYoZys9XG5xLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeT1xLmZpcnN0Q2hpbGQpKWJyZWFrO3I9cTtxPXl9Zm9yKDs7KXtpZihxPT09YSlicmVhayBiO3I9PT1jJiYrK2w9PT1lJiYoaD1nKTtyPT09ZiYmKyttPT09ZCYmKGs9Zyk7aWYobnVsbCE9PSh5PXEubmV4dFNpYmxpbmcpKWJyZWFrO3E9cjtyPXEucGFyZW50Tm9kZX1xPXl9Yz0tMT09PWh8fC0xPT09az9udWxsOntzdGFydDpoLGVuZDprfX1lbHNlIGM9bnVsbH1jPWN8fHtzdGFydDowLGVuZDowfX1lbHNlIGM9bnVsbDtEZj17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpjfTtkZD0hMTtmb3IoVj1iO251bGwhPT1WOylpZihiPVYsYT1iLmNoaWxkLDAhPT0oYi5zdWJ0cmVlRmxhZ3MmMTAyOCkmJm51bGwhPT1hKWEucmV0dXJuPWIsVj1hO2Vsc2UgZm9yKDtudWxsIT09Vjspe2I9Vjt0cnl7dmFyIG49Yi5hbHRlcm5hdGU7aWYoMCE9PShiLmZsYWdzJjEwMjQpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztcbmNhc2UgMTppZihudWxsIT09bil7dmFyIHQ9bi5tZW1vaXplZFByb3BzLEo9bi5tZW1vaXplZFN0YXRlLHg9Yi5zdGF0ZU5vZGUsdz14LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/dDpDaShiLnR5cGUsdCksSik7eC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT13fWJyZWFrO2Nhc2UgMzp2YXIgdT1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOzE9PT11Lm5vZGVUeXBlP3UudGV4dENvbnRlbnQ9XCJcIjo5PT09dS5ub2RlVHlwZSYmdS5kb2N1bWVudEVsZW1lbnQmJnUucmVtb3ZlQ2hpbGQodS5kb2N1bWVudEVsZW1lbnQpO2JyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goRil7VyhiLGIucmV0dXJuLEYpfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtWPWE7YnJlYWt9Vj1iLnJldHVybn1uPU5qO05qPSExO3JldHVybiBufVxuZnVuY3Rpb24gUGooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmTWooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gUWooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIFJqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBTaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsU2ooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltPZl0sZGVsZXRlIGJbUGZdLGRlbGV0ZSBiW29mXSxkZWxldGUgYltRZl0sZGVsZXRlIGJbUmZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBUaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFVqKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fFRqKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBWaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9QmYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoVmooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylWaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBXaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspV2ooYSxiLGMpLGE9YS5zaWJsaW5nfXZhciBYPW51bGwsWGo9ITE7ZnVuY3Rpb24gWWooYSxiLGMpe2ZvcihjPWMuY2hpbGQ7bnVsbCE9PWM7KVpqKGEsYixjKSxjPWMuc2libGluZ31cbmZ1bmN0aW9uIFpqKGEsYixjKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtsYy5vbkNvbW1pdEZpYmVyVW5tb3VudChrYyxjKX1jYXRjaChoKXt9c3dpdGNoKGMudGFnKXtjYXNlIDU6VXx8TGooYyxiKTtjYXNlIDY6dmFyIGQ9WCxlPVhqO1g9bnVsbDtZaihhLGIsYyk7WD1kO1hqPWU7bnVsbCE9PVgmJihYaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOmEucmVtb3ZlQ2hpbGQoYykpOlgucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwhPT1YJiYoWGo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP0tmKGEucGFyZW50Tm9kZSxjKToxPT09YS5ub2RlVHlwZSYmS2YoYSxjKSxiZChhKSk6S2YoWCxjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgNDpkPVg7ZT1YajtYPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WGo9ITA7XG5ZaihhLGIsYyk7WD1kO1hqPWU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmKCFVJiYoZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoZD1kLmxhc3RFZmZlY3QsbnVsbCE9PWQpKSl7ZT1kPWQubmV4dDtkb3t2YXIgZj1lLGc9Zi5kZXN0cm95O2Y9Zi50YWc7dm9pZCAwIT09ZyYmKDAhPT0oZiYyKT9NaihjLGIsZyk6MCE9PShmJjQpJiZNaihjLGIsZykpO2U9ZS5uZXh0fXdoaWxlKGUhPT1kKX1ZaihhLGIsYyk7YnJlYWs7Y2FzZSAxOmlmKCFVJiYoTGooYyxiKSxkPWMuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KSl0cnl7ZC5wcm9wcz1jLm1lbW9pemVkUHJvcHMsZC5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsZC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGgpe1coYyxiLGgpfVlqKGEsYixjKTticmVhaztjYXNlIDIxOllqKGEsYixjKTticmVhaztjYXNlIDIyOmMubW9kZSYxPyhVPShkPVUpfHxudWxsIT09XG5jLm1lbW9pemVkU3RhdGUsWWooYSxiLGMpLFU9ZCk6WWooYSxiLGMpO2JyZWFrO2RlZmF1bHQ6WWooYSxiLGMpfX1mdW5jdGlvbiBhayhhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBLaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWJrLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gY2soYSxiKXt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7dmFyIGY9YSxnPWIsaD1nO2E6Zm9yKDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSA1Olg9aC5zdGF0ZU5vZGU7WGo9ITE7YnJlYWsgYTtjYXNlIDM6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1hqPSEwO2JyZWFrIGE7Y2FzZSA0Olg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztYaj0hMDticmVhayBhfWg9aC5yZXR1cm59aWYobnVsbD09PVgpdGhyb3cgRXJyb3IocCgxNjApKTtaaihmLGcsZSk7WD1udWxsO1hqPSExO3ZhciBrPWUuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChsKXtXKGUsYixsKX19aWYoYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpZm9yKGI9Yi5jaGlsZDtudWxsIT09YjspZGsoYixhKSxiPWIuc2libGluZ31cbmZ1bmN0aW9uIGRrKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLmZsYWdzO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNrKGIsYSk7ZWsoYSk7aWYoZCY0KXt0cnl7UGooMyxhLGEucmV0dXJuKSxRaigzLGEpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX10cnl7UGooNSxhLGEucmV0dXJuKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMTpjayhiLGEpO2VrKGEpO2QmNTEyJiZudWxsIT09YyYmTGooYyxjLnJldHVybik7YnJlYWs7Y2FzZSA1OmNrKGIsYSk7ZWsoYSk7ZCY1MTImJm51bGwhPT1jJiZMaihjLGMucmV0dXJuKTtpZihhLmZsYWdzJjMyKXt2YXIgZT1hLnN0YXRlTm9kZTt0cnl7b2IoZSxcIlwiKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWlmKGQmNCYmKGU9YS5zdGF0ZU5vZGUsbnVsbCE9ZSkpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPW51bGwhPT1jP2MubWVtb2l6ZWRQcm9wczpmLGg9YS50eXBlLGs9YS51cGRhdGVRdWV1ZTtcbmEudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09ayl0cnl7XCJpbnB1dFwiPT09aCYmXCJyYWRpb1wiPT09Zi50eXBlJiZudWxsIT1mLm5hbWUmJmFiKGUsZik7dmIoaCxnKTt2YXIgbD12YihoLGYpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKz0yKXt2YXIgbT1rW2ddLHE9a1tnKzFdO1wic3R5bGVcIj09PW0/c2IoZSxxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1tP25iKGUscSk6XCJjaGlsZHJlblwiPT09bT9vYihlLHEpOnRhKGUsbSxxLGwpfXN3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpiYihlLGYpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGUsZik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnZhciByPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFmLm11bHRpcGxlO3ZhciB5PWYudmFsdWU7bnVsbCE9eT9mYihlLCEhZi5tdWx0aXBsZSx5LCExKTpyIT09ISFmLm11bHRpcGxlJiYobnVsbCE9Zi5kZWZhdWx0VmFsdWU/ZmIoZSwhIWYubXVsdGlwbGUsXG5mLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoZSwhIWYubXVsdGlwbGUsZi5tdWx0aXBsZT9bXTpcIlwiLCExKSl9ZVtQZl09Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgNjpjayhiLGEpO2VrKGEpO2lmKGQmNCl7aWYobnVsbD09PWEuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7ZT1hLnN0YXRlTm9kZTtmPWEubWVtb2l6ZWRQcm9wczt0cnl7ZS5ub2RlVmFsdWU9Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMzpjayhiLGEpO2VrKGEpO2lmKGQmNCYmbnVsbCE9PWMmJmMubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpdHJ5e2JkKGIuY29udGFpbmVySW5mbyl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfWJyZWFrO2Nhc2UgNDpjayhiLGEpO2VrKGEpO2JyZWFrO2Nhc2UgMTM6Y2soYixhKTtlayhhKTtlPWEuY2hpbGQ7ZS5mbGFncyY4MTkyJiYoZj1udWxsIT09ZS5tZW1vaXplZFN0YXRlLGUuc3RhdGVOb2RlLmlzSGlkZGVuPWYsIWZ8fFxubnVsbCE9PWUuYWx0ZXJuYXRlJiZudWxsIT09ZS5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZXx8KGZrPUIoKSkpO2QmNCYmYWsoYSk7YnJlYWs7Y2FzZSAyMjptPW51bGwhPT1jJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlO2EubW9kZSYxPyhVPShsPVUpfHxtLGNrKGIsYSksVT1sKTpjayhiLGEpO2VrKGEpO2lmKGQmODE5Mil7bD1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKChhLnN0YXRlTm9kZS5pc0hpZGRlbj1sKSYmIW0mJjAhPT0oYS5tb2RlJjEpKWZvcihWPWEsbT1hLmNoaWxkO251bGwhPT1tOyl7Zm9yKHE9Vj1tO251bGwhPT1WOyl7cj1WO3k9ci5jaGlsZDtzd2l0Y2goci50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpQaig0LHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMTpMaihyLHIucmV0dXJuKTt2YXIgbj1yLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsVW5tb3VudCl7ZD1yO2M9ci5yZXR1cm47dHJ5e2I9ZCxuLnByb3BzPVxuYi5tZW1vaXplZFByb3BzLG4uc3RhdGU9Yi5tZW1vaXplZFN0YXRlLG4uY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtXKGQsYyx0KX19YnJlYWs7Y2FzZSA1OkxqKHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMjI6aWYobnVsbCE9PXIubWVtb2l6ZWRTdGF0ZSl7Z2socSk7Y29udGludWV9fW51bGwhPT15Pyh5LnJldHVybj1yLFY9eSk6Z2socSl9bT1tLnNpYmxpbmd9YTpmb3IobT1udWxsLHE9YTs7KXtpZig1PT09cS50YWcpe2lmKG51bGw9PT1tKXttPXE7dHJ5e2U9cS5zdGF0ZU5vZGUsbD8oZj1lLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooaD1xLnN0YXRlTm9kZSxrPXEubWVtb2l6ZWRQcm9wcy5zdHlsZSxnPXZvaWQgMCE9PWsmJm51bGwhPT1rJiZrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9rLmRpc3BsYXk6bnVsbCxoLnN0eWxlLmRpc3BsYXk9XG5yYihcImRpc3BsYXlcIixnKSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX19ZWxzZSBpZig2PT09cS50YWcpe2lmKG51bGw9PT1tKXRyeXtxLnN0YXRlTm9kZS5ub2RlVmFsdWU9bD9cIlwiOnEubWVtb2l6ZWRQcm9wc31jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWVsc2UgaWYoKDIyIT09cS50YWcmJjIzIT09cS50YWd8fG51bGw9PT1xLm1lbW9pemVkU3RhdGV8fHE9PT1hKSYmbnVsbCE9PXEuY2hpbGQpe3EuY2hpbGQucmV0dXJuPXE7cT1xLmNoaWxkO2NvbnRpbnVlfWlmKHE9PT1hKWJyZWFrIGE7Zm9yKDtudWxsPT09cS5zaWJsaW5nOyl7aWYobnVsbD09PXEucmV0dXJufHxxLnJldHVybj09PWEpYnJlYWsgYTttPT09cSYmKG09bnVsbCk7cT1xLnJldHVybn1tPT09cSYmKG09bnVsbCk7cS5zaWJsaW5nLnJldHVybj1xLnJldHVybjtxPXEuc2libGluZ319YnJlYWs7Y2FzZSAxOTpjayhiLGEpO2VrKGEpO2QmNCYmYWsoYSk7YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OmNrKGIsXG5hKSxlayhhKX19ZnVuY3Rpb24gZWsoYSl7dmFyIGI9YS5mbGFncztpZihiJjIpe3RyeXthOntmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZihUaihjKSl7dmFyIGQ9YzticmVhayBhfWM9Yy5yZXR1cm59dGhyb3cgRXJyb3IocCgxNjApKTt9c3dpdGNoKGQudGFnKXtjYXNlIDU6dmFyIGU9ZC5zdGF0ZU5vZGU7ZC5mbGFncyYzMiYmKG9iKGUsXCJcIiksZC5mbGFncyY9LTMzKTt2YXIgZj1VaihhKTtXaihhLGYsZSk7YnJlYWs7Y2FzZSAzOmNhc2UgNDp2YXIgZz1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGg9VWooYSk7VmooYSxoLGcpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjEpKTt9fWNhdGNoKGspe1coYSxhLnJldHVybixrKX1hLmZsYWdzJj0tM31iJjQwOTYmJihhLmZsYWdzJj0tNDA5Nyl9ZnVuY3Rpb24gaGsoYSxiLGMpe1Y9YTtpayhhLGIsYyl9XG5mdW5jdGlvbiBpayhhLGIsYyl7Zm9yKHZhciBkPTAhPT0oYS5tb2RlJjEpO251bGwhPT1WOyl7dmFyIGU9VixmPWUuY2hpbGQ7aWYoMjI9PT1lLnRhZyYmZCl7dmFyIGc9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZXx8Smo7aWYoIWcpe3ZhciBoPWUuYWx0ZXJuYXRlLGs9bnVsbCE9PWgmJm51bGwhPT1oLm1lbW9pemVkU3RhdGV8fFU7aD1Kajt2YXIgbD1VO0pqPWc7aWYoKFU9aykmJiFsKWZvcihWPWU7bnVsbCE9PVY7KWc9VixrPWcuY2hpbGQsMjI9PT1nLnRhZyYmbnVsbCE9PWcubWVtb2l6ZWRTdGF0ZT9qayhlKTpudWxsIT09az8oay5yZXR1cm49ZyxWPWspOmprKGUpO2Zvcig7bnVsbCE9PWY7KVY9ZixpayhmLGIsYyksZj1mLnNpYmxpbmc7Vj1lO0pqPWg7VT1sfWtrKGEsYixjKX1lbHNlIDAhPT0oZS5zdWJ0cmVlRmxhZ3MmODc3MikmJm51bGwhPT1mPyhmLnJldHVybj1lLFY9Zik6a2soYSxiLGMpfX1cbmZ1bmN0aW9uIGtrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKDAhPT0oYi5mbGFncyY4NzcyKSl7dmFyIGM9Yi5hbHRlcm5hdGU7dHJ5e2lmKDAhPT0oYi5mbGFncyY4NzcyKSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VXx8UWooNSxiKTticmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoYi5mbGFncyY0JiYhVSlpZihudWxsPT09YylkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZT1iLmVsZW1lbnRUeXBlPT09Yi50eXBlP2MubWVtb2l6ZWRQcm9wczpDaShiLnR5cGUsYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLGMubWVtb2l6ZWRTdGF0ZSxkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgZj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiZzaChiLGYsZCk7YnJlYWs7Y2FzZSAzOnZhciBnPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWcpe2M9bnVsbDtpZihudWxsIT09Yi5jaGlsZClzd2l0Y2goYi5jaGlsZC50YWcpe2Nhc2UgNTpjPVxuYi5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmM9Yi5jaGlsZC5zdGF0ZU5vZGV9c2goYixnLGMpfWJyZWFrO2Nhc2UgNTp2YXIgaD1iLnN0YXRlTm9kZTtpZihudWxsPT09YyYmYi5mbGFncyY0KXtjPWg7dmFyIGs9Yi5tZW1vaXplZFByb3BzO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ay5hdXRvRm9jdXMmJmMuZm9jdXMoKTticmVhaztjYXNlIFwiaW1nXCI6ay5zcmMmJihjLnNyYz1rLnNyYyl9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1sKXt2YXIgbT1sLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW0pe3ZhciBxPW0uZGVoeWRyYXRlZDtudWxsIT09cSYmYmQocSl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMjM6Y2FzZSAyNTpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9VXx8Yi5mbGFncyY1MTImJlJqKGIpfWNhdGNoKHIpe1coYixiLnJldHVybixyKX19aWYoYj09PWEpe1Y9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fWZ1bmN0aW9uIGdrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19XG5mdW5jdGlvbiBqayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9Vjt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtRaig0LGIpfWNhdGNoKGspe1coYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtXKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e1JqKGIpfWNhdGNoKGspe1coYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7UmooYil9Y2F0Y2goayl7VyhiLGcsayl9fX1jYXRjaChrKXtXKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1Y9aDticmVha31WPWIucmV0dXJufX1cbnZhciBsaz1NYXRoLmNlaWwsbWs9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixuaz11YS5SZWFjdEN1cnJlbnRPd25lcixvaz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxLPTAsUT1udWxsLFk9bnVsbCxaPTAsZmo9MCxlaj1VZigwKSxUPTAscGs9bnVsbCxyaD0wLHFrPTAscms9MCxzaz1udWxsLHRrPW51bGwsZms9MCxHaj1JbmZpbml0eSx1az1udWxsLE9pPSExLFBpPW51bGwsUmk9bnVsbCx2az0hMSx3az1udWxsLHhrPTAseWs9MCx6az1udWxsLEFrPS0xLEJrPTA7ZnVuY3Rpb24gUigpe3JldHVybiAwIT09KEsmNik/QigpOi0xIT09QWs/QWs6QWs9QigpfVxuZnVuY3Rpb24geWkoYSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIDE7aWYoMCE9PShLJjIpJiYwIT09WilyZXR1cm4gWiYtWjtpZihudWxsIT09S2cudHJhbnNpdGlvbilyZXR1cm4gMD09PUJrJiYoQms9eWMoKSksQms7YT1DO2lmKDAhPT1hKXJldHVybiBhO2E9d2luZG93LmV2ZW50O2E9dm9pZCAwPT09YT8xNjpqZChhLnR5cGUpO3JldHVybiBhfWZ1bmN0aW9uIGdpKGEsYixjLGQpe2lmKDUwPHlrKXRocm93IHlrPTAsems9bnVsbCxFcnJvcihwKDE4NSkpO0FjKGEsYyxkKTtpZigwPT09KEsmMil8fGEhPT1RKWE9PT1RJiYoMD09PShLJjIpJiYocWt8PWMpLDQ9PT1UJiZDayhhLFopKSxEayhhLGQpLDE9PT1jJiYwPT09SyYmMD09PShiLm1vZGUmMSkmJihHaj1CKCkrNTAwLGZnJiZqZygpKX1cbmZ1bmN0aW9uIERrKGEsYil7dmFyIGM9YS5jYWxsYmFja05vZGU7d2MoYSxiKTt2YXIgZD11YyhhLGE9PT1RP1o6MCk7aWYoMD09PWQpbnVsbCE9PWMmJmJjKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTA7ZWxzZSBpZihiPWQmLWQsYS5jYWxsYmFja1ByaW9yaXR5IT09Yil7bnVsbCE9YyYmYmMoYyk7aWYoMT09PWIpMD09PWEudGFnP2lnKEVrLmJpbmQobnVsbCxhKSk6aGcoRWsuYmluZChudWxsLGEpKSxKZihmdW5jdGlvbigpezA9PT0oSyY2KSYmamcoKX0pLGM9bnVsbDtlbHNle3N3aXRjaChEYyhkKSl7Y2FzZSAxOmM9ZmM7YnJlYWs7Y2FzZSA0OmM9Z2M7YnJlYWs7Y2FzZSAxNjpjPWhjO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmM9amM7YnJlYWs7ZGVmYXVsdDpjPWhjfWM9RmsoYyxHay5iaW5kKG51bGwsYSkpfWEuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gR2soYSxiKXtBaz0tMTtCaz0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBjPWEuY2FsbGJhY2tOb2RlO2lmKEhrKCkmJmEuY2FsbGJhY2tOb2RlIT09YylyZXR1cm4gbnVsbDt2YXIgZD11YyhhLGE9PT1RP1o6MCk7aWYoMD09PWQpcmV0dXJuIG51bGw7aWYoMCE9PShkJjMwKXx8MCE9PShkJmEuZXhwaXJlZExhbmVzKXx8YiliPUlrKGEsZCk7ZWxzZXtiPWQ7dmFyIGU9SztLfD0yO3ZhciBmPUprKCk7aWYoUSE9PWF8fFohPT1iKXVrPW51bGwsR2o9QigpKzUwMCxLayhhLGIpO2RvIHRyeXtMaygpO2JyZWFrfWNhdGNoKGgpe01rKGEsaCl9d2hpbGUoMSk7JGcoKTttay5jdXJyZW50PWY7Sz1lO251bGwhPT1ZP2I9MDooUT1udWxsLFo9MCxiPVQpfWlmKDAhPT1iKXsyPT09YiYmKGU9eGMoYSksMCE9PWUmJihkPWUsYj1OayhhLGUpKSk7aWYoMT09PWIpdGhyb3cgYz1wayxLayhhLDApLENrKGEsZCksRGsoYSxCKCkpLGM7aWYoNj09PWIpQ2soYSxkKTtcbmVsc2V7ZT1hLmN1cnJlbnQuYWx0ZXJuYXRlO2lmKDA9PT0oZCYzMCkmJiFPayhlKSYmKGI9SWsoYSxkKSwyPT09YiYmKGY9eGMoYSksMCE9PWYmJihkPWYsYj1OayhhLGYpKSksMT09PWIpKXRocm93IGM9cGssS2soYSwwKSxDayhhLGQpLERrKGEsQigpKSxjO2EuZmluaXNoZWRXb3JrPWU7YS5maW5pc2hlZExhbmVzPWQ7c3dpdGNoKGIpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IocCgzNDUpKTtjYXNlIDI6UGsoYSx0ayx1ayk7YnJlYWs7Y2FzZSAzOkNrKGEsZCk7aWYoKGQmMTMwMDIzNDI0KT09PWQmJihiPWZrKzUwMC1CKCksMTA8Yikpe2lmKDAhPT11YyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZkKSE9PWQpe1IoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUZmKFBrLmJpbmQobnVsbCxhLHRrLHVrKSxiKTticmVha31QayhhLHRrLHVrKTticmVhaztjYXNlIDQ6Q2soYSxkKTtpZigoZCY0MTk0MjQwKT09PVxuZClicmVhaztiPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGQ7KXt2YXIgZz0zMS1vYyhkKTtmPTE8PGc7Zz1iW2ddO2c+ZSYmKGU9Zyk7ZCY9fmZ9ZD1lO2Q9QigpLWQ7ZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpsayhkLzE5NjApKS1kO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1GZihQay5iaW5kKG51bGwsYSx0ayx1ayksZCk7YnJlYWt9UGsoYSx0ayx1ayk7YnJlYWs7Y2FzZSA1OlBrKGEsdGssdWspO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMjkpKTt9fX1EayhhLEIoKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yz9Hay5iaW5kKG51bGwsYSk6bnVsbH1cbmZ1bmN0aW9uIE5rKGEsYil7dmFyIGM9c2s7YS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYoS2soYSxiKS5mbGFnc3w9MjU2KTthPUlrKGEsYik7MiE9PWEmJihiPXRrLHRrPWMsbnVsbCE9PWImJkZqKGIpKTtyZXR1cm4gYX1mdW5jdGlvbiBGaihhKXtudWxsPT09dGs/dGs9YTp0ay5wdXNoLmFwcGx5KHRrLGEpfVxuZnVuY3Rpb24gT2soYSl7Zm9yKHZhciBiPWE7Oyl7aWYoYi5mbGFncyYxNjM4NCl7dmFyIGM9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5zdG9yZXMsbnVsbCE9PWMpKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9ZS5nZXRTbmFwc2hvdDtlPWUudmFsdWU7dHJ5e2lmKCFIZShmKCksZSkpcmV0dXJuITF9Y2F0Y2goZyl7cmV0dXJuITF9fX1jPWIuY2hpbGQ7aWYoYi5zdWJ0cmVlRmxhZ3MmMTYzODQmJm51bGwhPT1jKWMucmV0dXJuPWIsYj1jO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuITA7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4hMH1cbmZ1bmN0aW9uIENrKGEsYil7YiY9fnJrO2ImPX5xazthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLW9jKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1mdW5jdGlvbiBFayhhKXtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtIaygpO3ZhciBiPXVjKGEsMCk7aWYoMD09PShiJjEpKXJldHVybiBEayhhLEIoKSksbnVsbDt2YXIgYz1JayhhLGIpO2lmKDAhPT1hLnRhZyYmMj09PWMpe3ZhciBkPXhjKGEpOzAhPT1kJiYoYj1kLGM9TmsoYSxkKSl9aWYoMT09PWMpdGhyb3cgYz1wayxLayhhLDApLENrKGEsYiksRGsoYSxCKCkpLGM7aWYoNj09PWMpdGhyb3cgRXJyb3IocCgzNDUpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1BrKGEsdGssdWspO0RrKGEsQigpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFFrKGEsYil7dmFyIGM9SztLfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0s9YywwPT09SyYmKEdqPUIoKSs1MDAsZmcmJmpnKCkpfX1mdW5jdGlvbiBSayhhKXtudWxsIT09d2smJjA9PT13ay50YWcmJjA9PT0oSyY2KSYmSGsoKTt2YXIgYj1LO0t8PTE7dmFyIGM9b2sudHJhbnNpdGlvbixkPUM7dHJ5e2lmKG9rLnRyYW5zaXRpb249bnVsbCxDPTEsYSlyZXR1cm4gYSgpfWZpbmFsbHl7Qz1kLG9rLnRyYW5zaXRpb249YyxLPWIsMD09PShLJjYpJiZqZygpfX1mdW5jdGlvbiBIaigpe2ZqPWVqLmN1cnJlbnQ7RShlail9XG5mdW5jdGlvbiBLayhhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxHZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3dnKGQpO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiYkZigpO2JyZWFrO2Nhc2UgMzp6aCgpO0UoV2YpO0UoSCk7RWgoKTticmVhaztjYXNlIDU6QmgoZCk7YnJlYWs7Y2FzZSA0OnpoKCk7YnJlYWs7Y2FzZSAxMzpFKEwpO2JyZWFrO2Nhc2UgMTk6RShMKTticmVhaztjYXNlIDEwOmFoKGQudHlwZS5fY29udGV4dCk7YnJlYWs7Y2FzZSAyMjpjYXNlIDIzOkhqKCl9Yz1jLnJldHVybn1RPWE7WT1hPVBnKGEuY3VycmVudCxudWxsKTtaPWZqPWI7VD0wO3BrPW51bGw7cms9cWs9cmg9MDt0az1zaz1udWxsO2lmKG51bGwhPT1maCl7Zm9yKGI9XG4wO2I8ZmgubGVuZ3RoO2IrKylpZihjPWZoW2JdLGQ9Yy5pbnRlcmxlYXZlZCxudWxsIT09ZCl7Yy5pbnRlcmxlYXZlZD1udWxsO3ZhciBlPWQubmV4dCxmPWMucGVuZGluZztpZihudWxsIT09Zil7dmFyIGc9Zi5uZXh0O2YubmV4dD1lO2QubmV4dD1nfWMucGVuZGluZz1kfWZoPW51bGx9cmV0dXJuIGF9XG5mdW5jdGlvbiBNayhhLGIpe2Rve3ZhciBjPVk7dHJ5eyRnKCk7RmguY3VycmVudD1SaDtpZihJaCl7Zm9yKHZhciBkPU0ubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9SWg9ITF9SGg9MDtPPU49TT1udWxsO0poPSExO0toPTA7bmsuY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Q9MTtwaz1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVo7aC5mbGFnc3w9MzI3Njg7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9ayxtPWgscT1tLnRhZztpZigwPT09KG0ubW9kZSYxKSYmKDA9PT1xfHwxMT09PXF8fDE1PT09cSkpe3ZhciByPW0uYWx0ZXJuYXRlO3I/KG0udXBkYXRlUXVldWU9ci51cGRhdGVRdWV1ZSxtLm1lbW9pemVkU3RhdGU9ci5tZW1vaXplZFN0YXRlLFxubS5sYW5lcz1yLmxhbmVzKToobS51cGRhdGVRdWV1ZT1udWxsLG0ubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgeT1VaShnKTtpZihudWxsIT09eSl7eS5mbGFncyY9LTI1NztWaSh5LGcsaCxmLGIpO3kubW9kZSYxJiZTaShmLGwsYik7Yj15O2s9bDt2YXIgbj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1uKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO2IudXBkYXRlUXVldWU9dH1lbHNlIG4uYWRkKGspO2JyZWFrIGF9ZWxzZXtpZigwPT09KGImMSkpe1NpKGYsbCxiKTt0aigpO2JyZWFrIGF9az1FcnJvcihwKDQyNikpfX1lbHNlIGlmKEkmJmgubW9kZSYxKXt2YXIgSj1VaShnKTtpZihudWxsIT09Sil7MD09PShKLmZsYWdzJjY1NTM2KSYmKEouZmxhZ3N8PTI1Nik7VmkoSixnLGgsZixiKTtKZyhKaShrLGgpKTticmVhayBhfX1mPWs9SmkoayxoKTs0IT09VCYmKFQ9Mik7bnVsbD09PXNrP3NrPVtmXTpzay5wdXNoKGYpO2Y9Zztkb3tzd2l0Y2goZi50YWcpe2Nhc2UgMzpmLmZsYWdzfD02NTUzNjtcbmImPS1iO2YubGFuZXN8PWI7dmFyIHg9TmkoZixrLGIpO3BoKGYseCk7YnJlYWsgYTtjYXNlIDE6aD1rO3ZhciB3PWYudHlwZSx1PWYuc3RhdGVOb2RlO2lmKDA9PT0oZi5mbGFncyYxMjgpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHUuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Uml8fCFSaS5oYXModSkpKSl7Zi5mbGFnc3w9NjU1MzY7YiY9LWI7Zi5sYW5lc3w9Yjt2YXIgRj1RaShmLGgsYik7cGgoZixGKTticmVhayBhfX1mPWYucmV0dXJufXdoaWxlKG51bGwhPT1mKX1TayhjKX1jYXRjaChuYSl7Yj1uYTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIEprKCl7dmFyIGE9bWsuY3VycmVudDttay5jdXJyZW50PVJoO3JldHVybiBudWxsPT09YT9SaDphfVxuZnVuY3Rpb24gdGooKXtpZigwPT09VHx8Mz09PVR8fDI9PT1UKVQ9NDtudWxsPT09UXx8MD09PShyaCYyNjg0MzU0NTUpJiYwPT09KHFrJjI2ODQzNTQ1NSl8fENrKFEsWil9ZnVuY3Rpb24gSWsoYSxiKXt2YXIgYz1LO0t8PTI7dmFyIGQ9SmsoKTtpZihRIT09YXx8WiE9PWIpdWs9bnVsbCxLayhhLGIpO2RvIHRyeXtUaygpO2JyZWFrfWNhdGNoKGUpe01rKGEsZSl9d2hpbGUoMSk7JGcoKTtLPWM7bWsuY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHAoMjYxKSk7UT1udWxsO1o9MDtyZXR1cm4gVH1mdW5jdGlvbiBUaygpe2Zvcig7bnVsbCE9PVk7KVVrKFkpfWZ1bmN0aW9uIExrKCl7Zm9yKDtudWxsIT09WSYmIWNjKCk7KVVrKFkpfWZ1bmN0aW9uIFVrKGEpe3ZhciBiPVZrKGEuYWx0ZXJuYXRlLGEsZmopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9TayhhKTpZPWI7bmsuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gU2soYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYzMjc2OCkpe2lmKGM9RWooYyxiLGZqKSxudWxsIT09Yyl7WT1jO3JldHVybn19ZWxzZXtjPUlqKGMsYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTMyNzY3O1k9YztyZXR1cm59aWYobnVsbCE9PWEpYS5mbGFnc3w9MzI3NjgsYS5zdWJ0cmVlRmxhZ3M9MCxhLmRlbGV0aW9ucz1udWxsO2Vsc2V7VD02O1k9bnVsbDtyZXR1cm59fWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09VCYmKFQ9NSl9ZnVuY3Rpb24gUGsoYSxiLGMpe3ZhciBkPUMsZT1vay50cmFuc2l0aW9uO3RyeXtvay50cmFuc2l0aW9uPW51bGwsQz0xLFdrKGEsYixjLGQpfWZpbmFsbHl7b2sudHJhbnNpdGlvbj1lLEM9ZH1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFdrKGEsYixjLGQpe2RvIEhrKCk7d2hpbGUobnVsbCE9PXdrKTtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtjPWEuZmluaXNoZWRXb3JrO3ZhciBlPWEuZmluaXNoZWRMYW5lcztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IocCgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tQcmlvcml0eT0wO3ZhciBmPWMubGFuZXN8Yy5jaGlsZExhbmVzO0JjKGEsZik7YT09PVEmJihZPVE9bnVsbCxaPTApOzA9PT0oYy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJjA9PT0oYy5mbGFncyYyMDY0KXx8dmt8fCh2az0hMCxGayhoYyxmdW5jdGlvbigpe0hrKCk7cmV0dXJuIG51bGx9KSk7Zj0wIT09KGMuZmxhZ3MmMTU5OTApO2lmKDAhPT0oYy5zdWJ0cmVlRmxhZ3MmMTU5OTApfHxmKXtmPW9rLnRyYW5zaXRpb247b2sudHJhbnNpdGlvbj1udWxsO1xudmFyIGc9QztDPTE7dmFyIGg9SztLfD00O25rLmN1cnJlbnQ9bnVsbDtPaihhLGMpO2RrKGMsYSk7T2UoRGYpO2RkPSEhQ2Y7RGY9Q2Y9bnVsbDthLmN1cnJlbnQ9YztoayhjLGEsZSk7ZGMoKTtLPWg7Qz1nO29rLnRyYW5zaXRpb249Zn1lbHNlIGEuY3VycmVudD1jO3ZrJiYodms9ITEsd2s9YSx4az1lKTtmPWEucGVuZGluZ0xhbmVzOzA9PT1mJiYoUmk9bnVsbCk7bWMoYy5zdGF0ZU5vZGUsZCk7RGsoYSxCKCkpO2lmKG51bGwhPT1iKWZvcihkPWEub25SZWNvdmVyYWJsZUVycm9yLGM9MDtjPGIubGVuZ3RoO2MrKyllPWJbY10sZChlLnZhbHVlLHtjb21wb25lbnRTdGFjazplLnN0YWNrLGRpZ2VzdDplLmRpZ2VzdH0pO2lmKE9pKXRocm93IE9pPSExLGE9UGksUGk9bnVsbCxhOzAhPT0oeGsmMSkmJjAhPT1hLnRhZyYmSGsoKTtmPWEucGVuZGluZ0xhbmVzOzAhPT0oZiYxKT9hPT09ems/eWsrKzooeWs9MCx6az1hKTp5az0wO2pnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBIaygpe2lmKG51bGwhPT13ayl7dmFyIGE9RGMoeGspLGI9b2sudHJhbnNpdGlvbixjPUM7dHJ5e29rLnRyYW5zaXRpb249bnVsbDtDPTE2PmE/MTY6YTtpZihudWxsPT09d2spdmFyIGQ9ITE7ZWxzZXthPXdrO3drPW51bGw7eGs9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMzEpKTt2YXIgZT1LO0t8PTQ7Zm9yKFY9YS5jdXJyZW50O251bGwhPT1WOyl7dmFyIGY9VixnPWYuY2hpbGQ7aWYoMCE9PShWLmZsYWdzJjE2KSl7dmFyIGg9Zi5kZWxldGlvbnM7aWYobnVsbCE9PWgpe2Zvcih2YXIgaz0wO2s8aC5sZW5ndGg7aysrKXt2YXIgbD1oW2tdO2ZvcihWPWw7bnVsbCE9PVY7KXt2YXIgbT1WO3N3aXRjaChtLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpQaig4LG0sZil9dmFyIHE9bS5jaGlsZDtpZihudWxsIT09cSlxLnJldHVybj1tLFY9cTtlbHNlIGZvcig7bnVsbCE9PVY7KXttPVY7dmFyIHI9bS5zaWJsaW5nLHk9bS5yZXR1cm47U2oobSk7aWYobT09PVxubCl7Vj1udWxsO2JyZWFrfWlmKG51bGwhPT1yKXtyLnJldHVybj15O1Y9cjticmVha31WPXl9fX12YXIgbj1mLmFsdGVybmF0ZTtpZihudWxsIT09bil7dmFyIHQ9bi5jaGlsZDtpZihudWxsIT09dCl7bi5jaGlsZD1udWxsO2Rve3ZhciBKPXQuc2libGluZzt0LnNpYmxpbmc9bnVsbDt0PUp9d2hpbGUobnVsbCE9PXQpfX1WPWZ9fWlmKDAhPT0oZi5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1nKWcucmV0dXJuPWYsVj1nO2Vsc2UgYjpmb3IoO251bGwhPT1WOyl7Zj1WO2lmKDAhPT0oZi5mbGFncyYyMDQ4KSlzd2l0Y2goZi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UGooOSxmLGYucmV0dXJuKX12YXIgeD1mLnNpYmxpbmc7aWYobnVsbCE9PXgpe3gucmV0dXJuPWYucmV0dXJuO1Y9eDticmVhayBifVY9Zi5yZXR1cm59fXZhciB3PWEuY3VycmVudDtmb3IoVj13O251bGwhPT1WOyl7Zz1WO3ZhciB1PWcuY2hpbGQ7aWYoMCE9PShnLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PVxudSl1LnJldHVybj1nLFY9dTtlbHNlIGI6Zm9yKGc9dztudWxsIT09Vjspe2g9VjtpZigwIT09KGguZmxhZ3MmMjA0OCkpdHJ5e3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig5LGgpfX1jYXRjaChuYSl7VyhoLGgucmV0dXJuLG5hKX1pZihoPT09Zyl7Vj1udWxsO2JyZWFrIGJ9dmFyIEY9aC5zaWJsaW5nO2lmKG51bGwhPT1GKXtGLnJldHVybj1oLnJldHVybjtWPUY7YnJlYWsgYn1WPWgucmV0dXJufX1LPWU7amcoKTtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Qb3N0Q29tbWl0RmliZXJSb290KGtjLGEpfWNhdGNoKG5hKXt9ZD0hMH1yZXR1cm4gZH1maW5hbGx5e0M9Yyxvay50cmFuc2l0aW9uPWJ9fXJldHVybiExfWZ1bmN0aW9uIFhrKGEsYixjKXtiPUppKGMsYik7Yj1OaShhLGIsMSk7YT1uaChhLGIsMSk7Yj1SKCk7bnVsbCE9PWEmJihBYyhhLDEsYiksRGsoYSxiKSl9XG5mdW5jdGlvbiBXKGEsYixjKXtpZigzPT09YS50YWcpWGsoYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7WGsoYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Uml8fCFSaS5oYXMoZCkpKXthPUppKGMsYSk7YT1RaShiLGEsMSk7Yj1uaChiLGEsMSk7YT1SKCk7bnVsbCE9PWImJihBYyhiLDEsYSksRGsoYixhKSk7YnJlYWt9fWI9Yi5yZXR1cm59fVxuZnVuY3Rpb24gVGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPVIoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7UT09PWEmJihaJmMpPT09YyYmKDQ9PT1UfHwzPT09VCYmKFomMTMwMDIzNDI0KT09PVomJjUwMD5CKCktZms/S2soYSwwKTpya3w9Yyk7RGsoYSxiKX1mdW5jdGlvbiBZayhhLGIpezA9PT1iJiYoMD09PShhLm1vZGUmMSk/Yj0xOihiPXNjLHNjPDw9MSwwPT09KHNjJjEzMDAyMzQyNCkmJihzYz00MTk0MzA0KSkpO3ZhciBjPVIoKTthPWloKGEsYik7bnVsbCE9PWEmJihBYyhhLGIsYyksRGsoYSxjKSl9ZnVuY3Rpb24gdWooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO1lrKGEsYyl9XG5mdW5jdGlvbiBiayhhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtZayhhLGMpfXZhciBWaztcblZrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8V2YuY3VycmVudClkaD0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIGRoPSExLHlqKGEsYixjKTtkaD0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIGRoPSExLEkmJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmdWcoYixuZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO2lqKGEsYik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1ZZihiLEguY3VycmVudCk7Y2goYixjKTtlPU5oKG51bGwsYixkLGEsZSxjKTt2YXIgZj1TaCgpO2IuZmxhZ3N8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mPyhiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9XG5udWxsLFpmKGQpPyhmPSEwLGNnKGIpKTpmPSExLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGwsa2goYiksZS51cGRhdGVyPUVpLGIuc3RhdGVOb2RlPWUsZS5fcmVhY3RJbnRlcm5hbHM9YixJaShiLGQsYSxjKSxiPWpqKG51bGwsYixkLCEwLGYsYykpOihiLnRhZz0wLEkmJmYmJnZnKGIpLFhpKG51bGwsYixlLGMpLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxNjpkPWIuZWxlbWVudFR5cGU7YTp7aWooYSxiKTthPWIucGVuZGluZ1Byb3BzO2U9ZC5faW5pdDtkPWUoZC5fcGF5bG9hZCk7Yi50eXBlPWQ7ZT1iLnRhZz1aayhkKTthPUNpKGQsYSk7c3dpdGNoKGUpe2Nhc2UgMDpiPWNqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1oaihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVlpKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9JGkobnVsbCxiLGQsQ2koZC50eXBlLGEpLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgzMDYsXG5kLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpDaShkLGUpLGNqKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpDaShkLGUpLGhqKGEsYixkLGUsYyk7Y2FzZSAzOmE6e2tqKGIpO2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzg3KSk7ZD1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRTdGF0ZTtlPWYuZWxlbWVudDtsaChhLGIpO3FoKGIsZCxudWxsLGMpO3ZhciBnPWIubWVtb2l6ZWRTdGF0ZTtkPWcuZWxlbWVudDtpZihmLmlzRGVoeWRyYXRlZClpZihmPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOiExLGNhY2hlOmcuY2FjaGUscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpnLnBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc30sYi51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9XG5mLGIubWVtb2l6ZWRTdGF0ZT1mLGIuZmxhZ3MmMjU2KXtlPUppKEVycm9yKHAoNDIzKSksYik7Yj1saihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBpZihkIT09ZSl7ZT1KaShFcnJvcihwKDQyNCkpLGIpO2I9bGooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgZm9yKHlnPUxmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCkseGc9YixJPSEwLHpnPW51bGwsYz1WZyhiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDQwOTYsYz1jLnNpYmxpbmc7ZWxzZXtJZygpO2lmKGQ9PT1lKXtiPVppKGEsYixjKTticmVhayBhfVhpKGEsYixkLGMpfWI9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEFoKGIpLG51bGw9PT1hJiZFZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLEVmKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZFZihkLGYpJiYoYi5mbGFnc3w9MzIpLFxuZ2ooYSxiKSxYaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkVnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gb2ooYSxiLGMpO2Nhc2UgNDpyZXR1cm4geWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9VWcoYixudWxsLGQsYyk6WGkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpDaShkLGUpLFlpKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBYaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRQcm9wcztcbmc9ZS52YWx1ZTtHKFdnLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWc7aWYobnVsbCE9PWYpaWYoSGUoZi52YWx1ZSxnKSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFXZi5jdXJyZW50KXtiPVppKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihmPWIuY2hpbGQsbnVsbCE9PWYmJihmLnJldHVybj1iKTtudWxsIT09Zjspe3ZhciBoPWYuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1oKXtnPWYuY2hpbGQ7Zm9yKHZhciBrPWguZmlyc3RDb250ZXh0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCl7aWYoMT09PWYudGFnKXtrPW1oKC0xLGMmLWMpO2sudGFnPTI7dmFyIGw9Zi51cGRhdGVRdWV1ZTtpZihudWxsIT09bCl7bD1sLnNoYXJlZDt2YXIgbT1sLnBlbmRpbmc7bnVsbD09PW0/ay5uZXh0PWs6KGsubmV4dD1tLm5leHQsbS5uZXh0PWspO2wucGVuZGluZz1rfX1mLmxhbmVzfD1jO2s9Zi5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLmxhbmVzfD1jKTtiaChmLnJldHVybixcbmMsYik7aC5sYW5lc3w9YzticmVha31rPWsubmV4dH19ZWxzZSBpZigxMD09PWYudGFnKWc9Zi50eXBlPT09Yi50eXBlP251bGw6Zi5jaGlsZDtlbHNlIGlmKDE4PT09Zi50YWcpe2c9Zi5yZXR1cm47aWYobnVsbD09PWcpdGhyb3cgRXJyb3IocCgzNDEpKTtnLmxhbmVzfD1jO2g9Zy5hbHRlcm5hdGU7bnVsbCE9PWgmJihoLmxhbmVzfD1jKTtiaChnLGMsYik7Zz1mLnNpYmxpbmd9ZWxzZSBnPWYuY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49ZjtlbHNlIGZvcihnPWY7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWY9Zy5zaWJsaW5nO2lmKG51bGwhPT1mKXtmLnJldHVybj1nLnJldHVybjtnPWY7YnJlYWt9Zz1nLnJldHVybn1mPWd9WGkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjaChiLGMpLGU9ZWgoZSksZD1kKGUpLGIuZmxhZ3N8PTEsWGkoYSxiLGQsYyksXG5iLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGQ9Yi50eXBlLGU9Q2koZCxiLnBlbmRpbmdQcm9wcyksZT1DaShkLnR5cGUsZSksJGkoYSxiLGQsZSxjKTtjYXNlIDE1OnJldHVybiBiaihhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksaWooYSxiKSxiLnRhZz0xLFpmKGQpPyhhPSEwLGNnKGIpKTphPSExLGNoKGIsYyksR2koYixkLGUpLElpKGIsZCxlLGMpLGpqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4geGooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGRqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO307ZnVuY3Rpb24gRmsoYSxiKXtyZXR1cm4gYWMoYSxiKX1cbmZ1bmN0aW9uICRrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIEJnKGEsYixjLGQpe3JldHVybiBuZXcgJGsoYSxiLGMsZCl9ZnVuY3Rpb24gYWooYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uIFprKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09RGEpcmV0dXJuIDExO2lmKGE9PT1HYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBQZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUJnKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBSZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYWooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuIFRnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgemE6Zz04O2V8PTg7YnJlYWs7Y2FzZSBBYTpyZXR1cm4gYT1CZygxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPUFhLGEubGFuZXM9ZixhO2Nhc2UgRWE6cmV0dXJuIGE9QmcoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9RWEsYS5sYW5lcz1mLGE7Y2FzZSBGYTpyZXR1cm4gYT1CZygxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1GYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiBwaihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQmE6Zz0xMDticmVhayBhO2Nhc2UgQ2E6Zz05O2JyZWFrIGE7Y2FzZSBEYTpnPTExO1xuYnJlYWsgYTtjYXNlIEdhOmc9MTQ7YnJlYWsgYTtjYXNlIEhhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1CZyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIFRnKGEsYixjLGQpe2E9QmcoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHBqKGEsYixjLGQpe2E9QmcoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXtpc0hpZGRlbjohMX07cmV0dXJuIGF9ZnVuY3Rpb24gUWcoYSxiLGMpe2E9QmcoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gU2coYSxiLGMpe2I9QmcoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBhbChhLGIsYyxkLGUpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMuY2FsbGJhY2tOb2RlPXRoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPXpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPXpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPXpjKDApO3RoaXMuaWRlbnRpZmllclByZWZpeD1kO3RoaXMub25SZWNvdmVyYWJsZUVycm9yPWU7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVxubnVsbH1mdW5jdGlvbiBibChhLGIsYyxkLGUsZixnLGgsayl7YT1uZXcgYWwoYSxiLGMsaCxrKTsxPT09Yj8oYj0xLCEwPT09ZiYmKGJ8PTgpKTpiPTA7Zj1CZygzLG51bGwsbnVsbCxiKTthLmN1cnJlbnQ9ZjtmLnN0YXRlTm9kZT1hO2YubWVtb2l6ZWRTdGF0ZT17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDpjLGNhY2hlOm51bGwsdHJhbnNpdGlvbnM6bnVsbCxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOm51bGx9O2toKGYpO3JldHVybiBhfWZ1bmN0aW9uIGNsKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6d2Esa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBkbChhKXtpZighYSlyZXR1cm4gVmY7YT1hLl9yZWFjdEludGVybmFsczthOntpZihWYihhKSE9PWF8fDEhPT1hLnRhZyl0aHJvdyBFcnJvcihwKDE3MCkpO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDM6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAxOmlmKFpmKGIudHlwZSkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dGhyb3cgRXJyb3IocCgxNzEpKTt9aWYoMT09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoWmYoYykpcmV0dXJuIGJnKGEsYyxiKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGVsKGEsYixjLGQsZSxmLGcsaCxrKXthPWJsKGMsZCwhMCxhLGUsZixnLGgsayk7YS5jb250ZXh0PWRsKG51bGwpO2M9YS5jdXJyZW50O2Q9UigpO2U9eWkoYyk7Zj1taChkLGUpO2YuY2FsbGJhY2s9dm9pZCAwIT09YiYmbnVsbCE9PWI/YjpudWxsO25oKGMsZixlKTthLmN1cnJlbnQubGFuZXM9ZTtBYyhhLGUsZCk7RGsoYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBmbChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1SKCksZz15aShlKTtjPWRsKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9bWgoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7YT1uaChlLGIsZyk7bnVsbCE9PWEmJihnaShhLGUsZyxmKSxvaChhLGUsZykpO3JldHVybiBnfVxuZnVuY3Rpb24gZ2woYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBobChhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gaWwoYSxiKXtobChhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmaGwoYSxiKX1mdW5jdGlvbiBqbCgpe3JldHVybiBudWxsfXZhciBrbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVwb3J0RXJyb3I/cmVwb3J0RXJyb3I6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihhKX07ZnVuY3Rpb24gbGwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5tbC5wcm90b3R5cGUucmVuZGVyPWxsLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoNDA5KSk7ZmwoYSxiLG51bGwsbnVsbCl9O21sLnByb3RvdHlwZS51bm1vdW50PWxsLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGwhPT1hKXt0aGlzLl9pbnRlcm5hbFJvb3Q9bnVsbDt2YXIgYj1hLmNvbnRhaW5lckluZm87UmsoZnVuY3Rpb24oKXtmbChudWxsLGEsbnVsbCxudWxsKX0pO2JbdWZdPW51bGx9fTtmdW5jdGlvbiBtbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm1sLnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbj1mdW5jdGlvbihhKXtpZihhKXt2YXIgYj1IYygpO2E9e2Jsb2NrZWRPbjpudWxsLHRhcmdldDphLHByaW9yaXR5OmJ9O2Zvcih2YXIgYz0wO2M8UWMubGVuZ3RoJiYwIT09YiYmYjxRY1tjXS5wcmlvcml0eTtjKyspO1FjLnNwbGljZShjLDAsYSk7MD09PWMmJlZjKGEpfX07ZnVuY3Rpb24gbmwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUpfWZ1bmN0aW9uIG9sKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBwbCgpe31cbmZ1bmN0aW9uIHFsKGEsYixjLGQsZSl7aWYoZSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBmPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWdsKGcpO2YuY2FsbChhKX19dmFyIGc9ZWwoYixkLGEsMCxudWxsLCExLCExLFwiXCIscGwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1nO2FbdWZdPWcuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7UmsoKTtyZXR1cm4gZ31mb3IoO2U9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoZSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBoPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWdsKGspO2guY2FsbChhKX19dmFyIGs9YmwoYSwwLCExLG51bGwsbnVsbCwhMSwhMSxcIlwiLHBsKTthLl9yZWFjdFJvb3RDb250YWluZXI9azthW3VmXT1rLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1JrKGZ1bmN0aW9uKCl7ZmwoYixrLGMsZCl9KTtyZXR1cm4ga31cbmZ1bmN0aW9uIHJsKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWY7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWdsKGcpO2guY2FsbChhKX19ZmwoYixnLGEsZSl9ZWxzZSBnPXFsKGMsYixhLGUsZCk7cmV0dXJuIGdsKGcpfUVjPWZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAzOnZhciBiPWEuc3RhdGVOb2RlO2lmKGIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7dmFyIGM9dGMoYi5wZW5kaW5nTGFuZXMpOzAhPT1jJiYoQ2MoYixjfDEpLERrKGIsQigpKSwwPT09KEsmNikmJihHaj1CKCkrNTAwLGpnKCkpKX1icmVhaztjYXNlIDEzOlJrKGZ1bmN0aW9uKCl7dmFyIGI9aWgoYSwxKTtpZihudWxsIT09Yil7dmFyIGM9UigpO2dpKGIsYSwxLGMpfX0pLGlsKGEsMSl9fTtcbkZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWloKGEsMTM0MjE3NzI4KTtpZihudWxsIT09Yil7dmFyIGM9UigpO2dpKGIsYSwxMzQyMTc3MjgsYyl9aWwoYSwxMzQyMTc3MjgpfX07R2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9eWkoYSksYz1paChhLGIpO2lmKG51bGwhPT1jKXt2YXIgZD1SKCk7Z2koYyxhLGIsZCl9aWwoYSxiKX19O0hjPWZ1bmN0aW9uKCl7cmV0dXJuIEN9O0ljPWZ1bmN0aW9uKGEsYil7dmFyIGM9Qzt0cnl7cmV0dXJuIEM9YSxiKCl9ZmluYWxseXtDPWN9fTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YmIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHAoOTApKTtXYShkKTtiYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9UWs7SGI9Ums7XG52YXIgc2w9e3VzaW5nQ2xpZW50RW50cnlQb2ludDohMSxFdmVudHM6W0NiLHVlLERiLEViLEZiLFFrXX0sdGw9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOldjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTguMy4xXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB1bD17YnVuZGxlVHlwZTp0bC5idW5kbGVUeXBlLHZlcnNpb246dGwudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOnRsLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6dGwucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldEVycm9ySGFuZGxlcjpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPVpiKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp0bC5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5qbCxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsLHJlY29uY2lsZXJWZXJzaW9uOlwiMTguMy4xLW5leHQtZjEzMzhmODA4MC0yMDI0MDQyNlwifTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHZsPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZighdmwuaXNEaXNhYmxlZCYmdmwuc3VwcG9ydHNGaWJlcil0cnl7a2M9dmwuaW5qZWN0KHVsKSxsYz12bH1jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9c2w7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFubChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBjbChhLGIsbnVsbCxjKX07ZXhwb3J0cy5jcmVhdGVSb290PWZ1bmN0aW9uKGEsYil7aWYoIW5sKGEpKXRocm93IEVycm9yKHAoMjk5KSk7dmFyIGM9ITEsZD1cIlwiLGU9a2w7bnVsbCE9PWImJnZvaWQgMCE9PWImJighMD09PWIudW5zdGFibGVfc3RyaWN0TW9kZSYmKGM9ITApLHZvaWQgMCE9PWIuaWRlbnRpZmllclByZWZpeCYmKGQ9Yi5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1iLm9uUmVjb3ZlcmFibGVFcnJvciYmKGU9Yi5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWJsKGEsMSwhMSxudWxsLG51bGwsYywhMSxkLGUpO2FbdWZdPWIuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7cmV0dXJuIG5ldyBsbChiKX07XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHAoMTg4KSk7YT1PYmplY3Qua2V5cyhhKS5qb2luKFwiLFwiKTt0aHJvdyBFcnJvcihwKDI2OCxhKSk7fWE9WmIoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhKXtyZXR1cm4gUmsoYSl9O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIW9sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHJsKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3Q9ZnVuY3Rpb24oYSxiLGMpe2lmKCFubChhKSl0aHJvdyBFcnJvcihwKDQwNSkpO3ZhciBkPW51bGwhPWMmJmMuaHlkcmF0ZWRTb3VyY2VzfHxudWxsLGU9ITEsZj1cIlwiLGc9a2w7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJighMD09PWMudW5zdGFibGVfc3RyaWN0TW9kZSYmKGU9ITApLHZvaWQgMCE9PWMuaWRlbnRpZmllclByZWZpeCYmKGY9Yy5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1jLm9uUmVjb3ZlcmFibGVFcnJvciYmKGc9Yy5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWVsKGIsbnVsbCxhLDEsbnVsbCE9Yz9jOm51bGwsZSwhMSxmLGcpO2FbdWZdPWIuY3VycmVudDtzZihhKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspYz1kW2FdLGU9Yy5fZ2V0VmVyc2lvbixlPWUoYy5fc291cmNlKSxudWxsPT1iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtjLGVdOmIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGMsXG5lKTtyZXR1cm4gbmV3IG1sKGIpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIW9sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHJsKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhSayhmdW5jdGlvbigpe3JsKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVt1Zl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVFrO1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighb2woYykpdGhyb3cgRXJyb3IocCgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcihwKDM4KSk7cmV0dXJuIHJsKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxOC4zLjEtbmV4dC1mMTMzOGY4MDgwLTIwMjQwNDI2XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWN0LXJlZHV4LnByb2R1Y3Rpb24ubWluLmNqcycpXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhY3QtcmVkdXguZGV2ZWxvcG1lbnQuY2pzJylcbn0iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2Z1bmN0aW9uIFgoKXt0aHJvdyBFcnJvcihcImFjdCguLi4pIGlzIG5vdCBzdXBwb3J0ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMgb2YgUmVhY3QuXCIpO31cbmV4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7ZXhwb3J0cy5Qcm9maWxlcj1yO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1HO2V4cG9ydHMuU3RyaWN0TW9kZT1xO2V4cG9ydHMuU3VzcGVuc2U9dztcbmV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztleHBvcnRzLmFjdD1YO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PVg7ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07XG5leHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRGVmZXJyZWRWYWx1ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZURlZmVycmVkVmFsdWUoYSl9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJZD1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlSWQoKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGUpfTtleHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07XG5leHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZHVjZXIoYSxiLGUpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN0YXRlKGEpfTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN5bmNFeHRlcm5hbFN0b3JlKGEsYixlKX07ZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjMuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FwcC5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FwcC5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9ib29rLWNhcmQuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9ib29rLWNhcmQuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYm9va3MtbGlzdC5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Jvb2tzLWxpc3Quc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYm9vay1wYWdlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYm9vay1wYWdlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2hlYWRlci5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2hlYWRlci5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9sb2FkaW5nLXBhZ2Uuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9sb2FkaW5nLXBhZ2Uuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJvb2tzQ291bnQgPSBleHBvcnRzLkJhc2VVcmwgPSBleHBvcnRzLkFwaUtleSA9IHZvaWQgMDtcbmV4cG9ydHMuQXBpS2V5ID0gcHJvY2Vzcy5lbnYuQXBpS2V5O1xuZXhwb3J0cy5CYXNlVXJsID0gcHJvY2Vzcy5lbnYuQmFzZVVybCB8fCAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYm9va3MvdjEvdm9sdW1lcyc7XG5leHBvcnRzLkJvb2tzQ291bnQgPSBwcm9jZXNzLmVudi5Cb29rc0NvdW50O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXBwID0gdm9pZCAwO1xudmFyIHJlYWN0XzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciByZWFjdF9yZWR1eF8xID0gcmVxdWlyZShcInJlYWN0LXJlZHV4XCIpO1xudmFyIGhlYWRlcl8xID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9oZWFkZXIvaGVhZGVyXCIpO1xudmFyIGJvb2tzX2xpc3RfMSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvYm9vay1saXN0L2Jvb2tzLWxpc3RcIik7XG52YXIgYm9va19wYWdlXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL2Jvb2stcGFnZS9ib29rLXBhZ2VcIik7XG52YXIgbG9hZGluZ19wYWdlXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL2xvYWRpbmctcGFnZS9sb2FkaW5nLXBhZ2VcIik7XG5yZXF1aXJlKFwiLi9hcHAuc2Nzc1wiKTtcbmZ1bmN0aW9uIEFwcCgpIHtcbiAgICB2YXIgX2EgPSAoMCwgcmVhY3RfMS51c2VTdGF0ZSkoMCksIHRvdGFsSXRlbXMgPSBfYVswXSwgc2V0VG90YWxJdGVtcyA9IF9hWzFdO1xuICAgIHZhciBfYiA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKSgpLCBib29rcyA9IF9iWzBdLCBzZXRCb29rcyA9IF9iWzFdO1xuICAgIHZhciBjdXJyZW50UGFnZSA9ICgwLCByZWFjdF9yZWR1eF8xLnVzZVNlbGVjdG9yKShmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlLnBhZ2UuUGFnZTsgfSk7XG4gICAgdmFyIHJlbmRlclBhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN3aXRjaCAoY3VycmVudFBhZ2UpIHtcbiAgICAgICAgICAgIGNhc2UgJ2Jvb2stbGlzdCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChib29rc19saXN0XzEuQm9va0xpc3QsIHsgYm9va3M6IGJvb2tzLCBzZXRCb29rczogc2V0Qm9va3MsIHRvdGFsSXRlbXM6IHRvdGFsSXRlbXMgfSkpO1xuICAgICAgICAgICAgY2FzZSAnYm9vay1wYWdlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoYm9va19wYWdlXzEuQm9va1BhZ2UsIG51bGwpO1xuICAgICAgICAgICAgY2FzZSAnbG9hZGluZy1wYWdlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQobG9hZGluZ19wYWdlXzEuTG9hZ2luZ1BhZ2UsIG51bGwpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gY29uc3QgZGlzcGF0Y2ggPSB1c2VBcHBEaXNwYXRjaCgpXG4gICAgLy8gY29uc3QgYXV0aCA9IHVzZUF1dGgoKVxuICAgIC8vIHN3aXRjaCAoYXV0aC5zdGF0ZSkge1xuICAgIC8vICAgICBjYXNlIEF1dGhTdGF0ZS5Mb2FkaW5nOlxuICAgIC8vICAgICAgICAgcmV0dXJuIDw+PC8+XG4gICAgLy8gICAgIGNhc2UgQXV0aFN0YXRlLk5vdEF1dGhlZDpcbiAgICAvLyAgICAgICAgIGRpc3BhdGNoKHNldFVzZXIodW5kZWZpbmVkKSlcbiAgICAvLyAgICAgICAgIGJyZWFrXG4gICAgLy8gICAgIGNhc2UgQXV0aFN0YXRlLkF1dGhlZDpcbiAgICAvLyAgICAgICAgIGRpc3BhdGNoKFxuICAgIC8vICAgICAgICAgICAgIHNldFVzZXIoe1xuICAgIC8vICAgICAgICAgICAgICAgICBuYW1lOiBhdXRoLmRhdGE/LmRpc3BsYXlOYW1lLFxuICAgIC8vICAgICAgICAgICAgICAgICBpZDogYXV0aC5kYXRhPy5lbWFpbCxcbiAgICAvLyAgICAgICAgICAgICAgICAgcGhvdG9Vcmw6IGF1dGguZGF0YT8ucGhvdG9VUkwsXG4gICAgLy8gICAgICAgICAgICAgfSlcbiAgICAvLyAgICAgICAgIClcbiAgICAvLyAgICAgICAgIGJyZWFrXG4gICAgLy8gfVxuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQocmVhY3RfMS5kZWZhdWx0LkZyYWdtZW50LCBudWxsLFxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChoZWFkZXJfMS5IZWFkZXIsIHsgc2V0Qm9va3M6IHNldEJvb2tzLCBzZXRUb3RhbEl0ZW1zOiBzZXRUb3RhbEl0ZW1zIH0pLFxuICAgICAgICByZW5kZXJQYWdlKCkpKTtcbn1cbmV4cG9ydHMuQXBwID0gQXBwO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJvb2tDYXJkID0gdm9pZCAwO1xudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciByZWFjdF9yZWR1eF8xID0gcmVxdWlyZShcInJlYWN0LXJlZHV4XCIpO1xudmFyIHBhZ2VTbGljZV8xID0gcmVxdWlyZShcIi4uLy4uL3N0b3JlL3NsaWNlcy9wYWdlU2xpY2VcIik7XG52YXIgY3VycmVudEJvb2tTbGljZV8xID0gcmVxdWlyZShcIi4uLy4uL3N0b3JlL3NsaWNlcy9jdXJyZW50Qm9va1NsaWNlXCIpO1xucmVxdWlyZShcIi4vYm9vay1jYXJkLnNjc3NcIik7XG5mdW5jdGlvbiBCb29rQ2FyZChwcm9wcykge1xuICAgIHZhciB2b2x1bWVJbmZvID0gcHJvcHMuYm9vay52b2x1bWVJbmZvO1xuICAgIHZhciBpbWFnZUxpbmtzID0gdm9sdW1lSW5mby5pbWFnZUxpbmtzLCBjYXRlZ29yaWVzID0gdm9sdW1lSW5mby5jYXRlZ29yaWVzLCB0aXRsZSA9IHZvbHVtZUluZm8udGl0bGUsIGF1dGhvcnMgPSB2b2x1bWVJbmZvLmF1dGhvcnM7XG4gICAgdmFyIGRpc3BhdGNoID0gKDAsIHJlYWN0X3JlZHV4XzEudXNlRGlzcGF0Y2gpKCk7XG4gICAgZnVuY3Rpb24gU2hvd0Jvb2tQYWdlKCkge1xuICAgICAgICBkaXNwYXRjaCgoMCwgY3VycmVudEJvb2tTbGljZV8xLnNldEN1cnJlbnRCb29rKShwcm9wcy5ib29rKSk7XG4gICAgICAgIGRpc3BhdGNoKCgwLCBwYWdlU2xpY2VfMS5TZXRQYWdlKSgnYm9vay1wYWdlJykpO1xuICAgIH1cbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImJvb2tDYXJkQ29udGFpbmVyXCIgfSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiaW1nQ29udGFpbmVyXCIgfSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaW1nXCIsIHsgb25DbGljazogU2hvd0Jvb2tQYWdlLCBzcmM6IChpbWFnZUxpbmtzID09PSBudWxsIHx8IGltYWdlTGlua3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGltYWdlTGlua3MudGh1bWJuYWlsKSA/IGltYWdlTGlua3MudGh1bWJuYWlsIDogKChpbWFnZUxpbmtzID09PSBudWxsIHx8IGltYWdlTGlua3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGltYWdlTGlua3Muc21hbGxUaHVtYm5haWwpID8gaW1hZ2VMaW5rcy5zbWFsbFRodW1ibmFpbCA6IFwiLi9pbWcvRW1wdHlBdmF0YXIuanBnXCIpLCBhbHQ6IFwiQm9va0F2YXRhclwiIH0pKSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiaW5mb0NvbnRhaW5lclwiIH0sXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBcIiwgeyBjbGFzc05hbWU6IFwiY2F0ZWdvcnlcIiB9LCBjYXRlZ29yaWVzID8gY2F0ZWdvcmllcyA6IFwiTm8gY2F0ZWdvcnlcIiksXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImgyXCIsIHsgY2xhc3NOYW1lOiBcImJvb2tOYW1lXCIsIG9uQ2xpY2s6IFNob3dCb29rUGFnZSB9LCB0aXRsZSA/IHRpdGxlIDogXCJObyB0aXRsZVwiKSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaDNcIiwgeyBjbGFzc05hbWU6IFwiYXV0aG9yTmFtZVwiIH0sIGF1dGhvcnMgPyBhdXRob3JzIDogXCJObyBhdXRob3JzXCIpKSkpO1xufVxuZXhwb3J0cy5Cb29rQ2FyZCA9IEJvb2tDYXJkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQm9va0xpc3QgPSB2b2lkIDA7XG52YXIgcmVhY3RfMSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIHJlYWN0X3JlZHV4XzEgPSByZXF1aXJlKFwicmVhY3QtcmVkdXhcIik7XG52YXIgYm9va19jYXJkXzEgPSByZXF1aXJlKFwiLi4vYm9vay1jYXJkL2Jvb2stY2FyZFwiKTtcbnZhciBmb3VuZFNsaWNlXzEgPSByZXF1aXJlKFwiLi4vLi4vc3RvcmUvc2xpY2VzL2ZvdW5kU2xpY2VcIik7XG52YXIgdXJsR2VuZXJhdG9yXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvdXJsR2VuZXJhdG9yXCIpO1xucmVxdWlyZShcIi4vYm9va3MtbGlzdC5zY3NzXCIpO1xuZnVuY3Rpb24gQm9va0xpc3QocHJvcHMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBkaXNwYXRjaCA9ICgwLCByZWFjdF9yZWR1eF8xLnVzZURpc3BhdGNoKSgpO1xuICAgIHZhciBfYSA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKSgzMCksIHN0YXJ0SW5kZXggPSBfYVswXSwgc2V0c3RhcnRpbmRleCA9IF9hWzFdO1xuICAgIHZhciBfYiA9IHByb3BzIHx8IHsgYm9va3M6IFtdLCB0b3RhbEl0ZW1zOiAwIH0sIGJvb2tzID0gX2IuYm9va3MsIHRvdGFsSXRlbXMgPSBfYi50b3RhbEl0ZW1zLCBzZXRCb29rcyA9IF9iLnNldEJvb2tzO1xuICAgIHZhciBzZWFyY2hQYXJhbXNPYmogPSAoMCwgcmVhY3RfcmVkdXhfMS51c2VTZWxlY3RvcikoZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5mb3VuZDsgfSk7XG4gICAgdmFyIExvYWRNb3JlQm9va0NhcmQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZWFyY2hQYXJhbXMsIHJlc3BvbnNlO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCgoMCwgZm91bmRTbGljZV8xLlNldE5ld0luZGV4KShzdGFydEluZGV4KSk7XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFNlYXJjaDogc2VhcmNoUGFyYW1zT2JqLlNlYXJjaCB8fCAnJTIwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIENhdGVnb3JpZXM6IHNlYXJjaFBhcmFtc09iai5DYXRlZ29yaWVzIHx8ICdhbGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgRmlsdGVyOiBzZWFyY2hQYXJhbXNPYmouRmlsdGVyIHx8ICdyZWxldmFuY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnRJbmRleDogc3RhcnRJbmRleCB8fCAwLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCAoMCwgdXJsR2VuZXJhdG9yXzEuR2V0UmVzcG9uc2VGcm9tQm9va0FwaSkoc2VhcmNoUGFyYW1zKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvb2tzICE9IHVuZGVmaW5lZCAmJiByZXNwb25zZS5pdGVtcyAhPSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRCb29rcyhib29rcyA9PT0gbnVsbCB8fCBib29rcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYm9va3MuY29uY2F0KHJlc3BvbnNlLml0ZW1zKSk7XG4gICAgICAgICAgICAgICAgICAgIHNldHN0YXJ0aW5kZXgoc3RhcnRJbmRleCArIDMwKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTsgfTtcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibWFpblwiLCBudWxsLFxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBcIiwgeyBjbGFzc05hbWU6IFwiYm9va3NDb3VudFwiIH0sIHRvdGFsSXRlbXMgIT09IHVuZGVmaW5lZCAmJiB0b3RhbEl0ZW1zID4gMFxuICAgICAgICAgICAgPyAnZm91bmQgJyArIHRvdGFsSXRlbXMgKyAnIHJlc3VsdHMnXG4gICAgICAgICAgICA6ICdObyByZXN1bHRzJyksXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImJvb2tsaXN0Q29udGFpbmVyXCIgfSwgYm9va3MgPT09IG51bGwgfHwgYm9va3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJvb2tzLm1hcChmdW5jdGlvbiAoYm9vaywgaWQpIHsgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChib29rX2NhcmRfMS5Cb29rQ2FyZCwgeyBrZXk6IGlkLCBib29rOiBib29rIH0pKTsgfSkpLFxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJtb3JlQnV0dG9uQ29udGFpbmVyXCIgfSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHsgY2xhc3NOYW1lOiAnbW9yZUJ1dHRvbicsIG9uQ2xpY2s6IExvYWRNb3JlQm9va0NhcmQgfSwgXCJMb2FkIG1vcmVcIikpKSk7XG59XG5leHBvcnRzLkJvb2tMaXN0ID0gQm9va0xpc3Q7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQm9va1BhZ2UgPSB2b2lkIDA7XG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIHJlYWN0X3JlZHV4XzEgPSByZXF1aXJlKFwicmVhY3QtcmVkdXhcIik7XG52YXIgcGFnZVNsaWNlXzEgPSByZXF1aXJlKFwiLi4vLi4vc3RvcmUvc2xpY2VzL3BhZ2VTbGljZVwiKTtcbnJlcXVpcmUoXCIuL2Jvb2stcGFnZS5zY3NzXCIpO1xuZnVuY3Rpb24gQm9va1BhZ2UoKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gKDAsIHJlYWN0X3JlZHV4XzEudXNlRGlzcGF0Y2gpKCk7XG4gICAgdmFyIGN1cnJlbnRCb29rID0gKDAsIHJlYWN0X3JlZHV4XzEudXNlU2VsZWN0b3IpKGZ1bmN0aW9uIChzdGF0ZSkgeyByZXR1cm4gc3RhdGUuY3VycmVudEJvb2suQm9vazsgfSk7XG4gICAgaWYgKCFjdXJyZW50Qm9vaykge1xuICAgICAgICByZXR1cm4gcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgXCJObyBib29rIHNlbGVjdGVkXCIpO1xuICAgIH1cbiAgICB2YXIgdm9sdW1lSW5mbyA9IGN1cnJlbnRCb29rLnZvbHVtZUluZm87XG4gICAgdmFyIGltYWdlTGlua3MgPSB2b2x1bWVJbmZvLmltYWdlTGlua3MsIGNhdGVnb3JpZXMgPSB2b2x1bWVJbmZvLmNhdGVnb3JpZXMsIHRpdGxlID0gdm9sdW1lSW5mby50aXRsZSwgYXV0aG9ycyA9IHZvbHVtZUluZm8uYXV0aG9ycywgZGVzY3JpcHRpb24gPSB2b2x1bWVJbmZvLmRlc2NyaXB0aW9uO1xuICAgIGZ1bmN0aW9uIFNob3dCb29rTGlzdFBhZ2UoKSB7XG4gICAgICAgIGRpc3BhdGNoKCgwLCBwYWdlU2xpY2VfMS5TZXRQYWdlKSgnYm9vay1saXN0JykpO1xuICAgIH1cbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibWFpblwiLCBudWxsLFxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJib29rUGFnZUNvbnRhaW5lclwiIH0sXG4gICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJib29rRmFjZVwiIH0sXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwgeyBzcmM6IChpbWFnZUxpbmtzID09PSBudWxsIHx8IGltYWdlTGlua3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGltYWdlTGlua3MudGh1bWJuYWlsKSA/IGltYWdlTGlua3MudGh1bWJuYWlsIDogKChpbWFnZUxpbmtzID09PSBudWxsIHx8IGltYWdlTGlua3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGltYWdlTGlua3Muc21hbGxUaHVtYm5haWwpID8gaW1hZ2VMaW5rcy5zbWFsbFRodW1ibmFpbCA6IFwiLi9pbWcvRW1wdHlBdmF0YXIuanBnXCIpLCBhbHQ6IFwiQm9va0F2YXRhclwiIH0pKSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImJvb2tpbmZvXCIgfSxcbiAgICAgICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBcIiwgeyBjbGFzc05hbWU6IFwiYm9va01hcFwiLCBvbkNsaWNrOiBTaG93Qm9va0xpc3RQYWdlIH0sXG4gICAgICAgICAgICAgICAgICAgICc+JyxcbiAgICAgICAgICAgICAgICAgICAgXCIgdG8gYm9vay1saXN0XCIpLFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicFwiLCB7IGNsYXNzTmFtZTogXCJib29rTWFwXCIgfSwgY2F0ZWdvcmllcyA/IGNhdGVnb3JpZXMgOiBcIk5vIGNhdGVnb3JpZXNcIiksXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCB7IGNsYXNzTmFtZTogXCJib29rTmFtZVwiIH0sIHRpdGxlID8gdGl0bGUgOiBcIk5vIHRpdGxlXCIpLFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaDNcIiwgeyBjbGFzc05hbWU6IFwiYXV0aG9yTmFtZVwiIH0sIGF1dGhvcnMgPyBhdXRob3JzIDogXCJObyBhdXRob3JzXCIpLFxuICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImRlc2NyaXB0aW9uQ29udGFpbmVyXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIHsgY2xhc3NOYW1lOiBcImRlc2NyaXB0aW9uXCIgfSwgZGVzY3JpcHRpb24gPyBkZXNjcmlwdGlvbiA6IFwiTm8gZGVzY3JpcHRpb25cIikpKSkpKTtcbn1cbmV4cG9ydHMuQm9va1BhZ2UgPSBCb29rUGFnZTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhlYWRlciA9IHZvaWQgMDtcbnZhciByZWFjdF8xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgcmVhY3RfcmVkdXhfMSA9IHJlcXVpcmUoXCJyZWFjdC1yZWR1eFwiKTtcbnZhciB1cmxHZW5lcmF0b3JfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy91cmxHZW5lcmF0b3JcIik7XG52YXIgZm91bmRTbGljZV8xID0gcmVxdWlyZShcIi4uLy4uL3N0b3JlL3NsaWNlcy9mb3VuZFNsaWNlXCIpO1xudmFyIHBhZ2VTbGljZV8xID0gcmVxdWlyZShcIi4uLy4uL3N0b3JlL3NsaWNlcy9wYWdlU2xpY2VcIik7XG5yZXF1aXJlKFwiLi9oZWFkZXIuc2Nzc1wiKTtcbmZ1bmN0aW9uIEhlYWRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIF9hID0gKDAsIHJlYWN0XzEudXNlU3RhdGUpKCcnKSwgc2VhcmNoID0gX2FbMF0sIHNldFNlYXJjaCA9IF9hWzFdO1xuICAgIHZhciBfYiA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKSgnJyksIGNhdGVnb3J5ID0gX2JbMF0sIHNldENhdGVnb3J5ID0gX2JbMV07XG4gICAgdmFyIF9jID0gKDAsIHJlYWN0XzEudXNlU3RhdGUpKCcnKSwgZmlsdGVyID0gX2NbMF0sIHNldEZpbHRlciA9IF9jWzFdO1xuICAgIHZhciBkaXNwYXRjaCA9ICgwLCByZWFjdF9yZWR1eF8xLnVzZURpc3BhdGNoKSgpO1xuICAgIHZhciBjYXRlZ29yaWVzID0gW1xuICAgICAgICAnYWxsJyxcbiAgICAgICAgJ2FydCcsXG4gICAgICAgICdiaW9ncmFwaHknLFxuICAgICAgICAnY29tcHV0ZXJzJyxcbiAgICAgICAgJ2hpc3RvcnknLFxuICAgICAgICAnbWVkaWNhbCcsXG4gICAgICAgICdwb2V0cnknLFxuICAgIF07XG4gICAgdmFyIGhhbmRsZVNlYXJjaCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlYXJjaFBhcmFtcywgcmVzcG9uc2U7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKCgwLCBwYWdlU2xpY2VfMS5TZXRQYWdlKSgnbG9hZGluZy1wYWdlJykpO1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2hQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBTZWFyY2g6IHNlYXJjaCB8fCAnJTIwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIENhdGVnb3JpZXM6IGNhdGVnb3J5IHx8ICdhbGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgRmlsdGVyOiBmaWx0ZXIgfHwgJ3JlbGV2YW5jZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGFydEluZGV4OiAwLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCgoMCwgZm91bmRTbGljZV8xLlNldFNlYXJjaEluZm8pKHNlYXJjaFBhcmFtcykpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCAoMCwgdXJsR2VuZXJhdG9yXzEuR2V0UmVzcG9uc2VGcm9tQm9va0FwaSkoc2VhcmNoUGFyYW1zKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLml0ZW1zICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuc2V0Qm9va3MocmVzcG9uc2UuaXRlbXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuc2V0Qm9va3MoW10pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS50b3RhbEl0ZW1zICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuc2V0VG90YWxJdGVtcyhyZXNwb25zZS50b3RhbEl0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnNldFRvdGFsSXRlbXMoMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goKDAsIHBhZ2VTbGljZV8xLlNldFBhZ2UpKCdib29rLWxpc3QnKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7IH07XG4gICAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAgaGFuZGxlU2VhcmNoKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIENoYW5nZUNhdGVnb3J5KGV2ZW50KSB7XG4gICAgICAgIHNldENhdGVnb3J5KGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIENoYW5nZUZpbHRlcihldmVudCkge1xuICAgICAgICBzZXRGaWx0ZXIoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gQ2hhbmdlU2VhcmNoKGV2ZW50KSB7XG4gICAgICAgIHNldFNlYXJjaChldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaGVhZGVyXCIsIHsgY2xhc3NOYW1lOiBcImhlYWRlclwiIH0sXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImNvbnRlbnRcIiB9LFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJoMVwiLCB7IGNsYXNzTmFtZTogXCJoZWFkZXJIMVwiIH0sIFwiU2VhcmNoIGZvciBib29rc1wiKSxcbiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZpbHRlclwiIH0sXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic2VhcmNoQmFyQ29udGFpbmVyXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7IGNsYXNzTmFtZTogXCJzZWFyY2hCYXJcIiwgdHlwZTogXCJ0ZXh0XCIsIHBsYWNlaG9sZGVyOiBcIkJvb2tOYW1lLi4uXCIsIG9uS2V5RG93bjogaGFuZGxlS2V5RG93biwgb25DaGFuZ2U6IENoYW5nZVNlYXJjaCwgdmFsdWU6IHNlYXJjaCB9KSxcbiAgICAgICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgeyBvbkNsaWNrOiBoYW5kbGVTZWFyY2ggfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaW1nXCIsIHsgc3JjOiBcIi4vaW1nL1NlYXJjaC5wbmdcIiwgYWx0OiBcIlNlYXJjaFwiIH0pKSksXG4gICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwic2VsZWN0c0NvbnRhaW5lclwiIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInNlbGVjdEl0ZW1cIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiQ2F0ZWdvcmllc1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsIHsgb25DaGFuZ2U6IENoYW5nZUNhdGVnb3J5IH0sIGNhdGVnb3JpZXMubWFwKGZ1bmN0aW9uIChpdGVtLCBrZXkpIHsgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiLCB7IHZhbHVlOiBpdGVtLCBrZXk6IGtleSB9LCBpdGVtKSk7IH0pKSksXG4gICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInNlbGVjdEl0ZW1cIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiU29ydGluZyBieVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsIHsgb25DaGFuZ2U6IENoYW5nZUZpbHRlciB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIsIHsgdmFsdWU6IFwicmVsZXZhbmNlXCIgfSwgXCJyZWxldmFuY2VcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIiwgeyB2YWx1ZTogXCJuZXdlc3RcIiB9LCBcIm5ld2VzdFwiKSkpKSkpKSk7XG59XG5leHBvcnRzLkhlYWRlciA9IEhlYWRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Mb2FnaW5nUGFnZSA9IHZvaWQgMDtcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5yZXF1aXJlKFwiLi9sb2FkaW5nLXBhZ2Uuc2Nzc1wiKTtcbmZ1bmN0aW9uIExvYWdpbmdQYWdlKCkge1xuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJtYWluXCIsIHsgY2xhc3NOYW1lOiBcIm1haW5Gb3JMb2FkaW5nXCIgfSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibG9kaW5nSW1nQ29udGFpbmVyXCIgfSksXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBcIkxvYWRpbmcuLi5cIikpKTtcbn1cbmV4cG9ydHMuTG9hZ2luZ1BhZ2UgPSBMb2FnaW5nUGFnZTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBjbGllbnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tL2NsaWVudFwiKSk7XG52YXIgcmVhY3RfcmVkdXhfMSA9IHJlcXVpcmUoXCJyZWFjdC1yZWR1eFwiKTtcbnZhciBzdG9yZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3N0b3JlL3N0b3JlXCIpKTtcbnZhciBhcHBfMSA9IHJlcXVpcmUoXCIuL2FwcFwiKTtcbnZhciByb290RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Jyk7XG4vLyDQlNC+0LHQsNCy0YzRgtC1INC/0YDQvtCy0LXRgNC60YMg0L3QsCBudWxsLCDRh9GC0L7QsdGLINC40LfQsdC10LbQsNGC0Ywg0L7RiNC40LHQvtC6INC60L7QvNC/0LjQu9GP0YbQuNC4XG5pZiAocm9vdEVsZW1lbnQpIHtcbiAgICB2YXIgcm9vdCA9IGNsaWVudF8xLmRlZmF1bHQuY3JlYXRlUm9vdChyb290RWxlbWVudCk7XG4gICAgcm9vdC5yZW5kZXIocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQocmVhY3RfMS5kZWZhdWx0LlN0cmljdE1vZGUsIG51bGwsXG4gICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHJlYWN0X3JlZHV4XzEuUHJvdmlkZXIsIHsgc3RvcmU6IHN0b3JlXzEuZGVmYXVsdCB9LFxuICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoYXBwXzEuQXBwLCBudWxsKSkpKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHJlZHV4XzEgPSByZXF1aXJlKFwicmVkdXhcIik7XG52YXIgZm91bmRTbGljZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3NsaWNlcy9mb3VuZFNsaWNlXCIpKTtcbnZhciBwYWdlU2xpY2VfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zbGljZXMvcGFnZVNsaWNlXCIpKTtcbnZhciBjdXJyZW50Qm9va1NsaWNlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc2xpY2VzL2N1cnJlbnRCb29rU2xpY2VcIikpO1xudmFyIHJvb3RSZWR1Y2VyID0gKDAsIHJlZHV4XzEuY29tYmluZVJlZHVjZXJzKSh7XG4gICAgZm91bmQ6IGZvdW5kU2xpY2VfMS5kZWZhdWx0LFxuICAgIHBhZ2U6IHBhZ2VTbGljZV8xLmRlZmF1bHQsXG4gICAgY3VycmVudEJvb2s6IGN1cnJlbnRCb29rU2xpY2VfMS5kZWZhdWx0XG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJvb3RSZWR1Y2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX2E7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNsZWFyQ3VycmVudEJvb2sgPSBleHBvcnRzLnNldEN1cnJlbnRCb29rID0gdm9pZCAwO1xudmFyIHRvb2xraXRfMSA9IHJlcXVpcmUoXCJAcmVkdXhqcy90b29sa2l0XCIpO1xudmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgICBCb29rOiBudWxsXG59O1xudmFyIGN1cnJlbnRCb29rc1NsaWNlID0gKDAsIHRvb2xraXRfMS5jcmVhdGVTbGljZSkoe1xuICAgIG5hbWU6ICdjdXJyZW50Qm9va1NsaWNlJyxcbiAgICBpbml0aWFsU3RhdGU6IGluaXRpYWxTdGF0ZSxcbiAgICByZWR1Y2Vyczoge1xuICAgICAgICBzZXRDdXJyZW50Qm9vazogZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgICAgICAgIHN0YXRlLkJvb2sgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYXJDdXJyZW50Qm9vazogZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICBzdGF0ZS5Cb29rID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuZXhwb3J0cy5zZXRDdXJyZW50Qm9vayA9IChfYSA9IGN1cnJlbnRCb29rc1NsaWNlLmFjdGlvbnMsIF9hLnNldEN1cnJlbnRCb29rKSwgZXhwb3J0cy5jbGVhckN1cnJlbnRCb29rID0gX2EuY2xlYXJDdXJyZW50Qm9vaztcbmV4cG9ydHMuZGVmYXVsdCA9IGN1cnJlbnRCb29rc1NsaWNlLnJlZHVjZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfYTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2V0TmV3SW5kZXggPSBleHBvcnRzLlNldFNlYXJjaEluZm8gPSB2b2lkIDA7XG52YXIgdG9vbGtpdF8xID0gcmVxdWlyZShcIkByZWR1eGpzL3Rvb2xraXRcIik7XG52YXIgaW5pdGlhbFN0YXRlID0ge1xuICAgIFNlYXJjaDogJyAnLFxuICAgIENhdGVnb3JpZXM6ICdhbGwnLFxuICAgIEZpbHRlcjogJ3JlbGV2YW5jZScsXG4gICAgU3RhcnRJbmRleDogMFxufTtcbnZhciBGb3VuZFNsaWNlID0gKDAsIHRvb2xraXRfMS5jcmVhdGVTbGljZSkoe1xuICAgIG5hbWU6ICdGb3VuZFNsaWNlJyxcbiAgICBpbml0aWFsU3RhdGU6IGluaXRpYWxTdGF0ZSxcbiAgICByZWR1Y2Vyczoge1xuICAgICAgICBTZXRTZWFyY2hJbmZvOiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xuICAgICAgICAgICAgc3RhdGUuU2VhcmNoID0gYWN0aW9uLnBheWxvYWQuU2VhcmNoO1xuICAgICAgICAgICAgc3RhdGUuQ2F0ZWdvcmllcyA9IGFjdGlvbi5wYXlsb2FkLkNhdGVnb3JpZXM7XG4gICAgICAgICAgICBzdGF0ZS5GaWx0ZXIgPSBhY3Rpb24ucGF5bG9hZC5GaWx0ZXI7XG4gICAgICAgICAgICBzdGF0ZS5TdGFydEluZGV4ID0gYWN0aW9uLnBheWxvYWQuU3RhcnRJbmRleDtcbiAgICAgICAgfSxcbiAgICAgICAgU2V0TmV3SW5kZXg6IGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgICAgICAgICBzdGF0ZS5TdGFydEluZGV4ID0gYWN0aW9uLnBheWxvYWQ7IC8vIHN0YXRlLlN0YXJ0SW5kZXggKz0gMzAg0LXRgdC70Lgg0YPRgNC10LfQsNGC0Ywg0YTRg9C90LrRhtC40L7QvdCw0Lsg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLCDQotCj0KIg0JXQqdCVINCd0KPQltCd0J4g0KDQkNCX0J7QkdCg0JDQotCs0KHQr1xuICAgICAgICB9LFxuICAgIH0sXG59KTtcbmV4cG9ydHMuU2V0U2VhcmNoSW5mbyA9IChfYSA9IEZvdW5kU2xpY2UuYWN0aW9ucywgX2EuU2V0U2VhcmNoSW5mbyksIGV4cG9ydHMuU2V0TmV3SW5kZXggPSBfYS5TZXROZXdJbmRleDtcbmV4cG9ydHMuZGVmYXVsdCA9IEZvdW5kU2xpY2UucmVkdWNlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TZXRQYWdlID0gdm9pZCAwO1xudmFyIHRvb2xraXRfMSA9IHJlcXVpcmUoXCJAcmVkdXhqcy90b29sa2l0XCIpO1xudmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgICBQYWdlOiAnYm9vay1saXN0J1xufTtcbnZhciBQYWdlU2xpY2UgPSAoMCwgdG9vbGtpdF8xLmNyZWF0ZVNsaWNlKSh7XG4gICAgbmFtZTogJ1BhZ2VTbGljZScsXG4gICAgaW5pdGlhbFN0YXRlOiBpbml0aWFsU3RhdGUsXG4gICAgcmVkdWNlcnM6IHtcbiAgICAgICAgU2V0UGFnZTogZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgICAgICAgIHN0YXRlLlBhZ2UgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgICAgfSxcbiAgICB9LFxufSk7XG5leHBvcnRzLlNldFBhZ2UgPSBQYWdlU2xpY2UuYWN0aW9ucy5TZXRQYWdlO1xuZXhwb3J0cy5kZWZhdWx0ID0gUGFnZVNsaWNlLnJlZHVjZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0b29sa2l0XzEgPSByZXF1aXJlKFwiQHJlZHV4anMvdG9vbGtpdFwiKTtcbnZhciByb290UmVkdWNlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3Jvb3RSZWR1Y2VyXCIpKTtcbnZhciBzdG9yZSA9ICgwLCB0b29sa2l0XzEuY29uZmlndXJlU3RvcmUpKHtcbiAgICByZWR1Y2VyOiByb290UmVkdWNlcl8xLmRlZmF1bHQsXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0b3JlO1xuLy8g0KDQtdC00YzRjtGB0LXRgCDigJQg0Y3RgtC+INGE0YPQvdC60YbQuNGPLCDQutC+0YLQvtGA0LDRjyDQv9C+0LvRg9GH0LDQtdGCINGC0LXQutGD0YnQtdC1INGB0L7RgdGC0L7Rj9C90LjQtSDQuCBcbi8vINC+0LHRitC10LrRgiwg0YDQtdGI0LDQtdGCICwg0LrQsNC6INC+0LHQvdC+0LLQuNGC0Ywg0YHQvtGB0YLQvtGP0L3QuNC1INC/0YDQuCDQvdC10L7QsdGF0L7QtNC40LzQvtGB0YLQuCwg0LggXG4vLyDQstC+0LfQstGA0LDRidCw0LXRgiDQvdC+0LLQvtC1INGB0L7RgdGC0L7Rj9C90LjQtTogLiDQktGLINC80L7QttC10YLQtSDQtNGD0LzQsNGC0Ywg0L4g0YDQtdC00YzRjtGB0LXRgNC1INC60LDQulxuLy8gINC+INC/0YDQvtGB0LvRg9GI0LjQstCw0YLQtdC70LUg0YHQvtCx0YvRgtC40LksINC60L7RgtC+0YDRi9C5INC+0LHRgNCw0LHQsNGC0YvQstCw0LXRgiDRgdC+0LHRi9GC0LjRjyDQvdCwINC+0YHQvdC+0LLQtSBcbi8vICDQv9C+0LvRg9GH0LXQvdC90L7Qs9C+INGC0LjQv9CwINC00LXQudGB0YLQstC40Y8gKNGB0L7QsdGL0YLQuNGPKS5cbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HZXRSZXNwb25zZUZyb21Cb29rQXBpID0gdm9pZCAwO1xudmFyIGF4aW9zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImF4aW9zXCIpKTtcbnZhciBjb25maWdfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb25maWdcIik7XG5mdW5jdGlvbiBHZXRSZXNwb25zZUZyb21Cb29rQXBpKFNlYXJjaFBhcmFtKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGF4aW9zXzEuZGVmYXVsdC5nZXQoY29uZmlnXzEuQmFzZVVybCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcTogU2VhcmNoUGFyYW0uQ2F0ZWdvcmllcyA9PT0gJ2FsbCcgPyBTZWFyY2hQYXJhbS5TZWFyY2ggOiBcIlwiLmNvbmNhdChTZWFyY2hQYXJhbS5TZWFyY2gsIFwiK3N1YmplY3Q6XCIpLmNvbmNhdChTZWFyY2hQYXJhbS5DYXRlZ29yaWVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlckJ5OiBTZWFyY2hQYXJhbS5GaWx0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRJbmRleDogU2VhcmNoUGFyYW0uU3RhcnRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhSZXN1bHRzOiBjb25maWdfMS5Cb29rc0NvdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogY29uZmlnXzEuQXBpS2V5XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzcG9uc2UuZGF0YV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5HZXRSZXNwb25zZUZyb21Cb29rQXBpID0gR2V0UmVzcG9uc2VGcm9tQm9va0FwaTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHVzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXdpdGgtc2VsZWN0b3IucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBnPXJlcXVpcmUoXCJyZWFjdFwiKTtmdW5jdGlvbiBuKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgcD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpuLHE9Zy51c2VTeW5jRXh0ZXJuYWxTdG9yZSxyPWcudXNlUmVmLHQ9Zy51c2VFZmZlY3QsdT1nLnVzZU1lbW8sdj1nLnVzZURlYnVnVmFsdWU7XG5leHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yPWZ1bmN0aW9uKGEsYixlLGwsaCl7dmFyIGM9cihudWxsKTtpZihudWxsPT09Yy5jdXJyZW50KXt2YXIgZj17aGFzVmFsdWU6ITEsdmFsdWU6bnVsbH07Yy5jdXJyZW50PWZ9ZWxzZSBmPWMuY3VycmVudDtjPXUoZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEpe2lmKCFjKXtjPSEwO2Q9YTthPWwoYSk7aWYodm9pZCAwIT09aCYmZi5oYXNWYWx1ZSl7dmFyIGI9Zi52YWx1ZTtpZihoKGIsYSkpcmV0dXJuIGs9Yn1yZXR1cm4gaz1hfWI9aztpZihwKGQsYSkpcmV0dXJuIGI7dmFyIGU9bChhKTtpZih2b2lkIDAhPT1oJiZoKGIsZSkpcmV0dXJuIGI7ZD1hO3JldHVybiBrPWV9dmFyIGM9ITEsZCxrLG09dm9pZCAwPT09ZT9udWxsOmU7cmV0dXJuW2Z1bmN0aW9uKCl7cmV0dXJuIGEoYigpKX0sbnVsbD09PW0/dm9pZCAwOmZ1bmN0aW9uKCl7cmV0dXJuIGEobSgpKX1dfSxbYixlLGwsaF0pO3ZhciBkPXEoYSxjWzBdLGNbMV0pO1xudChmdW5jdGlvbigpe2YuaGFzVmFsdWU9ITA7Zi52YWx1ZT1kfSxbZF0pO3YoZCk7cmV0dXJuIGR9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXdpdGgtc2VsZWN0b3IucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtd2l0aC1zZWxlY3Rvci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7dmFyIGJlPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgRnQ9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt2YXIgVnQ9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7dmFyIF90PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIEx0PShlLHQpPT57Zm9yKHZhciByIGluIHQpYmUoZSxyLHtnZXQ6dFtyXSxlbnVtZXJhYmxlOiEwfSl9LE1lPShlLHQscixuKT0+e2lmKHQmJnR5cGVvZiB0PT1cIm9iamVjdFwifHx0eXBlb2YgdD09XCJmdW5jdGlvblwiKWZvcihsZXQgbyBvZiBWdCh0KSkhX3QuY2FsbChlLG8pJiZvIT09ciYmYmUoZSxvLHtnZXQ6KCk9PnRbb10sZW51bWVyYWJsZTohKG49RnQodCxvKSl8fG4uZW51bWVyYWJsZX0pO3JldHVybiBlfSx3PShlLHQscik9PihNZShlLHQsXCJkZWZhdWx0XCIpLHImJk1lKHIsdCxcImRlZmF1bHRcIikpO3ZhciBVdD1lPT5NZShiZSh7fSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlKTt2YXIgUz17fTtMdChTLHtSZWR1Y2VyVHlwZTooKT0+emUsU0hPVUxEX0FVVE9CQVRDSDooKT0+Y2UsVGFza0Fib3J0RXJyb3I6KCk9PkksVHVwbGU6KCk9PmosYWRkTGlzdGVuZXI6KCk9PndlLGFzeW5jVGh1bmtDcmVhdG9yOigpPT5wdCxhdXRvQmF0Y2hFbmhhbmNlcjooKT0+ZGUsYnVpbGRDcmVhdGVTbGljZTooKT0+R2UsY2xlYXJBbGxMaXN0ZW5lcnM6KCk9PiRlLGNvbWJpbmVTbGljZXM6KCk9Pmp0LGNvbmZpZ3VyZVN0b3JlOigpPT5kdCxjcmVhdGVBY3Rpb246KCk9Pk0sY3JlYXRlQWN0aW9uQ3JlYXRvckludmFyaWFudE1pZGRsZXdhcmU6KCk9PlplLGNyZWF0ZUFzeW5jVGh1bms6KCk9PnllLGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yOigpPT5uZSxjcmVhdGVEcmFmdFNhZmVTZWxlY3RvckNyZWF0b3I6KCk9PkllLGNyZWF0ZUR5bmFtaWNNaWRkbGV3YXJlOigpPT5PdCxjcmVhdGVFbnRpdHlBZGFwdGVyOigpPT5TdCxjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmU6KCk9PnR0LGNyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZTooKT0+dnQsY3JlYXRlTmV4dFN0YXRlOigpPT5ELnByb2R1Y2UsY3JlYXRlUmVkdWNlcjooKT0+bGUsY3JlYXRlU2VsZWN0b3I6KCk9PlcuY3JlYXRlU2VsZWN0b3IsY3JlYXRlU2VsZWN0b3JDcmVhdG9yOigpPT5XLmNyZWF0ZVNlbGVjdG9yQ3JlYXRvcixjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmU6KCk9Pm90LGNyZWF0ZVNsaWNlOigpPT5mdCxjdXJyZW50OigpPT5ELmN1cnJlbnQsZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlOigpPT5qZSxmb3JtYXRQcm9kRXJyb3JNZXNzYWdlOigpPT5tLGZyZWV6ZTooKT0+RC5mcmVlemUsaXNBY3Rpb25DcmVhdG9yOigpPT5vZSxpc0FsbE9mOigpPT5LLGlzQW55T2Y6KCk9PlYsaXNBc3luY1RodW5rQWN0aW9uOigpPT5MZSxpc0RyYWZ0OigpPT5ELmlzRHJhZnQsaXNGbHV4U3RhbmRhcmRBY3Rpb246KCk9PmFlLGlzRnVsZmlsbGVkOigpPT5fZSxpc0ltbXV0YWJsZURlZmF1bHQ6KCk9PmV0LGlzUGVuZGluZzooKT0+RmUsaXNQbGFpbjooKT0+TmUsaXNSZWplY3RlZDooKT0+WCxpc1JlamVjdGVkV2l0aFZhbHVlOigpPT5WZSxscnVNZW1vaXplOigpPT5XLmxydU1lbW9pemUsbWluaVNlcmlhbGl6ZUVycm9yOigpPT5VZSxuYW5vaWQ6KCk9PmIsb3JpZ2luYWw6KCk9PkQub3JpZ2luYWwscHJlcGFyZUF1dG9CYXRjaGVkOigpPT5pdCxyZW1vdmVMaXN0ZW5lcjooKT0+UGUsdW53cmFwUmVzdWx0OigpPT5XZSx3ZWFrTWFwTWVtb2l6ZTooKT0+Vy53ZWFrTWFwTWVtb2l6ZX0pO21vZHVsZS5leHBvcnRzPVV0KFMpO3coUyxyZXF1aXJlKFwicmVkdXhcIiksbW9kdWxlLmV4cG9ydHMpO3ZhciBEPXJlcXVpcmUoXCJpbW1lclwiKSxXPXJlcXVpcmUoXCJyZXNlbGVjdFwiKTt2YXIgZWU9cmVxdWlyZShcImltbWVyXCIpLHRlPXJlcXVpcmUoXCJyZXNlbGVjdFwiKSxJZT0oLi4uZSk9PntsZXQgdD0oMCx0ZS5jcmVhdGVTZWxlY3RvckNyZWF0b3IpKC4uLmUpLHI9T2JqZWN0LmFzc2lnbigoLi4ubik9PntsZXQgbz10KC4uLm4pLGE9KHMsLi4ucCk9Pm8oKDAsZWUuaXNEcmFmdCkocyk/KDAsZWUuY3VycmVudCkocyk6cywuLi5wKTtyZXR1cm4gT2JqZWN0LmFzc2lnbihhLG8pLGF9LHt3aXRoVHlwZXM6KCk9PnJ9KTtyZXR1cm4gcn0sbmU9SWUodGUud2Vha01hcE1lbW9pemUpO3ZhciB2PXJlcXVpcmUoXCJyZWR1eFwiKTt2YXIgdmU9cmVxdWlyZShcInJlZHV4XCIpLFllPXR5cGVvZiB3aW5kb3c8XCJ1XCImJndpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18/d2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXzpmdW5jdGlvbigpe2lmKGFyZ3VtZW50cy5sZW5ndGghPT0wKXJldHVybiB0eXBlb2YgYXJndW1lbnRzWzBdPT1cIm9iamVjdFwiP3ZlLmNvbXBvc2U6dmUuY29tcG9zZS5hcHBseShudWxsLGFyZ3VtZW50cyl9LFJuPXR5cGVvZiB3aW5kb3c8XCJ1XCImJndpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fP3dpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fOmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBlfX07dmFyIHNlPXJlcXVpcmUoXCJyZWR1eC10aHVua1wiKTt2YXIgRGU9cmVxdWlyZShcInJlZHV4XCIpO3ZhciByZT1lPT5lJiZ0eXBlb2YgZS5tYXRjaD09XCJmdW5jdGlvblwiO2Z1bmN0aW9uIE0oZSx0KXtmdW5jdGlvbiByKC4uLm4pe2lmKHQpe2xldCBvPXQoLi4ubik7aWYoIW8pdGhyb3cgbmV3IEVycm9yKG0oMCkpO3JldHVybnt0eXBlOmUscGF5bG9hZDpvLnBheWxvYWQsLi4uXCJtZXRhXCJpbiBvJiZ7bWV0YTpvLm1ldGF9LC4uLlwiZXJyb3JcImluIG8mJntlcnJvcjpvLmVycm9yfX19cmV0dXJue3R5cGU6ZSxwYXlsb2FkOm5bMF19fXJldHVybiByLnRvU3RyaW5nPSgpPT5gJHtlfWAsci50eXBlPWUsci5tYXRjaD1uPT4oMCxEZS5pc0FjdGlvbikobikmJm4udHlwZT09PWUscn1mdW5jdGlvbiBvZShlKXtyZXR1cm4gdHlwZW9mIGU9PVwiZnVuY3Rpb25cIiYmXCJ0eXBlXCJpbiBlJiZyZShlKX1mdW5jdGlvbiBhZShlKXtyZXR1cm4oMCxEZS5pc0FjdGlvbikoZSkmJk9iamVjdC5rZXlzKGUpLmV2ZXJ5KFd0KX1mdW5jdGlvbiBXdChlKXtyZXR1cm5bXCJ0eXBlXCIsXCJwYXlsb2FkXCIsXCJlcnJvclwiLFwibWV0YVwiXS5pbmRleE9mKGUpPi0xfWZ1bmN0aW9uIHp0KGUpe2xldCB0PWU/YCR7ZX1gLnNwbGl0KFwiL1wiKTpbXSxyPXRbdC5sZW5ndGgtMV18fFwiYWN0aW9uQ3JlYXRvclwiO3JldHVybmBEZXRlY3RlZCBhbiBhY3Rpb24gY3JlYXRvciB3aXRoIHR5cGUgXCIke2V8fFwidW5rbm93blwifVwiIGJlaW5nIGRpc3BhdGNoZWQuIFxuTWFrZSBzdXJlIHlvdSdyZSBjYWxsaW5nIHRoZSBhY3Rpb24gY3JlYXRvciBiZWZvcmUgZGlzcGF0Y2hpbmcsIGkuZS4gXFxgZGlzcGF0Y2goJHtyfSgpKVxcYCBpbnN0ZWFkIG9mIFxcYGRpc3BhdGNoKCR7cn0pXFxgLiBUaGlzIGlzIG5lY2Vzc2FyeSBldmVuIGlmIHRoZSBhY3Rpb24gaGFzIG5vIHBheWxvYWQuYH1mdW5jdGlvbiBaZShlPXt9KXtyZXR1cm4oKT0+cj0+bj0+cihuKX12YXIgaWU9cmVxdWlyZShcImltbWVyXCIpO2Z1bmN0aW9uICQoZSx0KXtmb3IobGV0IHIgb2YgZSlpZih0KHIpKXJldHVybiByfXZhciBqPWNsYXNzIGUgZXh0ZW5kcyBBcnJheXtjb25zdHJ1Y3RvciguLi50KXtzdXBlciguLi50KSxPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcyxlLnByb3RvdHlwZSl9c3RhdGljIGdldFtTeW1ib2wuc3BlY2llc10oKXtyZXR1cm4gZX1jb25jYXQoLi4udCl7cmV0dXJuIHN1cGVyLmNvbmNhdC5hcHBseSh0aGlzLHQpfXByZXBlbmQoLi4udCl7cmV0dXJuIHQubGVuZ3RoPT09MSYmQXJyYXkuaXNBcnJheSh0WzBdKT9uZXcgZSguLi50WzBdLmNvbmNhdCh0aGlzKSk6bmV3IGUoLi4udC5jb25jYXQodGhpcykpfX07ZnVuY3Rpb24gT2UoZSl7cmV0dXJuKDAsaWUuaXNEcmFmdGFibGUpKGUpPygwLGllLnByb2R1Y2UpKGUsKCk9Pnt9KTplfWZ1bmN0aW9uIEcoZSx0LHIpe2lmKGUuaGFzKHQpKXtsZXQgbz1lLmdldCh0KTtyZXR1cm4gci51cGRhdGUmJihvPXIudXBkYXRlKG8sdCxlKSxlLnNldCh0LG8pKSxvfWlmKCFyLmluc2VydCl0aHJvdyBuZXcgRXJyb3IobSgxMCkpO2xldCBuPXIuaW5zZXJ0KHQsZSk7cmV0dXJuIGUuc2V0KHQsbiksbn1mdW5jdGlvbiBldChlKXtyZXR1cm4gdHlwZW9mIGUhPVwib2JqZWN0XCJ8fGU9PW51bGx8fE9iamVjdC5pc0Zyb3plbihlKX1mdW5jdGlvbiB0dChlPXt9KXtpZigxKXJldHVybigpPT5uPT5vPT5uKG8pO3ZhciB0LHJ9dmFyIG50PXJlcXVpcmUoXCJyZWR1eFwiKTtmdW5jdGlvbiBOZShlKXtsZXQgdD10eXBlb2YgZTtyZXR1cm4gZT09bnVsbHx8dD09PVwic3RyaW5nXCJ8fHQ9PT1cImJvb2xlYW5cInx8dD09PVwibnVtYmVyXCJ8fEFycmF5LmlzQXJyYXkoZSl8fCgwLG50LmlzUGxhaW5PYmplY3QpKGUpfWZ1bmN0aW9uIGplKGUsdD1cIlwiLHI9TmUsbixvPVtdLGEpe2xldCBzO2lmKCFyKGUpKXJldHVybntrZXlQYXRoOnR8fFwiPHJvb3Q+XCIsdmFsdWU6ZX07aWYodHlwZW9mIGUhPVwib2JqZWN0XCJ8fGU9PT1udWxsfHxhPy5oYXMoZSkpcmV0dXJuITE7bGV0IHA9biE9bnVsbD9uKGUpOk9iamVjdC5lbnRyaWVzKGUpLGM9by5sZW5ndGg+MDtmb3IobGV0W0EsaV1vZiBwKXtsZXQgdT10P3QrXCIuXCIrQTpBO2lmKCEoYyYmby5zb21lKGs9PmsgaW5zdGFuY2VvZiBSZWdFeHA/ay50ZXN0KHUpOnU9PT1rKSkpe2lmKCFyKGkpKXJldHVybntrZXlQYXRoOnUsdmFsdWU6aX07aWYodHlwZW9mIGk9PVwib2JqZWN0XCImJihzPWplKGksdSxyLG4sbyxhKSxzKSlyZXR1cm4gc319cmV0dXJuIGEmJnJ0KGUpJiZhLmFkZChlKSwhMX1mdW5jdGlvbiBydChlKXtpZighT2JqZWN0LmlzRnJvemVuKGUpKXJldHVybiExO2ZvcihsZXQgdCBvZiBPYmplY3QudmFsdWVzKGUpKWlmKCEodHlwZW9mIHQhPVwib2JqZWN0XCJ8fHQ9PT1udWxsKSYmIXJ0KHQpKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIG90KGU9e30pe3JldHVybigpPT50PT5yPT50KHIpfWZ1bmN0aW9uIEd0KGUpe3JldHVybiB0eXBlb2YgZT09XCJib29sZWFuXCJ9dmFyIGF0PSgpPT5mdW5jdGlvbih0KXtsZXR7dGh1bms6cj0hMCxpbW11dGFibGVDaGVjazpuPSEwLHNlcmlhbGl6YWJsZUNoZWNrOm89ITAsYWN0aW9uQ3JlYXRvckNoZWNrOmE9ITB9PXQ/P3t9LHM9bmV3IGo7cmV0dXJuIHImJihHdChyKT9zLnB1c2goc2UudGh1bmspOnMucHVzaCgoMCxzZS53aXRoRXh0cmFBcmd1bWVudCkoci5leHRyYUFyZ3VtZW50KSkpLHN9O3ZhciBjZT1cIlJUS19hdXRvQmF0Y2hcIixpdD0oKT0+ZT0+KHtwYXlsb2FkOmUsbWV0YTp7W2NlXTohMH19KSxzdD1lPT50PT57c2V0VGltZW91dCh0LGUpfSxCdD10eXBlb2Ygd2luZG93PFwidVwiJiZ3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lP3dpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU6c3QoMTApLGRlPShlPXt0eXBlOlwicmFmXCJ9KT0+dD0+KC4uLnIpPT57bGV0IG49dCguLi5yKSxvPSEwLGE9ITEscz0hMSxwPW5ldyBTZXQsYz1lLnR5cGU9PT1cInRpY2tcIj9xdWV1ZU1pY3JvdGFzazplLnR5cGU9PT1cInJhZlwiP0J0OmUudHlwZT09PVwiY2FsbGJhY2tcIj9lLnF1ZXVlTm90aWZpY2F0aW9uOnN0KGUudGltZW91dCksQT0oKT0+e3M9ITEsYSYmKGE9ITEscC5mb3JFYWNoKGk9PmkoKSkpfTtyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSxuLHtzdWJzY3JpYmUoaSl7bGV0IHU9KCk9Pm8mJmkoKSx5PW4uc3Vic2NyaWJlKHUpO3JldHVybiBwLmFkZChpKSwoKT0+e3koKSxwLmRlbGV0ZShpKX19LGRpc3BhdGNoKGkpe3RyeXtyZXR1cm4gbz0haT8ubWV0YT8uW2NlXSxhPSFvLGEmJihzfHwocz0hMCxjKEEpKSksbi5kaXNwYXRjaChpKX1maW5hbGx5e289ITB9fX0pfTt2YXIgY3Q9ZT0+ZnVuY3Rpb24ocil7bGV0e2F1dG9CYXRjaDpuPSEwfT1yPz97fSxvPW5ldyBqKGUpO3JldHVybiBuJiZvLnB1c2goZGUodHlwZW9mIG49PVwib2JqZWN0XCI/bjp2b2lkIDApKSxvfTt2YXIgRj0hMDtmdW5jdGlvbiBkdChlKXtsZXQgdD1hdCgpLHtyZWR1Y2VyOnI9dm9pZCAwLG1pZGRsZXdhcmU6bixkZXZUb29sczpvPSEwLHByZWxvYWRlZFN0YXRlOmE9dm9pZCAwLGVuaGFuY2VyczpzPXZvaWQgMH09ZXx8e30scDtpZih0eXBlb2Ygcj09XCJmdW5jdGlvblwiKXA9cjtlbHNlIGlmKCgwLHYuaXNQbGFpbk9iamVjdCkocikpcD0oMCx2LmNvbWJpbmVSZWR1Y2Vycykocik7ZWxzZSB0aHJvdyBuZXcgRXJyb3IobSgxKSk7aWYoIUYmJm4mJnR5cGVvZiBuIT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IEVycm9yKG0oMikpO2xldCBjO2lmKHR5cGVvZiBuPT1cImZ1bmN0aW9uXCIpe2lmKGM9bih0KSwhRiYmIUFycmF5LmlzQXJyYXkoYykpdGhyb3cgbmV3IEVycm9yKG0oMykpfWVsc2UgYz10KCk7aWYoIUYmJmMuc29tZShsPT50eXBlb2YgbCE9XCJmdW5jdGlvblwiKSl0aHJvdyBuZXcgRXJyb3IobSg0KSk7bGV0IEE9di5jb21wb3NlO28mJihBPVllKHt0cmFjZTohRiwuLi50eXBlb2Ygbz09XCJvYmplY3RcIiYmb30pKTtsZXQgaT0oMCx2LmFwcGx5TWlkZGxld2FyZSkoLi4uYyksdT1jdChpKTtpZighRiYmcyYmdHlwZW9mIHMhPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgRXJyb3IobSg1KSk7bGV0IHk9dHlwZW9mIHM9PVwiZnVuY3Rpb25cIj9zKHUpOnUoKTtpZighRiYmIUFycmF5LmlzQXJyYXkoeSkpdGhyb3cgbmV3IEVycm9yKG0oNikpO2lmKCFGJiZ5LnNvbWUobD0+dHlwZW9mIGwhPVwiZnVuY3Rpb25cIikpdGhyb3cgbmV3IEVycm9yKG0oNykpOyFGJiZjLmxlbmd0aCYmIXkuaW5jbHVkZXMoaSkmJmNvbnNvbGUuZXJyb3IoXCJtaWRkbGV3YXJlcyB3ZXJlIHByb3ZpZGVkLCBidXQgbWlkZGxld2FyZSBlbmhhbmNlciB3YXMgbm90IGluY2x1ZGVkIGluIGZpbmFsIGVuaGFuY2VycyAtIG1ha2Ugc3VyZSB0byBjYWxsIGBnZXREZWZhdWx0RW5oYW5jZXJzYFwiKTtsZXQgaz1BKC4uLnkpO3JldHVybigwLHYuY3JlYXRlU3RvcmUpKHAsYSxrKX12YXIgQj1yZXF1aXJlKFwiaW1tZXJcIik7ZnVuY3Rpb24gdWUoZSl7bGV0IHQ9e30scj1bXSxuLG89e2FkZENhc2UoYSxzKXtsZXQgcD10eXBlb2YgYT09XCJzdHJpbmdcIj9hOmEudHlwZTtpZighcCl0aHJvdyBuZXcgRXJyb3IobSgyOCkpO2lmKHAgaW4gdCl0aHJvdyBuZXcgRXJyb3IobSgyOSkpO3JldHVybiB0W3BdPXMsb30sYWRkTWF0Y2hlcihhLHMpe3JldHVybiByLnB1c2goe21hdGNoZXI6YSxyZWR1Y2VyOnN9KSxvfSxhZGREZWZhdWx0Q2FzZShhKXtyZXR1cm4gbj1hLG99fTtyZXR1cm4gZShvKSxbdCxyLG5dfWZ1bmN0aW9uIEt0KGUpe3JldHVybiB0eXBlb2YgZT09XCJmdW5jdGlvblwifWZ1bmN0aW9uIGxlKGUsdCl7bGV0W3IsbixvXT11ZSh0KSxhO2lmKEt0KGUpKWE9KCk9Pk9lKGUoKSk7ZWxzZXtsZXQgcD1PZShlKTthPSgpPT5wfWZ1bmN0aW9uIHMocD1hKCksYyl7bGV0IEE9W3JbYy50eXBlXSwuLi5uLmZpbHRlcigoe21hdGNoZXI6aX0pPT5pKGMpKS5tYXAoKHtyZWR1Y2VyOml9KT0+aSldO3JldHVybiBBLmZpbHRlcihpPT4hIWkpLmxlbmd0aD09PTAmJihBPVtvXSksQS5yZWR1Y2UoKGksdSk9PntpZih1KWlmKCgwLEIuaXNEcmFmdCkoaSkpe2xldCBrPXUoaSxjKTtyZXR1cm4gaz09PXZvaWQgMD9pOmt9ZWxzZXtpZigoMCxCLmlzRHJhZnRhYmxlKShpKSlyZXR1cm4oMCxCLnByb2R1Y2UpKGkseT0+dSh5LGMpKTt7bGV0IHk9dShpLGMpO2lmKHk9PT12b2lkIDApe2lmKGk9PT1udWxsKXJldHVybiBpO3Rocm93IG5ldyBFcnJvcihtKDkpKX1yZXR1cm4geX19cmV0dXJuIGl9LHApfXJldHVybiBzLmdldEluaXRpYWxTdGF0ZT1hLHN9dmFyIEh0PVwiTW9kdWxlU3ltYmhhc093blByLTAxMjM0NTY3ODlBQkNERUZHSE5SVmZnY3RpVXZ6X0txWVRKa0x4cFpYSWpRV1wiLGI9KGU9MjEpPT57bGV0IHQ9XCJcIixyPWU7Zm9yKDtyLS07KXQrPUh0W01hdGgucmFuZG9tKCkqNjR8MF07cmV0dXJuIHR9O3ZhciB1dD0oZSx0KT0+cmUoZSk/ZS5tYXRjaCh0KTplKHQpO2Z1bmN0aW9uIFYoLi4uZSl7cmV0dXJuIHQ9PmUuc29tZShyPT51dChyLHQpKX1mdW5jdGlvbiBLKC4uLmUpe3JldHVybiB0PT5lLmV2ZXJ5KHI9PnV0KHIsdCkpfWZ1bmN0aW9uIHBlKGUsdCl7aWYoIWV8fCFlLm1ldGEpcmV0dXJuITE7bGV0IHI9dHlwZW9mIGUubWV0YS5yZXF1ZXN0SWQ9PVwic3RyaW5nXCIsbj10LmluZGV4T2YoZS5tZXRhLnJlcXVlc3RTdGF0dXMpPi0xO3JldHVybiByJiZufWZ1bmN0aW9uIEooZSl7cmV0dXJuIHR5cGVvZiBlWzBdPT1cImZ1bmN0aW9uXCImJlwicGVuZGluZ1wiaW4gZVswXSYmXCJmdWxmaWxsZWRcImluIGVbMF0mJlwicmVqZWN0ZWRcImluIGVbMF19ZnVuY3Rpb24gRmUoLi4uZSl7cmV0dXJuIGUubGVuZ3RoPT09MD90PT5wZSh0LFtcInBlbmRpbmdcIl0pOkooZSk/ViguLi5lLm1hcCh0PT50LnBlbmRpbmcpKTpGZSgpKGVbMF0pfWZ1bmN0aW9uIFgoLi4uZSl7cmV0dXJuIGUubGVuZ3RoPT09MD90PT5wZSh0LFtcInJlamVjdGVkXCJdKTpKKGUpP1YoLi4uZS5tYXAodD0+dC5yZWplY3RlZCkpOlgoKShlWzBdKX1mdW5jdGlvbiBWZSguLi5lKXtsZXQgdD1yPT5yJiZyLm1ldGEmJnIubWV0YS5yZWplY3RlZFdpdGhWYWx1ZTtyZXR1cm4gZS5sZW5ndGg9PT0wP0soWCguLi5lKSx0KTpKKGUpP0soWCguLi5lKSx0KTpWZSgpKGVbMF0pfWZ1bmN0aW9uIF9lKC4uLmUpe3JldHVybiBlLmxlbmd0aD09PTA/dD0+cGUodCxbXCJmdWxmaWxsZWRcIl0pOkooZSk/ViguLi5lLm1hcCh0PT50LmZ1bGZpbGxlZCkpOl9lKCkoZVswXSl9ZnVuY3Rpb24gTGUoLi4uZSl7cmV0dXJuIGUubGVuZ3RoPT09MD90PT5wZSh0LFtcInBlbmRpbmdcIixcImZ1bGZpbGxlZFwiLFwicmVqZWN0ZWRcIl0pOkooZSk/ViguLi5lLmZsYXRNYXAodD0+W3QucGVuZGluZyx0LnJlamVjdGVkLHQuZnVsZmlsbGVkXSkpOkxlKCkoZVswXSl9dmFyIHF0PVtcIm5hbWVcIixcIm1lc3NhZ2VcIixcInN0YWNrXCIsXCJjb2RlXCJdLFE9Y2xhc3N7Y29uc3RydWN0b3IodCxyKXt0aGlzLnBheWxvYWQ9dDt0aGlzLm1ldGE9cn1fdHlwZX0sZmU9Y2xhc3N7Y29uc3RydWN0b3IodCxyKXt0aGlzLnBheWxvYWQ9dDt0aGlzLm1ldGE9cn1fdHlwZX0sVWU9ZT0+e2lmKHR5cGVvZiBlPT1cIm9iamVjdFwiJiZlIT09bnVsbCl7bGV0IHQ9e307Zm9yKGxldCByIG9mIHF0KXR5cGVvZiBlW3JdPT1cInN0cmluZ1wiJiYodFtyXT1lW3JdKTtyZXR1cm4gdH1yZXR1cm57bWVzc2FnZTpTdHJpbmcoZSl9fSx5ZT0oKCk9PntmdW5jdGlvbiBlKHQscixuKXtsZXQgbz1NKHQrXCIvZnVsZmlsbGVkXCIsKGMsQSxpLHUpPT4oe3BheWxvYWQ6YyxtZXRhOnsuLi51fHx7fSxhcmc6aSxyZXF1ZXN0SWQ6QSxyZXF1ZXN0U3RhdHVzOlwiZnVsZmlsbGVkXCJ9fSkpLGE9TSh0K1wiL3BlbmRpbmdcIiwoYyxBLGkpPT4oe3BheWxvYWQ6dm9pZCAwLG1ldGE6ey4uLml8fHt9LGFyZzpBLHJlcXVlc3RJZDpjLHJlcXVlc3RTdGF0dXM6XCJwZW5kaW5nXCJ9fSkpLHM9TSh0K1wiL3JlamVjdGVkXCIsKGMsQSxpLHUseSk9Pih7cGF5bG9hZDp1LGVycm9yOihuJiZuLnNlcmlhbGl6ZUVycm9yfHxVZSkoY3x8XCJSZWplY3RlZFwiKSxtZXRhOnsuLi55fHx7fSxhcmc6aSxyZXF1ZXN0SWQ6QSxyZWplY3RlZFdpdGhWYWx1ZTohIXUscmVxdWVzdFN0YXR1czpcInJlamVjdGVkXCIsYWJvcnRlZDpjPy5uYW1lPT09XCJBYm9ydEVycm9yXCIsY29uZGl0aW9uOmM/Lm5hbWU9PT1cIkNvbmRpdGlvbkVycm9yXCJ9fSkpO2Z1bmN0aW9uIHAoYyl7cmV0dXJuKEEsaSx1KT0+e2xldCB5PW4/LmlkR2VuZXJhdG9yP24uaWRHZW5lcmF0b3IoYyk6YigpLGs9bmV3IEFib3J0Q29udHJvbGxlcixsLGg7ZnVuY3Rpb24geChkKXtoPWQsay5hYm9ydCgpfWxldCBmPWFzeW5jIGZ1bmN0aW9uKCl7bGV0IGQ7dHJ5e2xldCBnPW4/LmNvbmRpdGlvbj8uKGMse2dldFN0YXRlOmksZXh0cmE6dX0pO2lmKCR0KGcpJiYoZz1hd2FpdCBnKSxnPT09ITF8fGsuc2lnbmFsLmFib3J0ZWQpdGhyb3d7bmFtZTpcIkNvbmRpdGlvbkVycm9yXCIsbWVzc2FnZTpcIkFib3J0ZWQgZHVlIHRvIGNvbmRpdGlvbiBjYWxsYmFjayByZXR1cm5pbmcgZmFsc2UuXCJ9O2xldCBFPW5ldyBQcm9taXNlKChDLFIpPT57bD0oKT0+e1Ioe25hbWU6XCJBYm9ydEVycm9yXCIsbWVzc2FnZTpofHxcIkFib3J0ZWRcIn0pfSxrLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIixsKX0pO0EoYSh5LGMsbj8uZ2V0UGVuZGluZ01ldGE/Lih7cmVxdWVzdElkOnksYXJnOmN9LHtnZXRTdGF0ZTppLGV4dHJhOnV9KSkpLGQ9YXdhaXQgUHJvbWlzZS5yYWNlKFtFLFByb21pc2UucmVzb2x2ZShyKGMse2Rpc3BhdGNoOkEsZ2V0U3RhdGU6aSxleHRyYTp1LHJlcXVlc3RJZDp5LHNpZ25hbDprLnNpZ25hbCxhYm9ydDp4LHJlamVjdFdpdGhWYWx1ZTooQyxSKT0+bmV3IFEoQyxSKSxmdWxmaWxsV2l0aFZhbHVlOihDLFIpPT5uZXcgZmUoQyxSKX0pKS50aGVuKEM9PntpZihDIGluc3RhbmNlb2YgUSl0aHJvdyBDO3JldHVybiBDIGluc3RhbmNlb2YgZmU/byhDLnBheWxvYWQseSxjLEMubWV0YSk6byhDLHksYyl9KV0pfWNhdGNoKGcpe2Q9ZyBpbnN0YW5jZW9mIFE/cyhudWxsLHksYyxnLnBheWxvYWQsZy5tZXRhKTpzKGcseSxjKX1maW5hbGx5e2wmJmsuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLGwpfXJldHVybiBuJiYhbi5kaXNwYXRjaENvbmRpdGlvblJlamVjdGlvbiYmcy5tYXRjaChkKSYmZC5tZXRhLmNvbmRpdGlvbnx8QShkKSxkfSgpO3JldHVybiBPYmplY3QuYXNzaWduKGYse2Fib3J0OngscmVxdWVzdElkOnksYXJnOmMsdW53cmFwKCl7cmV0dXJuIGYudGhlbihXZSl9fSl9fXJldHVybiBPYmplY3QuYXNzaWduKHAse3BlbmRpbmc6YSxyZWplY3RlZDpzLGZ1bGZpbGxlZDpvLHNldHRsZWQ6VihzLG8pLHR5cGVQcmVmaXg6dH0pfXJldHVybiBlLndpdGhUeXBlcz0oKT0+ZSxlfSkoKTtmdW5jdGlvbiBXZShlKXtpZihlLm1ldGEmJmUubWV0YS5yZWplY3RlZFdpdGhWYWx1ZSl0aHJvdyBlLnBheWxvYWQ7aWYoZS5lcnJvcil0aHJvdyBlLmVycm9yO3JldHVybiBlLnBheWxvYWR9ZnVuY3Rpb24gJHQoZSl7cmV0dXJuIGUhPT1udWxsJiZ0eXBlb2YgZT09XCJvYmplY3RcIiYmdHlwZW9mIGUudGhlbj09XCJmdW5jdGlvblwifXZhciBsdD1TeW1ib2wuZm9yKFwicnRrLXNsaWNlLWNyZWF0ZWFzeW5jdGh1bmtcIikscHQ9e1tsdF06eWV9LHplPShuPT4obi5yZWR1Y2VyPVwicmVkdWNlclwiLG4ucmVkdWNlcldpdGhQcmVwYXJlPVwicmVkdWNlcldpdGhQcmVwYXJlXCIsbi5hc3luY1RodW5rPVwiYXN5bmNUaHVua1wiLG4pKSh6ZXx8e30pO2Z1bmN0aW9uIFh0KGUsdCl7cmV0dXJuYCR7ZX0vJHt0fWB9ZnVuY3Rpb24gR2Uoe2NyZWF0b3JzOmV9PXt9KXtsZXQgdD1lPy5hc3luY1RodW5rPy5bbHRdO3JldHVybiBmdW5jdGlvbihuKXtsZXR7bmFtZTpvLHJlZHVjZXJQYXRoOmE9b309bjtpZighbyl0aHJvdyBuZXcgRXJyb3IobSgxMSkpO3R5cGVvZiBwcm9jZXNzPFwidVwiO2xldCBzPSh0eXBlb2Ygbi5yZWR1Y2Vycz09XCJmdW5jdGlvblwiP24ucmVkdWNlcnMoUXQoKSk6bi5yZWR1Y2Vycyl8fHt9LHA9T2JqZWN0LmtleXMocyksYz17c2xpY2VDYXNlUmVkdWNlcnNCeU5hbWU6e30sc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGU6e30sYWN0aW9uQ3JlYXRvcnM6e30sc2xpY2VNYXRjaGVyczpbXX0sQT17YWRkQ2FzZShkLFQpe2xldCBnPXR5cGVvZiBkPT1cInN0cmluZ1wiP2Q6ZC50eXBlO2lmKCFnKXRocm93IG5ldyBFcnJvcihtKDEyKSk7aWYoZyBpbiBjLnNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlKXRocm93IG5ldyBFcnJvcihtKDEzKSk7cmV0dXJuIGMuc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGVbZ109VCxBfSxhZGRNYXRjaGVyKGQsVCl7cmV0dXJuIGMuc2xpY2VNYXRjaGVycy5wdXNoKHttYXRjaGVyOmQscmVkdWNlcjpUfSksQX0sZXhwb3NlQWN0aW9uKGQsVCl7cmV0dXJuIGMuYWN0aW9uQ3JlYXRvcnNbZF09VCxBfSxleHBvc2VDYXNlUmVkdWNlcihkLFQpe3JldHVybiBjLnNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lW2RdPVQsQX19O3AuZm9yRWFjaChkPT57bGV0IFQ9c1tkXSxnPXtyZWR1Y2VyTmFtZTpkLHR5cGU6WHQobyxkKSxjcmVhdGVOb3RhdGlvbjp0eXBlb2Ygbi5yZWR1Y2Vycz09XCJmdW5jdGlvblwifTtadChUKT90bihnLFQsQSx0KTpZdChnLFQsQSl9KTtmdW5jdGlvbiBpKCl7bGV0W2Q9e30sVD1bXSxnPXZvaWQgMF09dHlwZW9mIG4uZXh0cmFSZWR1Y2Vycz09XCJmdW5jdGlvblwiP3VlKG4uZXh0cmFSZWR1Y2Vycyk6W24uZXh0cmFSZWR1Y2Vyc10sRT17Li4uZCwuLi5jLnNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlfTtyZXR1cm4gbGUobi5pbml0aWFsU3RhdGUsQz0+e2ZvcihsZXQgUiBpbiBFKUMuYWRkQ2FzZShSLEVbUl0pO2ZvcihsZXQgUiBvZiBjLnNsaWNlTWF0Y2hlcnMpQy5hZGRNYXRjaGVyKFIubWF0Y2hlcixSLnJlZHVjZXIpO2ZvcihsZXQgUiBvZiBUKUMuYWRkTWF0Y2hlcihSLm1hdGNoZXIsUi5yZWR1Y2VyKTtnJiZDLmFkZERlZmF1bHRDYXNlKGcpfSl9bGV0IHU9ZD0+ZCx5PW5ldyBNYXAsaztmdW5jdGlvbiBsKGQsVCl7cmV0dXJuIGt8fChrPWkoKSksayhkLFQpfWZ1bmN0aW9uIGgoKXtyZXR1cm4ga3x8KGs9aSgpKSxrLmdldEluaXRpYWxTdGF0ZSgpfWZ1bmN0aW9uIHgoZCxUPSExKXtmdW5jdGlvbiBnKEMpe2xldCBSPUNbZF07cmV0dXJuIHR5cGVvZiBSPlwidVwiJiZUJiYoUj1oKCkpLFJ9ZnVuY3Rpb24gRShDPXUpe2xldCBSPUcoeSxULHtpbnNlcnQ6KCk9Pm5ldyBXZWFrTWFwfSk7cmV0dXJuIEcoUixDLHtpbnNlcnQ6KCk9PntsZXQgej17fTtmb3IobGV0W04sWl1vZiBPYmplY3QuZW50cmllcyhuLnNlbGVjdG9ycz8/e30pKXpbTl09SnQoWixDLGgsVCk7cmV0dXJuIHp9fSl9cmV0dXJue3JlZHVjZXJQYXRoOmQsZ2V0U2VsZWN0b3JzOkUsZ2V0IHNlbGVjdG9ycygpe3JldHVybiBFKGcpfSxzZWxlY3RTbGljZTpnfX1sZXQgZj17bmFtZTpvLHJlZHVjZXI6bCxhY3Rpb25zOmMuYWN0aW9uQ3JlYXRvcnMsY2FzZVJlZHVjZXJzOmMuc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUsZ2V0SW5pdGlhbFN0YXRlOmgsLi4ueChhKSxpbmplY3RJbnRvKGQse3JlZHVjZXJQYXRoOlQsLi4uZ309e30pe2xldCBFPVQ/P2E7cmV0dXJuIGQuaW5qZWN0KHtyZWR1Y2VyUGF0aDpFLHJlZHVjZXI6bH0sZyksey4uLmYsLi4ueChFLCEwKX19fTtyZXR1cm4gZn19ZnVuY3Rpb24gSnQoZSx0LHIsbil7ZnVuY3Rpb24gbyhhLC4uLnMpe2xldCBwPXQoYSk7cmV0dXJuIHR5cGVvZiBwPlwidVwiJiZuJiYocD1yKCkpLGUocCwuLi5zKX1yZXR1cm4gby51bndyYXBwZWQ9ZSxvfXZhciBmdD1HZSgpO2Z1bmN0aW9uIFF0KCl7ZnVuY3Rpb24gZSh0LHIpe3JldHVybntfcmVkdWNlckRlZmluaXRpb25UeXBlOlwiYXN5bmNUaHVua1wiLHBheWxvYWRDcmVhdG9yOnQsLi4ucn19cmV0dXJuIGUud2l0aFR5cGVzPSgpPT5lLHtyZWR1Y2VyKHQpe3JldHVybiBPYmplY3QuYXNzaWduKHtbdC5uYW1lXSguLi5yKXtyZXR1cm4gdCguLi5yKX19W3QubmFtZV0se19yZWR1Y2VyRGVmaW5pdGlvblR5cGU6XCJyZWR1Y2VyXCJ9KX0scHJlcGFyZWRSZWR1Y2VyKHQscil7cmV0dXJue19yZWR1Y2VyRGVmaW5pdGlvblR5cGU6XCJyZWR1Y2VyV2l0aFByZXBhcmVcIixwcmVwYXJlOnQscmVkdWNlcjpyfX0sYXN5bmNUaHVuazplfX1mdW5jdGlvbiBZdCh7dHlwZTplLHJlZHVjZXJOYW1lOnQsY3JlYXRlTm90YXRpb246cn0sbixvKXtsZXQgYSxzO2lmKFwicmVkdWNlclwiaW4gbil7aWYociYmIWVuKG4pKXRocm93IG5ldyBFcnJvcihtKDE3KSk7YT1uLnJlZHVjZXIscz1uLnByZXBhcmV9ZWxzZSBhPW47by5hZGRDYXNlKGUsYSkuZXhwb3NlQ2FzZVJlZHVjZXIodCxhKS5leHBvc2VBY3Rpb24odCxzP00oZSxzKTpNKGUpKX1mdW5jdGlvbiBadChlKXtyZXR1cm4gZS5fcmVkdWNlckRlZmluaXRpb25UeXBlPT09XCJhc3luY1RodW5rXCJ9ZnVuY3Rpb24gZW4oZSl7cmV0dXJuIGUuX3JlZHVjZXJEZWZpbml0aW9uVHlwZT09PVwicmVkdWNlcldpdGhQcmVwYXJlXCJ9ZnVuY3Rpb24gdG4oe3R5cGU6ZSxyZWR1Y2VyTmFtZTp0fSxyLG4sbyl7aWYoIW8pdGhyb3cgbmV3IEVycm9yKG0oMTgpKTtsZXR7cGF5bG9hZENyZWF0b3I6YSxmdWxmaWxsZWQ6cyxwZW5kaW5nOnAscmVqZWN0ZWQ6YyxzZXR0bGVkOkEsb3B0aW9uczppfT1yLHU9byhlLGEsaSk7bi5leHBvc2VBY3Rpb24odCx1KSxzJiZuLmFkZENhc2UodS5mdWxmaWxsZWQscykscCYmbi5hZGRDYXNlKHUucGVuZGluZyxwKSxjJiZuLmFkZENhc2UodS5yZWplY3RlZCxjKSxBJiZuLmFkZE1hdGNoZXIodS5zZXR0bGVkLEEpLG4uZXhwb3NlQ2FzZVJlZHVjZXIodCx7ZnVsZmlsbGVkOnN8fGhlLHBlbmRpbmc6cHx8aGUscmVqZWN0ZWQ6Y3x8aGUsc2V0dGxlZDpBfHxoZX0pfWZ1bmN0aW9uIGhlKCl7fWZ1bmN0aW9uIG5uKCl7cmV0dXJue2lkczpbXSxlbnRpdGllczp7fX19ZnVuY3Rpb24geXQoZSl7ZnVuY3Rpb24gdChyPXt9LG4pe2xldCBvPU9iamVjdC5hc3NpZ24obm4oKSxyKTtyZXR1cm4gbj9lLnNldEFsbChvLG4pOm99cmV0dXJue2dldEluaXRpYWxTdGF0ZTp0fX1mdW5jdGlvbiBodCgpe2Z1bmN0aW9uIGUodCxyPXt9KXtsZXR7Y3JlYXRlU2VsZWN0b3I6bj1uZX09cixvPXU9PnUuaWRzLGE9dT0+dS5lbnRpdGllcyxzPW4obyxhLCh1LHkpPT51Lm1hcChrPT55W2tdKSkscD0odSx5KT0+eSxjPSh1LHkpPT51W3ldLEE9bihvLHU9PnUubGVuZ3RoKTtpZighdClyZXR1cm57c2VsZWN0SWRzOm8sc2VsZWN0RW50aXRpZXM6YSxzZWxlY3RBbGw6cyxzZWxlY3RUb3RhbDpBLHNlbGVjdEJ5SWQ6bihhLHAsYyl9O2xldCBpPW4odCxhKTtyZXR1cm57c2VsZWN0SWRzOm4odCxvKSxzZWxlY3RFbnRpdGllczppLHNlbGVjdEFsbDpuKHQscyksc2VsZWN0VG90YWw6bih0LEEpLHNlbGVjdEJ5SWQ6bihpLHAsYyl9fXJldHVybntnZXRTZWxlY3RvcnM6ZX19dmFyIFR0PXJlcXVpcmUoXCJpbW1lclwiKTt2YXIgQWU9cmVxdWlyZShcImltbWVyXCIpO3ZhciBybj1BZS5pc0RyYWZ0O2Z1bmN0aW9uIEF0KGUpe2xldCB0PVAoKHIsbik9PmUobikpO3JldHVybiBmdW5jdGlvbihuKXtyZXR1cm4gdChuLHZvaWQgMCl9fWZ1bmN0aW9uIFAoZSl7cmV0dXJuIGZ1bmN0aW9uKHIsbil7ZnVuY3Rpb24gbyhzKXtyZXR1cm4gYWUocyl9bGV0IGE9cz0+e28obik/ZShuLnBheWxvYWQscyk6ZShuLHMpfTtyZXR1cm4gcm4ocik/KGEocikscik6KDAsQWUucHJvZHVjZSkocixhKX19dmFyIFRlPXJlcXVpcmUoXCJpbW1lclwiKTtmdW5jdGlvbiBfKGUsdCl7cmV0dXJuIHQoZSl9ZnVuY3Rpb24gTyhlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKXx8KGU9T2JqZWN0LnZhbHVlcyhlKSksZX1mdW5jdGlvbiBtZShlKXtyZXR1cm4oMCxUZS5pc0RyYWZ0KShlKT8oMCxUZS5jdXJyZW50KShlKTplfWZ1bmN0aW9uIFNlKGUsdCxyKXtlPU8oZSk7bGV0IG49bWUoci5pZHMpLG89bmV3IFNldChuKSxhPVtdLHM9W107Zm9yKGxldCBwIG9mIGUpe2xldCBjPV8ocCx0KTtvLmhhcyhjKT9zLnB1c2goe2lkOmMsY2hhbmdlczpwfSk6YS5wdXNoKHApfXJldHVyblthLHMsbl19ZnVuY3Rpb24gZ2UoZSl7ZnVuY3Rpb24gdChsLGgpe2xldCB4PV8obCxlKTt4IGluIGguZW50aXRpZXN8fChoLmlkcy5wdXNoKHgpLGguZW50aXRpZXNbeF09bCl9ZnVuY3Rpb24gcihsLGgpe2w9TyhsKTtmb3IobGV0IHggb2YgbCl0KHgsaCl9ZnVuY3Rpb24gbihsLGgpe2xldCB4PV8obCxlKTt4IGluIGguZW50aXRpZXN8fGguaWRzLnB1c2goeCksaC5lbnRpdGllc1t4XT1sfWZ1bmN0aW9uIG8obCxoKXtsPU8obCk7Zm9yKGxldCB4IG9mIGwpbih4LGgpfWZ1bmN0aW9uIGEobCxoKXtsPU8obCksaC5pZHM9W10saC5lbnRpdGllcz17fSxyKGwsaCl9ZnVuY3Rpb24gcyhsLGgpe3JldHVybiBwKFtsXSxoKX1mdW5jdGlvbiBwKGwsaCl7bGV0IHg9ITE7bC5mb3JFYWNoKGY9PntmIGluIGguZW50aXRpZXMmJihkZWxldGUgaC5lbnRpdGllc1tmXSx4PSEwKX0pLHgmJihoLmlkcz1oLmlkcy5maWx0ZXIoZj0+ZiBpbiBoLmVudGl0aWVzKSl9ZnVuY3Rpb24gYyhsKXtPYmplY3QuYXNzaWduKGwse2lkczpbXSxlbnRpdGllczp7fX0pfWZ1bmN0aW9uIEEobCxoLHgpe2xldCBmPXguZW50aXRpZXNbaC5pZF07aWYoZj09PXZvaWQgMClyZXR1cm4hMTtsZXQgZD1PYmplY3QuYXNzaWduKHt9LGYsaC5jaGFuZ2VzKSxUPV8oZCxlKSxnPVQhPT1oLmlkO3JldHVybiBnJiYobFtoLmlkXT1ULGRlbGV0ZSB4LmVudGl0aWVzW2guaWRdKSx4LmVudGl0aWVzW1RdPWQsZ31mdW5jdGlvbiBpKGwsaCl7cmV0dXJuIHUoW2xdLGgpfWZ1bmN0aW9uIHUobCxoKXtsZXQgeD17fSxmPXt9O2wuZm9yRWFjaChUPT57VC5pZCBpbiBoLmVudGl0aWVzJiYoZltULmlkXT17aWQ6VC5pZCxjaGFuZ2VzOnsuLi5mW1QuaWRdP2ZbVC5pZF0uY2hhbmdlczpudWxsLC4uLlQuY2hhbmdlc319KX0pLGw9T2JqZWN0LnZhbHVlcyhmKSxsLmxlbmd0aD4wJiZsLmZpbHRlcihnPT5BKHgsZyxoKSkubGVuZ3RoPjAmJihoLmlkcz1PYmplY3QudmFsdWVzKGguZW50aXRpZXMpLm1hcChnPT5fKGcsZSkpKX1mdW5jdGlvbiB5KGwsaCl7cmV0dXJuIGsoW2xdLGgpfWZ1bmN0aW9uIGsobCxoKXtsZXRbeCxmXT1TZShsLGUsaCk7dShmLGgpLHIoeCxoKX1yZXR1cm57cmVtb3ZlQWxsOkF0KGMpLGFkZE9uZTpQKHQpLGFkZE1hbnk6UChyKSxzZXRPbmU6UChuKSxzZXRNYW55OlAobyksc2V0QWxsOlAoYSksdXBkYXRlT25lOlAoaSksdXBkYXRlTWFueTpQKHUpLHVwc2VydE9uZTpQKHkpLHVwc2VydE1hbnk6UChrKSxyZW1vdmVPbmU6UChzKSxyZW1vdmVNYW55OlAocCl9fWZ1bmN0aW9uIG9uKGUsdCxyKXtsZXQgbj0wLG89ZS5sZW5ndGg7Zm9yKDtuPG87KXtsZXQgYT1uK28+Pj4xLHM9ZVthXTtyKHQscyk+PTA/bj1hKzE6bz1hfXJldHVybiBufWZ1bmN0aW9uIGFuKGUsdCxyKXtsZXQgbj1vbihlLHQscik7cmV0dXJuIGUuc3BsaWNlKG4sMCx0KSxlfWZ1bmN0aW9uIG10KGUsdCl7bGV0e3JlbW92ZU9uZTpyLHJlbW92ZU1hbnk6bixyZW1vdmVBbGw6b309Z2UoZSk7ZnVuY3Rpb24gYShmLGQpe3JldHVybiBzKFtmXSxkKX1mdW5jdGlvbiBzKGYsZCxUKXtmPU8oZik7bGV0IGc9bmV3IFNldChUPz8oMCxUdC5jdXJyZW50KShkLmlkcykpLEU9Zi5maWx0ZXIoQz0+IWcuaGFzKF8oQyxlKSkpO0UubGVuZ3RoIT09MCYmeChkLEUpfWZ1bmN0aW9uIHAoZixkKXtyZXR1cm4gYyhbZl0sZCl9ZnVuY3Rpb24gYyhmLGQpe2lmKGY9TyhmKSxmLmxlbmd0aCE9PTApe2ZvcihsZXQgVCBvZiBmKWRlbGV0ZSBkLmVudGl0aWVzW2UoVCldO3goZCxmKX19ZnVuY3Rpb24gQShmLGQpe2Y9TyhmKSxkLmVudGl0aWVzPXt9LGQuaWRzPVtdLHMoZixkLFtdKX1mdW5jdGlvbiBpKGYsZCl7cmV0dXJuIHUoW2ZdLGQpfWZ1bmN0aW9uIHUoZixkKXtsZXQgVD0hMSxnPSExO2ZvcihsZXQgRSBvZiBmKXtsZXQgQz1kLmVudGl0aWVzW0UuaWRdO2lmKCFDKWNvbnRpbnVlO1Q9ITAsT2JqZWN0LmFzc2lnbihDLEUuY2hhbmdlcyk7bGV0IFI9ZShDKTtpZihFLmlkIT09Uil7Zz0hMCxkZWxldGUgZC5lbnRpdGllc1tFLmlkXTtsZXQgej1kLmlkcy5pbmRleE9mKEUuaWQpO2QuaWRzW3pdPVIsZC5lbnRpdGllc1tSXT1DfX1UJiZ4KGQsW10sVCxnKX1mdW5jdGlvbiB5KGYsZCl7cmV0dXJuIGsoW2ZdLGQpfWZ1bmN0aW9uIGsoZixkKXtsZXRbVCxnLEVdPVNlKGYsZSxkKTtnLmxlbmd0aCYmdShnLGQpLFQubGVuZ3RoJiZzKFQsZCxFKX1mdW5jdGlvbiBsKGYsZCl7aWYoZi5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IobGV0IFQ9MDtUPGYubGVuZ3RoJiZUPGQubGVuZ3RoO1QrKylpZihmW1RdIT09ZFtUXSlyZXR1cm4hMTtyZXR1cm4hMH1sZXQgeD0oZixkLFQsZyk9PntsZXQgRT1tZShmLmVudGl0aWVzKSxDPW1lKGYuaWRzKSxSPWYuZW50aXRpZXMsej1DO2cmJih6PUFycmF5LmZyb20obmV3IFNldChDKSkpO2xldCBOPVtdO2ZvcihsZXQgcSBvZiB6KXtsZXQgUWU9RVtxXTtRZSYmTi5wdXNoKFFlKX1sZXQgWj1OLmxlbmd0aD09PTA7Zm9yKGxldCBxIG9mIGQpUltlKHEpXT1xLFp8fGFuKE4scSx0KTtaP049ZC5zbGljZSgpLnNvcnQodCk6VCYmTi5zb3J0KHQpO2xldCBKZT1OLm1hcChlKTtsKEMsSmUpfHwoZi5pZHM9SmUpfTtyZXR1cm57cmVtb3ZlT25lOnIscmVtb3ZlTWFueTpuLHJlbW92ZUFsbDpvLGFkZE9uZTpQKGEpLHVwZGF0ZU9uZTpQKGkpLHVwc2VydE9uZTpQKHkpLHNldE9uZTpQKHApLHNldE1hbnk6UChjKSxzZXRBbGw6UChBKSxhZGRNYW55OlAocyksdXBkYXRlTWFueTpQKHUpLHVwc2VydE1hbnk6UChrKX19ZnVuY3Rpb24gU3QoZT17fSl7bGV0e3NlbGVjdElkOnQsc29ydENvbXBhcmVyOnJ9PXtzb3J0Q29tcGFyZXI6ITEsc2VsZWN0SWQ6cz0+cy5pZCwuLi5lfSxuPXI/bXQodCxyKTpnZSh0KSxvPXl0KG4pLGE9aHQoKTtyZXR1cm57c2VsZWN0SWQ6dCxzb3J0Q29tcGFyZXI6ciwuLi5vLC4uLmEsLi4ubn19dmFyIE10PXJlcXVpcmUoXCJyZWR1eFwiKTt2YXIgc249XCJ0YXNrXCIsZ3Q9XCJsaXN0ZW5lclwiLGt0PVwiY29tcGxldGVkXCIsQmU9XCJjYW5jZWxsZWRcIix4dD1gdGFzay0ke0JlfWAsQ3Q9YHRhc2stJHtrdH1gLGtlPWAke2d0fS0ke0JlfWAsUnQ9YCR7Z3R9LSR7a3R9YCxJPWNsYXNze2NvbnN0cnVjdG9yKHQpe3RoaXMuY29kZT10O3RoaXMubWVzc2FnZT1gJHtzbn0gJHtCZX0gKHJlYXNvbjogJHt0fSlgfW5hbWU9XCJUYXNrQWJvcnRFcnJvclwiO21lc3NhZ2V9O3ZhciB4ZT0oZSx0KT0+e2lmKHR5cGVvZiBlIT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IEVycm9yKG0oMzIpKX0sSD0oKT0+e30sQ2U9KGUsdD1IKT0+KGUuY2F0Y2godCksZSksUmU9KGUsdCk9PihlLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLHQse29uY2U6ITB9KSwoKT0+ZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIix0KSksTD0oZSx0KT0+e2xldCByPWUuc2lnbmFsO3IuYWJvcnRlZHx8KFwicmVhc29uXCJpbiByfHxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcInJlYXNvblwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnQsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSksZS5hYm9ydCh0KSl9O3ZhciBVPWU9PntpZihlLmFib3J0ZWQpe2xldHtyZWFzb246dH09ZTt0aHJvdyBuZXcgSSh0KX19O2Z1bmN0aW9uIEtlKGUsdCl7bGV0IHI9SDtyZXR1cm4gbmV3IFByb21pc2UoKG4sbyk9PntsZXQgYT0oKT0+byhuZXcgSShlLnJlYXNvbikpO2lmKGUuYWJvcnRlZCl7YSgpO3JldHVybn1yPVJlKGUsYSksdC5maW5hbGx5KCgpPT5yKCkpLnRoZW4obixvKX0pLmZpbmFsbHkoKCk9PntyPUh9KX12YXIgRXQ9YXN5bmMoZSx0KT0+e3RyeXtyZXR1cm4gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCkse3N0YXR1czpcIm9rXCIsdmFsdWU6YXdhaXQgZSgpfX1jYXRjaChyKXtyZXR1cm57c3RhdHVzOnIgaW5zdGFuY2VvZiBJP1wiY2FuY2VsbGVkXCI6XCJyZWplY3RlZFwiLGVycm9yOnJ9fWZpbmFsbHl7dD8uKCl9fSxZPWU9PnQ9PkNlKEtlKGUsdCkudGhlbihyPT4oVShlKSxyKSkpLEhlPWU9PntsZXQgdD1ZKGUpO3JldHVybiByPT50KG5ldyBQcm9taXNlKG49PnNldFRpbWVvdXQobixyKSkpfTt2YXJ7YXNzaWduOmNufT1PYmplY3Qsd3Q9e30sRWU9XCJsaXN0ZW5lck1pZGRsZXdhcmVcIixkbj0oZSx0KT0+e2xldCByPW49PlJlKGUsKCk9PkwobixlLnJlYXNvbikpO3JldHVybihuLG8pPT57eGUobixcInRhc2tFeGVjdXRvclwiKTtsZXQgYT1uZXcgQWJvcnRDb250cm9sbGVyO3IoYSk7bGV0IHM9RXQoYXN5bmMoKT0+e1UoZSksVShhLnNpZ25hbCk7bGV0IHA9YXdhaXQgbih7cGF1c2U6WShhLnNpZ25hbCksZGVsYXk6SGUoYS5zaWduYWwpLHNpZ25hbDphLnNpZ25hbH0pO3JldHVybiBVKGEuc2lnbmFsKSxwfSwoKT0+TChhLEN0KSk7cmV0dXJuIG8/LmF1dG9Kb2luJiZ0LnB1c2gocy5jYXRjaChIKSkse3Jlc3VsdDpZKGUpKHMpLGNhbmNlbCgpe0woYSx4dCl9fX19LHVuPShlLHQpPT57bGV0IHI9YXN5bmMobixvKT0+e1UodCk7bGV0IGE9KCk9Pnt9LHA9W25ldyBQcm9taXNlKChjLEEpPT57bGV0IGk9ZSh7cHJlZGljYXRlOm4sZWZmZWN0Oih1LHkpPT57eS51bnN1YnNjcmliZSgpLGMoW3UseS5nZXRTdGF0ZSgpLHkuZ2V0T3JpZ2luYWxTdGF0ZSgpXSl9fSk7YT0oKT0+e2koKSxBKCl9fSldO28hPW51bGwmJnAucHVzaChuZXcgUHJvbWlzZShjPT5zZXRUaW1lb3V0KGMsbyxudWxsKSkpO3RyeXtsZXQgYz1hd2FpdCBLZSh0LFByb21pc2UucmFjZShwKSk7cmV0dXJuIFUodCksY31maW5hbGx5e2EoKX19O3JldHVybihuLG8pPT5DZShyKG4sbykpfSxidD1lPT57bGV0e3R5cGU6dCxhY3Rpb25DcmVhdG9yOnIsbWF0Y2hlcjpuLHByZWRpY2F0ZTpvLGVmZmVjdDphfT1lO2lmKHQpbz1NKHQpLm1hdGNoO2Vsc2UgaWYocil0PXIudHlwZSxvPXIubWF0Y2g7ZWxzZSBpZihuKW89bjtlbHNlIGlmKCFvKXRocm93IG5ldyBFcnJvcihtKDIxKSk7cmV0dXJuIHhlKGEsXCJvcHRpb25zLmxpc3RlbmVyXCIpLHtwcmVkaWNhdGU6byx0eXBlOnQsZWZmZWN0OmF9fSxJdD1PYmplY3QuYXNzaWduKGU9PntsZXR7dHlwZTp0LHByZWRpY2F0ZTpyLGVmZmVjdDpufT1idChlKTtyZXR1cm57aWQ6YigpLGVmZmVjdDpuLHR5cGU6dCxwcmVkaWNhdGU6cixwZW5kaW5nOm5ldyBTZXQsdW5zdWJzY3JpYmU6KCk9Pnt0aHJvdyBuZXcgRXJyb3IobSgyMikpfX19LHt3aXRoVHlwZXM6KCk9Pkl0fSkscWU9ZT0+e2UucGVuZGluZy5mb3JFYWNoKHQ9PntMKHQsa2UpfSl9LGxuPWU9PigpPT57ZS5mb3JFYWNoKHFlKSxlLmNsZWFyKCl9LFB0PShlLHQscik9Pnt0cnl7ZSh0LHIpfWNhdGNoKG4pe3NldFRpbWVvdXQoKCk9Pnt0aHJvdyBufSwwKX19LHdlPU9iamVjdC5hc3NpZ24oTShgJHtFZX0vYWRkYCkse3dpdGhUeXBlczooKT0+d2V9KSwkZT1NKGAke0VlfS9yZW1vdmVBbGxgKSxQZT1PYmplY3QuYXNzaWduKE0oYCR7RWV9L3JlbW92ZWApLHt3aXRoVHlwZXM6KCk9PlBlfSkscG49KC4uLmUpPT57Y29uc29sZS5lcnJvcihgJHtFZX0vZXJyb3JgLC4uLmUpfSx2dD0oZT17fSk9PntsZXQgdD1uZXcgTWFwLHtleHRyYTpyLG9uRXJyb3I6bj1wbn09ZTt4ZShuLFwib25FcnJvclwiKTtsZXQgbz1pPT4oaS51bnN1YnNjcmliZT0oKT0+dC5kZWxldGUoaS5pZCksdC5zZXQoaS5pZCxpKSx1PT57aS51bnN1YnNjcmliZSgpLHU/LmNhbmNlbEFjdGl2ZSYmcWUoaSl9KSxhPWk9PntsZXQgdT0kKEFycmF5LmZyb20odC52YWx1ZXMoKSkseT0+eS5lZmZlY3Q9PT1pLmVmZmVjdCk7cmV0dXJuIHV8fCh1PUl0KGkpKSxvKHUpfTtPYmplY3QuYXNzaWduKGEse3dpdGhUeXBlczooKT0+YX0pO2xldCBzPWk9PntsZXR7dHlwZTp1LGVmZmVjdDp5LHByZWRpY2F0ZTprfT1idChpKSxsPSQoQXJyYXkuZnJvbSh0LnZhbHVlcygpKSxoPT4odHlwZW9mIHU9PVwic3RyaW5nXCI/aC50eXBlPT09dTpoLnByZWRpY2F0ZT09PWspJiZoLmVmZmVjdD09PXkpO3JldHVybiBsJiYobC51bnN1YnNjcmliZSgpLGkuY2FuY2VsQWN0aXZlJiZxZShsKSksISFsfTtPYmplY3QuYXNzaWduKHMse3dpdGhUeXBlczooKT0+c30pO2xldCBwPWFzeW5jKGksdSx5LGspPT57bGV0IGw9bmV3IEFib3J0Q29udHJvbGxlcixoPXVuKGEsbC5zaWduYWwpLHg9W107dHJ5e2kucGVuZGluZy5hZGQobCksYXdhaXQgUHJvbWlzZS5yZXNvbHZlKGkuZWZmZWN0KHUsY24oe30seSx7Z2V0T3JpZ2luYWxTdGF0ZTprLGNvbmRpdGlvbjooZixkKT0+aChmLGQpLnRoZW4oQm9vbGVhbiksdGFrZTpoLGRlbGF5OkhlKGwuc2lnbmFsKSxwYXVzZTpZKGwuc2lnbmFsKSxleHRyYTpyLHNpZ25hbDpsLnNpZ25hbCxmb3JrOmRuKGwuc2lnbmFsLHgpLHVuc3Vic2NyaWJlOmkudW5zdWJzY3JpYmUsc3Vic2NyaWJlOigpPT57dC5zZXQoaS5pZCxpKX0sY2FuY2VsQWN0aXZlTGlzdGVuZXJzOigpPT57aS5wZW5kaW5nLmZvckVhY2goKGYsZCxUKT0+e2YhPT1sJiYoTChmLGtlKSxULmRlbGV0ZShmKSl9KX0sY2FuY2VsOigpPT57TChsLGtlKSxpLnBlbmRpbmcuZGVsZXRlKGwpfSx0aHJvd0lmQ2FuY2VsbGVkOigpPT57VShsLnNpZ25hbCl9fSkpKX1jYXRjaChmKXtmIGluc3RhbmNlb2YgSXx8UHQobixmLHtyYWlzZWRCeTpcImVmZmVjdFwifSl9ZmluYWxseXthd2FpdCBQcm9taXNlLmFsbCh4KSxMKGwsUnQpLGkucGVuZGluZy5kZWxldGUobCl9fSxjPWxuKHQpO3JldHVybnttaWRkbGV3YXJlOmk9PnU9Pnk9PntpZighKDAsTXQuaXNBY3Rpb24pKHkpKXJldHVybiB1KHkpO2lmKHdlLm1hdGNoKHkpKXJldHVybiBhKHkucGF5bG9hZCk7aWYoJGUubWF0Y2goeSkpe2MoKTtyZXR1cm59aWYoUGUubWF0Y2goeSkpcmV0dXJuIHMoeS5wYXlsb2FkKTtsZXQgaz1pLmdldFN0YXRlKCksbD0oKT0+e2lmKGs9PT13dCl0aHJvdyBuZXcgRXJyb3IobSgyMykpO3JldHVybiBrfSxoO3RyeXtpZihoPXUoeSksdC5zaXplPjApe2xldCB4PWkuZ2V0U3RhdGUoKSxmPUFycmF5LmZyb20odC52YWx1ZXMoKSk7Zm9yKGxldCBkIG9mIGYpe2xldCBUPSExO3RyeXtUPWQucHJlZGljYXRlKHkseCxrKX1jYXRjaChnKXtUPSExLFB0KG4sZyx7cmFpc2VkQnk6XCJwcmVkaWNhdGVcIn0pfVQmJnAoZCx5LGksbCl9fX1maW5hbGx5e2s9d3R9cmV0dXJuIGh9LHN0YXJ0TGlzdGVuaW5nOmEsc3RvcExpc3RlbmluZzpzLGNsZWFyTGlzdGVuZXJzOmN9fTt2YXIgRHQ9cmVxdWlyZShcInJlZHV4XCIpO3ZhciBmbj1lPT4oe2lkOmIoKSxtaWRkbGV3YXJlOmUsYXBwbGllZDpuZXcgTWFwfSkseW49ZT0+dD0+dD8ubWV0YT8uaW5zdGFuY2VJZD09PWUsT3Q9KCk9PntsZXQgZT1iKCksdD1uZXcgTWFwLHI9T2JqZWN0LmFzc2lnbihNKFwiZHluYW1pY01pZGRsZXdhcmUvYWRkXCIsKC4uLnApPT4oe3BheWxvYWQ6cCxtZXRhOntpbnN0YW5jZUlkOmV9fSkpLHt3aXRoVHlwZXM6KCk9PnJ9KSxuPU9iamVjdC5hc3NpZ24oZnVuY3Rpb24oLi4uYyl7Yy5mb3JFYWNoKEE9PntsZXQgaT0kKEFycmF5LmZyb20odC52YWx1ZXMoKSksdT0+dS5taWRkbGV3YXJlPT09QSk7aXx8KGk9Zm4oQSkpLHQuc2V0KGkuaWQsaSl9KX0se3dpdGhUeXBlczooKT0+bn0pLG89cD0+e2xldCBjPUFycmF5LmZyb20odC52YWx1ZXMoKSkubWFwKEE9PkcoQS5hcHBsaWVkLHAse2luc2VydDooKT0+QS5taWRkbGV3YXJlKHApfSkpO3JldHVybigwLER0LmNvbXBvc2UpKC4uLmMpfSxhPUsocix5bihlKSk7cmV0dXJue21pZGRsZXdhcmU6cD0+Yz0+QT0+YShBKT8obiguLi5BLnBheWxvYWQpLHAuZGlzcGF0Y2gpOm8ocCkoYykoQSksYWRkTWlkZGxld2FyZTpuLHdpdGhNaWRkbGV3YXJlOnIsaW5zdGFuY2VJZDplfX07dmFyIE50PXJlcXVpcmUoXCJyZWR1eFwiKTt2YXIgaG49ZT0+XCJyZWR1Y2VyUGF0aFwiaW4gZSYmdHlwZW9mIGUucmVkdWNlclBhdGg9PVwic3RyaW5nXCIsQW49ZT0+ZS5mbGF0TWFwKHQ9PmhuKHQpP1tbdC5yZWR1Y2VyUGF0aCx0LnJlZHVjZXJdXTpPYmplY3QuZW50cmllcyh0KSksWGU9U3ltYm9sLmZvcihcInJ0ay1zdGF0ZS1wcm94eS1vcmlnaW5hbFwiKSxUbj1lPT4hIWUmJiEhZVtYZV0sbW49bmV3IFdlYWtNYXAsU249KGUsdCk9PkcobW4sZSx7aW5zZXJ0OigpPT5uZXcgUHJveHkoZSx7Z2V0OihyLG4sbyk9PntpZihuPT09WGUpcmV0dXJuIHI7bGV0IGE9UmVmbGVjdC5nZXQocixuLG8pO2lmKHR5cGVvZiBhPlwidVwiKXtsZXQgcz10W24udG9TdHJpbmcoKV07aWYocyl7bGV0IHA9cyh2b2lkIDAse3R5cGU6YigpfSk7aWYodHlwZW9mIHA+XCJ1XCIpdGhyb3cgbmV3IEVycm9yKG0oMjQpKTtyZXR1cm4gcH19cmV0dXJuIGF9fSl9KSxnbj1lPT57aWYoIVRuKGUpKXRocm93IG5ldyBFcnJvcihtKDI1KSk7cmV0dXJuIGVbWGVdfSxrbj0oZT17fSk9PmU7ZnVuY3Rpb24ganQoLi4uZSl7bGV0IHQ9T2JqZWN0LmZyb21FbnRyaWVzKEFuKGUpKSxyPSgpPT5PYmplY3Qua2V5cyh0KS5sZW5ndGg/KDAsTnQuY29tYmluZVJlZHVjZXJzKSh0KTprbixuPXIoKTtmdW5jdGlvbiBvKHAsYyl7cmV0dXJuIG4ocCxjKX1vLndpdGhMYXp5TG9hZGVkU2xpY2VzPSgpPT5vO2xldCBhPShwLGM9e30pPT57bGV0e3JlZHVjZXJQYXRoOkEscmVkdWNlcjppfT1wLHU9dFtBXTtyZXR1cm4hYy5vdmVycmlkZUV4aXN0aW5nJiZ1JiZ1IT09aT8odHlwZW9mIHByb2Nlc3M8XCJ1XCIsbyk6KHRbQV09aSxuPXIoKSxvKX0scz1PYmplY3QuYXNzaWduKGZ1bmN0aW9uKGMsQSl7cmV0dXJuIGZ1bmN0aW9uKHUsLi4ueSl7cmV0dXJuIGMoU24oQT9BKHUsLi4ueSk6dSx0KSwuLi55KX19LHtvcmlnaW5hbDpnbn0pO3JldHVybiBPYmplY3QuYXNzaWduKG8se2luamVjdDphLHNlbGVjdG9yOnN9KX1mdW5jdGlvbiBtKGUpe3JldHVybmBNaW5pZmllZCBSZWR1eCBUb29sa2l0IGVycm9yICMke2V9OyB2aXNpdCBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL0Vycm9ycz9jb2RlPSR7ZX0gZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycy4gYH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHV4LXRvb2xraXQucHJvZHVjdGlvbi5taW4uY2pzLm1hcCIsIi8vIEF4aW9zIHYxLjcuMiBDb3B5cmlnaHQgKGMpIDIwMjQgTWF0dCBaYWJyaXNraWUgYW5kIGNvbnRyaWJ1dG9yc1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG5jb25zdCB7dG9TdHJpbmd9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IHtnZXRQcm90b3R5cGVPZn0gPSBPYmplY3Q7XG5cbmNvbnN0IGtpbmRPZiA9IChjYWNoZSA9PiB0aGluZyA9PiB7XG4gICAgY29uc3Qgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmNvbnN0IGtpbmRPZlRlc3QgPSAodHlwZSkgPT4ge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKHRoaW5nKSA9PiBraW5kT2YodGhpbmcpID09PSB0eXBlXG59O1xuXG5jb25zdCB0eXBlT2ZUZXN0ID0gdHlwZSA9PiB0aGluZyA9PiB0eXBlb2YgdGhpbmcgPT09IHR5cGU7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCB7aXNBcnJheX0gPSBBcnJheTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VuZGVmaW5lZCA9IHR5cGVPZlRlc3QoJ3VuZGVmaW5lZCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIGlzRnVuY3Rpb24odmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKSAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0FycmF5QnVmZmVyID0ga2luZE9mVGVzdCgnQXJyYXlCdWZmZXInKTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIGxldCByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJpbmcgPSB0eXBlT2ZUZXN0KCdzdHJpbmcnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Z1bmN0aW9uID0gdHlwZU9mVGVzdCgnZnVuY3Rpb24nKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc051bWJlciA9IHR5cGVPZlRlc3QoJ251bWJlcicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJvb2xlYW5cbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJvb2xlYW4sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jvb2xlYW4gPSB0aGluZyA9PiB0aGluZyA9PT0gdHJ1ZSB8fCB0aGluZyA9PT0gZmFsc2U7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWwpID0+IHtcbiAgaWYgKGtpbmRPZih2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiAocHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsKSAmJiAhKFN5bWJvbC5pdGVyYXRvciBpbiB2YWwpO1xufTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRGF0ZSA9IGtpbmRPZlRlc3QoJ0RhdGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZSA9IGtpbmRPZlRlc3QoJ0ZpbGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQmxvYiA9IGtpbmRPZlRlc3QoJ0Jsb2InKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVMaXN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGVMaXN0ID0ga2luZE9mVGVzdCgnRmlsZUxpc3QnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmVhbSA9ICh2YWwpID0+IGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRm9ybURhdGEgPSAodGhpbmcpID0+IHtcbiAgbGV0IGtpbmQ7XG4gIHJldHVybiB0aGluZyAmJiAoXG4gICAgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGluZyBpbnN0YW5jZW9mIEZvcm1EYXRhKSB8fCAoXG4gICAgICBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgKFxuICAgICAgICAoa2luZCA9IGtpbmRPZih0aGluZykpID09PSAnZm9ybWRhdGEnIHx8XG4gICAgICAgIC8vIGRldGVjdCBmb3JtLWRhdGEgaW5zdGFuY2VcbiAgICAgICAgKGtpbmQgPT09ICdvYmplY3QnICYmIGlzRnVuY3Rpb24odGhpbmcudG9TdHJpbmcpICYmIHRoaW5nLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IEZvcm1EYXRhXScpXG4gICAgICApXG4gICAgKVxuICApXG59O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuY29uc3QgW2lzUmVhZGFibGVTdHJlYW0sIGlzUmVxdWVzdCwgaXNSZXNwb25zZSwgaXNIZWFkZXJzXSA9IFsnUmVhZGFibGVTdHJlYW0nLCAnUmVxdWVzdCcsICdSZXNwb25zZScsICdIZWFkZXJzJ10ubWFwKGtpbmRPZlRlc3QpO1xuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5jb25zdCB0cmltID0gKHN0cikgPT4gc3RyLnRyaW0gP1xuICBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLCAnJyk7XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzID0gZmFsc2VdXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4sIHthbGxPd25LZXlzID0gZmFsc2V9ID0ge30pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaTtcbiAgbGV0IGw7XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGNvbnN0IGtleXMgPSBhbGxPd25LZXlzID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKSA6IE9iamVjdC5rZXlzKG9iaik7XG4gICAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGtleTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmosIGtleSkge1xuICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIGxldCBfa2V5O1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIF9rZXkgPSBrZXlzW2ldO1xuICAgIGlmIChrZXkgPT09IF9rZXkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIF9rZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBfZ2xvYmFsID0gKCgpID0+IHtcbiAgLyplc2xpbnQgbm8tdW5kZWY6MCovXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGdsb2JhbFRoaXM7XG4gIHJldHVybiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpXG59KSgpO1xuXG5jb25zdCBpc0NvbnRleHREZWZpbmVkID0gKGNvbnRleHQpID0+ICFpc1VuZGVmaW5lZChjb250ZXh0KSAmJiBjb250ZXh0ICE9PSBfZ2xvYmFsO1xuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIGNvbnN0IHtjYXNlbGVzc30gPSBpc0NvbnRleHREZWZpbmVkKHRoaXMpICYmIHRoaXMgfHwge307XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBjb25zdCBhc3NpZ25WYWx1ZSA9ICh2YWwsIGtleSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEtleSA9IGNhc2VsZXNzICYmIGZpbmRLZXkocmVzdWx0LCBrZXkpIHx8IGtleTtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRbdGFyZ2V0S2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHJlc3VsdFt0YXJnZXRLZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbDtcbiAgICB9XG4gIH07XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYXJndW1lbnRzW2ldICYmIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXNdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmNvbnN0IGV4dGVuZCA9IChhLCBiLCB0aGlzQXJnLCB7YWxsT3duS2V5c309IHt9KSA9PiB7XG4gIGZvckVhY2goYiwgKHZhbCwga2V5KSA9PiB7XG4gICAgaWYgKHRoaXNBcmcgJiYgaXNGdW5jdGlvbih2YWwpKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0sIHthbGxPd25LZXlzfSk7XG4gIHJldHVybiBhO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn07XG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvYmplY3R9IFtwcm9wc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbZGVzY3JpcHRvcnNdXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGluaGVyaXRzID0gKGNvbnN0cnVjdG9yLCBzdXBlckNvbnN0cnVjdG9yLCBwcm9wcywgZGVzY3JpcHRvcnMpID0+IHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZSwgZGVzY3JpcHRvcnMpO1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnN0cnVjdG9yLCAnc3VwZXInLCB7XG4gICAgdmFsdWU6IHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlXG4gIH0pO1xuICBwcm9wcyAmJiBPYmplY3QuYXNzaWduKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvcHMpO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlIG9iamVjdCB3aXRoIGRlZXAgcHJvdG90eXBlIGNoYWluIHRvIGEgZmxhdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmogc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0T2JqXVxuICogQHBhcmFtIHtGdW5jdGlvbnxCb29sZWFufSBbZmlsdGVyXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BGaWx0ZXJdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuY29uc3QgdG9GbGF0T2JqZWN0ID0gKHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyLCBwcm9wRmlsdGVyKSA9PiB7XG4gIGxldCBwcm9wcztcbiAgbGV0IGk7XG4gIGxldCBwcm9wO1xuICBjb25zdCBtZXJnZWQgPSB7fTtcblxuICBkZXN0T2JqID0gZGVzdE9iaiB8fCB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIGlmIChzb3VyY2VPYmogPT0gbnVsbCkgcmV0dXJuIGRlc3RPYmo7XG5cbiAgZG8ge1xuICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqKTtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAoKCFwcm9wRmlsdGVyIHx8IHByb3BGaWx0ZXIocHJvcCwgc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgIW1lcmdlZFtwcm9wXSkge1xuICAgICAgICBkZXN0T2JqW3Byb3BdID0gc291cmNlT2JqW3Byb3BdO1xuICAgICAgICBtZXJnZWRbcHJvcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VPYmogPSBmaWx0ZXIgIT09IGZhbHNlICYmIGdldFByb3RvdHlwZU9mKHNvdXJjZU9iaik7XG4gIH0gd2hpbGUgKHNvdXJjZU9iaiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgc291cmNlT2JqICE9PSBPYmplY3QucHJvdG90eXBlKTtcblxuICByZXR1cm4gZGVzdE9iajtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIG5ldyBhcnJheSBmcm9tIGFycmF5IGxpa2Ugb2JqZWN0IG9yIG51bGwgaWYgZmFpbGVkXG4gKlxuICogQHBhcmFtIHsqfSBbdGhpbmddXG4gKlxuICogQHJldHVybnMgez9BcnJheX1cbiAqL1xuY29uc3QgdG9BcnJheSA9ICh0aGluZykgPT4ge1xuICBpZiAoIXRoaW5nKSByZXR1cm4gbnVsbDtcbiAgaWYgKGlzQXJyYXkodGhpbmcpKSByZXR1cm4gdGhpbmc7XG4gIGxldCBpID0gdGhpbmcubGVuZ3RoO1xuICBpZiAoIWlzTnVtYmVyKGkpKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgYXJyID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGFycltpXSA9IHRoaW5nW2ldO1xuICB9XG4gIHJldHVybiBhcnI7XG59O1xuXG4vKipcbiAqIENoZWNraW5nIGlmIHRoZSBVaW50OEFycmF5IGV4aXN0cyBhbmQgaWYgaXQgZG9lcywgaXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIHRoZVxuICogdGhpbmcgcGFzc2VkIGluIGlzIGFuIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXlcbiAqXG4gKiBAcGFyYW0ge1R5cGVkQXJyYXl9XG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuY29uc3QgaXNUeXBlZEFycmF5ID0gKFR5cGVkQXJyYXkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gdGhpbmcgPT4ge1xuICAgIHJldHVybiBUeXBlZEFycmF5ICYmIHRoaW5nIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbiAgfTtcbn0pKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBnZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbi8qKlxuICogRm9yIGVhY2ggZW50cnkgaW4gdGhlIG9iamVjdCwgY2FsbCB0aGUgZnVuY3Rpb24gd2l0aCB0aGUga2V5IGFuZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBlbnRyeS5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgZm9yRWFjaEVudHJ5ID0gKG9iaiwgZm4pID0+IHtcbiAgY29uc3QgZ2VuZXJhdG9yID0gb2JqICYmIG9ialtTeW1ib2wuaXRlcmF0b3JdO1xuXG4gIGNvbnN0IGl0ZXJhdG9yID0gZ2VuZXJhdG9yLmNhbGwob2JqKTtcblxuICBsZXQgcmVzdWx0O1xuXG4gIHdoaWxlICgocmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpKSAmJiAhcmVzdWx0LmRvbmUpIHtcbiAgICBjb25zdCBwYWlyID0gcmVzdWx0LnZhbHVlO1xuICAgIGZuLmNhbGwob2JqLCBwYWlyWzBdLCBwYWlyWzFdKTtcbiAgfVxufTtcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59O1xuXG4vKiBDaGVja2luZyBpZiB0aGUga2luZE9mVGVzdCBmdW5jdGlvbiByZXR1cm5zIHRydWUgd2hlbiBwYXNzZWQgYW4gSFRNTEZvcm1FbGVtZW50LiAqL1xuY29uc3QgaXNIVE1MRm9ybSA9IGtpbmRPZlRlc3QoJ0hUTUxGb3JtRWxlbWVudCcpO1xuXG5jb25zdCB0b0NhbWVsQ2FzZSA9IHN0ciA9PiB7XG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV9cXHNdKFthLXpcXGRdKShcXHcqKS9nLFxuICAgIGZ1bmN0aW9uIHJlcGxhY2VyKG0sIHAxLCBwMikge1xuICAgICAgcmV0dXJuIHAxLnRvVXBwZXJDYXNlKCkgKyBwMjtcbiAgICB9XG4gICk7XG59O1xuXG4vKiBDcmVhdGluZyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBjaGVjayBpZiBhbiBvYmplY3QgaGFzIGEgcHJvcGVydHkuICovXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9ICgoe2hhc093blByb3BlcnR5fSkgPT4gKG9iaiwgcHJvcCkgPT4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKShPYmplY3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUmVnRXhwID0ga2luZE9mVGVzdCgnUmVnRXhwJyk7XG5cbmNvbnN0IHJlZHVjZURlc2NyaXB0b3JzID0gKG9iaiwgcmVkdWNlcikgPT4ge1xuICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaik7XG4gIGNvbnN0IHJlZHVjZWREZXNjcmlwdG9ycyA9IHt9O1xuXG4gIGZvckVhY2goZGVzY3JpcHRvcnMsIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgbGV0IHJldDtcbiAgICBpZiAoKHJldCA9IHJlZHVjZXIoZGVzY3JpcHRvciwgbmFtZSwgb2JqKSkgIT09IGZhbHNlKSB7XG4gICAgICByZWR1Y2VkRGVzY3JpcHRvcnNbbmFtZV0gPSByZXQgfHwgZGVzY3JpcHRvcjtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgcmVkdWNlZERlc2NyaXB0b3JzKTtcbn07XG5cbi8qKlxuICogTWFrZXMgYWxsIG1ldGhvZHMgcmVhZC1vbmx5XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKi9cblxuY29uc3QgZnJlZXplTWV0aG9kcyA9IChvYmopID0+IHtcbiAgcmVkdWNlRGVzY3JpcHRvcnMob2JqLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIC8vIHNraXAgcmVzdHJpY3RlZCBwcm9wcyBpbiBzdHJpY3QgbW9kZVxuICAgIGlmIChpc0Z1bmN0aW9uKG9iaikgJiYgWydhcmd1bWVudHMnLCAnY2FsbGVyJywgJ2NhbGxlZSddLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWUgPSBvYmpbbmFtZV07XG5cbiAgICBpZiAoIWlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm47XG5cbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBmYWxzZTtcblxuICAgIGlmICgnd3JpdGFibGUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgIGRlc2NyaXB0b3Iud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICBkZXNjcmlwdG9yLnNldCA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0NhbiBub3QgcmV3cml0ZSByZWFkLW9ubHkgbWV0aG9kIFxcJycgKyBuYW1lICsgJ1xcJycpO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufTtcblxuY29uc3QgdG9PYmplY3RTZXQgPSAoYXJyYXlPclN0cmluZywgZGVsaW1pdGVyKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuXG4gIGNvbnN0IGRlZmluZSA9IChhcnIpID0+IHtcbiAgICBhcnIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBvYmpbdmFsdWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfTtcblxuICBpc0FycmF5KGFycmF5T3JTdHJpbmcpID8gZGVmaW5lKGFycmF5T3JTdHJpbmcpIDogZGVmaW5lKFN0cmluZyhhcnJheU9yU3RyaW5nKS5zcGxpdChkZWxpbWl0ZXIpKTtcblxuICByZXR1cm4gb2JqO1xufTtcblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuXG5jb25zdCB0b0Zpbml0ZU51bWJlciA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSA9ICt2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn07XG5cbmNvbnN0IEFMUEhBID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JztcblxuY29uc3QgRElHSVQgPSAnMDEyMzQ1Njc4OSc7XG5cbmNvbnN0IEFMUEhBQkVUID0ge1xuICBESUdJVCxcbiAgQUxQSEEsXG4gIEFMUEhBX0RJR0lUOiBBTFBIQSArIEFMUEhBLnRvVXBwZXJDYXNlKCkgKyBESUdJVFxufTtcblxuY29uc3QgZ2VuZXJhdGVTdHJpbmcgPSAoc2l6ZSA9IDE2LCBhbHBoYWJldCA9IEFMUEhBQkVULkFMUEhBX0RJR0lUKSA9PiB7XG4gIGxldCBzdHIgPSAnJztcbiAgY29uc3Qge2xlbmd0aH0gPSBhbHBoYWJldDtcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIHN0ciArPSBhbHBoYWJldFtNYXRoLnJhbmRvbSgpICogbGVuZ3RofDBdO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogSWYgdGhlIHRoaW5nIGlzIGEgRm9ybURhdGEgb2JqZWN0LCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaW5nIC0gVGhlIHRoaW5nIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NwZWNDb21wbGlhbnRGb3JtKHRoaW5nKSB7XG4gIHJldHVybiAhISh0aGluZyAmJiBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgdGhpbmdbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0Zvcm1EYXRhJyAmJiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdKTtcbn1cblxuY29uc3QgdG9KU09OT2JqZWN0ID0gKG9iaikgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBBcnJheSgxMCk7XG5cbiAgY29uc3QgdmlzaXQgPSAoc291cmNlLCBpKSA9PiB7XG5cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2Yoc291cmNlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYoISgndG9KU09OJyBpbiBzb3VyY2UpKSB7XG4gICAgICAgIHN0YWNrW2ldID0gc291cmNlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IHt9O1xuXG4gICAgICAgIGZvckVhY2goc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRWYWx1ZSA9IHZpc2l0KHZhbHVlLCBpICsgMSk7XG4gICAgICAgICAgIWlzVW5kZWZpbmVkKHJlZHVjZWRWYWx1ZSkgJiYgKHRhcmdldFtrZXldID0gcmVkdWNlZFZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhY2tbaV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9O1xuXG4gIHJldHVybiB2aXNpdChvYmosIDApO1xufTtcblxuY29uc3QgaXNBc3luY0ZuID0ga2luZE9mVGVzdCgnQXN5bmNGdW5jdGlvbicpO1xuXG5jb25zdCBpc1RoZW5hYmxlID0gKHRoaW5nKSA9PlxuICB0aGluZyAmJiAoaXNPYmplY3QodGhpbmcpIHx8IGlzRnVuY3Rpb24odGhpbmcpKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRoZW4pICYmIGlzRnVuY3Rpb24odGhpbmcuY2F0Y2gpO1xuXG52YXIgdXRpbHMkMSA9IHtcbiAgaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXIsXG4gIGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZyxcbiAgaXNOdW1iZXIsXG4gIGlzQm9vbGVhbixcbiAgaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3QsXG4gIGlzUmVhZGFibGVTdHJlYW0sXG4gIGlzUmVxdWVzdCxcbiAgaXNSZXNwb25zZSxcbiAgaXNIZWFkZXJzLFxuICBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlLFxuICBpc0ZpbGUsXG4gIGlzQmxvYixcbiAgaXNSZWdFeHAsXG4gIGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNUeXBlZEFycmF5LFxuICBpc0ZpbGVMaXN0LFxuICBmb3JFYWNoLFxuICBtZXJnZSxcbiAgZXh0ZW5kLFxuICB0cmltLFxuICBzdHJpcEJPTSxcbiAgaW5oZXJpdHMsXG4gIHRvRmxhdE9iamVjdCxcbiAga2luZE9mLFxuICBraW5kT2ZUZXN0LFxuICBlbmRzV2l0aCxcbiAgdG9BcnJheSxcbiAgZm9yRWFjaEVudHJ5LFxuICBtYXRjaEFsbCxcbiAgaXNIVE1MRm9ybSxcbiAgaGFzT3duUHJvcGVydHksXG4gIGhhc093blByb3A6IGhhc093blByb3BlcnR5LCAvLyBhbiBhbGlhcyB0byBhdm9pZCBFU0xpbnQgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIGRldGVjdGlvblxuICByZWR1Y2VEZXNjcmlwdG9ycyxcbiAgZnJlZXplTWV0aG9kcyxcbiAgdG9PYmplY3RTZXQsXG4gIHRvQ2FtZWxDYXNlLFxuICBub29wLFxuICB0b0Zpbml0ZU51bWJlcixcbiAgZmluZEtleSxcbiAgZ2xvYmFsOiBfZ2xvYmFsLFxuICBpc0NvbnRleHREZWZpbmVkLFxuICBBTFBIQUJFVCxcbiAgZ2VuZXJhdGVTdHJpbmcsXG4gIGlzU3BlY0NvbXBsaWFudEZvcm0sXG4gIHRvSlNPTk9iamVjdCxcbiAgaXNBc3luY0ZuLFxuICBpc1RoZW5hYmxlXG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIHJlc3BvbnNlICYmICh0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2UpO1xufVxuXG51dGlscyQxLmluaGVyaXRzKEF4aW9zRXJyb3IsIEVycm9yLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHV0aWxzJDEudG9KU09OT2JqZWN0KHRoaXMuY29uZmlnKSxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH1cbn0pO1xuXG5jb25zdCBwcm90b3R5cGUkMSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xuY29uc3QgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCcsXG4gICdFUlJfTk9UX1NVUFBPUlQnLFxuICAnRVJSX0lOVkFMSURfVVJMJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChjb2RlID0+IHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUkMSwgJ2lzQXhpb3NFcnJvcicsIHt2YWx1ZTogdHJ1ZX0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuQXhpb3NFcnJvci5mcm9tID0gKGVycm9yLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlLCBjdXN0b21Qcm9wcykgPT4ge1xuICBjb25zdCBheGlvc0Vycm9yID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUkMSk7XG5cbiAgdXRpbHMkMS50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0sIHByb3AgPT4ge1xuICAgIHJldHVybiBwcm9wICE9PSAnaXNBeGlvc0Vycm9yJztcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IuY2F1c2UgPSBlcnJvcjtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHN0cmljdFxudmFyIGh0dHBBZGFwdGVyID0gbnVsbDtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiB0aGluZyBpcyBhIGFycmF5IG9yIGpzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhpbmcgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIHZpc2l0ZWQuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmlzaXRhYmxlKHRoaW5nKSB7XG4gIHJldHVybiB1dGlscyQxLmlzUGxhaW5PYmplY3QodGhpbmcpIHx8IHV0aWxzJDEuaXNBcnJheSh0aGluZyk7XG59XG5cbi8qKlxuICogSXQgcmVtb3ZlcyB0aGUgYnJhY2tldHMgZnJvbSB0aGUgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUga2V5IHdpdGhvdXQgdGhlIGJyYWNrZXRzLlxuICovXG5mdW5jdGlvbiByZW1vdmVCcmFja2V0cyhrZXkpIHtcbiAgcmV0dXJuIHV0aWxzJDEuZW5kc1dpdGgoa2V5LCAnW10nKSA/IGtleS5zbGljZSgwLCAtMikgOiBrZXk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXRoLCBhIGtleSwgYW5kIGEgYm9vbGVhbiwgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjdXJyZW50IG9iamVjdCBiZWluZyBpdGVyYXRlZCBvdmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGRvdHMgLSBJZiB0cnVlLCB0aGUga2V5IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCBkb3RzIGluc3RlYWQgb2YgYnJhY2tldHMuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICovXG5mdW5jdGlvbiByZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIGtleTtcbiAgcmV0dXJuIHBhdGguY29uY2F0KGtleSkubWFwKGZ1bmN0aW9uIGVhY2godG9rZW4sIGkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB0b2tlbiA9IHJlbW92ZUJyYWNrZXRzKHRva2VuKTtcbiAgICByZXR1cm4gIWRvdHMgJiYgaSA/ICdbJyArIHRva2VuICsgJ10nIDogdG9rZW47XG4gIH0pLmpvaW4oZG90cyA/ICcuJyA6ICcnKTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgYXJyYXkgaXMgYW4gYXJyYXkgYW5kIG5vbmUgb2YgaXRzIGVsZW1lbnRzIGFyZSB2aXNpdGFibGUsIHRoZW4gaXQncyBhIGZsYXQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbGF0QXJyYXkoYXJyKSB7XG4gIHJldHVybiB1dGlscyQxLmlzQXJyYXkoYXJyKSAmJiAhYXJyLnNvbWUoaXNWaXNpdGFibGUpO1xufVxuXG5jb25zdCBwcmVkaWNhdGVzID0gdXRpbHMkMS50b0ZsYXRPYmplY3QodXRpbHMkMSwge30sIG51bGwsIGZ1bmN0aW9uIGZpbHRlcihwcm9wKSB7XG4gIHJldHVybiAvXmlzW0EtWl0vLnRlc3QocHJvcCk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy52aXNpdG9yXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXRhVG9rZW5zID0gdHJ1ZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZG90cyA9IGZhbHNlXVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gW29wdGlvbnMuaW5kZXhlcyA9IGZhbHNlXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbi8qKlxuICogSXQgY29udmVydHMgYW4gb2JqZWN0IGludG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gY29udmVydCB0byBmb3JtIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgLSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSwgb3B0aW9ucykge1xuICBpZiAoIXV0aWxzJDEuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IChGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzJDEudG9GbGF0T2JqZWN0KG9wdGlvbnMsIHtcbiAgICBtZXRhVG9rZW5zOiB0cnVlLFxuICAgIGRvdHM6IGZhbHNlLFxuICAgIGluZGV4ZXM6IGZhbHNlXG4gIH0sIGZhbHNlLCBmdW5jdGlvbiBkZWZpbmVkKG9wdGlvbiwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gICAgcmV0dXJuICF1dGlscyQxLmlzVW5kZWZpbmVkKHNvdXJjZVtvcHRpb25dKTtcbiAgfSk7XG5cbiAgY29uc3QgbWV0YVRva2VucyA9IG9wdGlvbnMubWV0YVRva2VucztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gIGNvbnN0IHZpc2l0b3IgPSBvcHRpb25zLnZpc2l0b3IgfHwgZGVmYXVsdFZpc2l0b3I7XG4gIGNvbnN0IGRvdHMgPSBvcHRpb25zLmRvdHM7XG4gIGNvbnN0IGluZGV4ZXMgPSBvcHRpb25zLmluZGV4ZXM7XG4gIGNvbnN0IF9CbG9iID0gb3B0aW9ucy5CbG9iIHx8IHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBCbG9iO1xuICBjb25zdCB1c2VCbG9iID0gX0Jsb2IgJiYgdXRpbHMkMS5pc1NwZWNDb21wbGlhbnRGb3JtKGZvcm1EYXRhKTtcblxuICBpZiAoIXV0aWxzJDEuaXNGdW5jdGlvbih2aXNpdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Zpc2l0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnJztcblxuICAgIGlmICh1dGlscyQxLmlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZS50b0lTT1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICghdXNlQmxvYiAmJiB1dGlscyQxLmlzQmxvYih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmICh1dGlscyQxLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzJDEuaXNUeXBlZEFycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHVzZUJsb2IgJiYgdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgPyBuZXcgQmxvYihbdmFsdWVdKSA6IEJ1ZmZlci5mcm9tKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCB2aXNpdG9yLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0ga2V5XG4gICAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nfE51bWJlcj59IHBhdGhcbiAgICogQHRoaXMge0Zvcm1EYXRhfVxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gcmV0dXJuIHRydWUgdG8gdmlzaXQgdGhlIGVhY2ggcHJvcCBvZiB0aGUgdmFsdWUgcmVjdXJzaXZlbHlcbiAgICovXG4gIGZ1bmN0aW9uIGRlZmF1bHRWaXNpdG9yKHZhbHVlLCBrZXksIHBhdGgpIHtcbiAgICBsZXQgYXJyID0gdmFsdWU7XG5cbiAgICBpZiAodmFsdWUgJiYgIXBhdGggJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHV0aWxzJDEuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscyQxLmlzQXJyYXkodmFsdWUpICYmIGlzRmxhdEFycmF5KHZhbHVlKSkgfHxcbiAgICAgICAgKCh1dGlscyQxLmlzRmlsZUxpc3QodmFsdWUpIHx8IHV0aWxzJDEuZW5kc1dpdGgoa2V5LCAnW10nKSkgJiYgKGFyciA9IHV0aWxzJDEudG9BcnJheSh2YWx1ZSkpXG4gICAgICAgICkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IHJlbW92ZUJyYWNrZXRzKGtleSk7XG5cbiAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gZWFjaChlbCwgaW5kZXgpIHtcbiAgICAgICAgICAhKHV0aWxzJDEuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiBmb3JtRGF0YS5hcHBlbmQoXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICAgICAgICAgIGluZGV4ZXMgPT09IHRydWUgPyByZW5kZXJLZXkoW2tleV0sIGluZGV4LCBkb3RzKSA6IChpbmRleGVzID09PSBudWxsID8ga2V5IDoga2V5ICsgJ1tdJyksXG4gICAgICAgICAgICBjb252ZXJ0VmFsdWUoZWwpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNWaXNpdGFibGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3JtRGF0YS5hcHBlbmQocmVuZGVyS2V5KHBhdGgsIGtleSwgZG90cyksIGNvbnZlcnRWYWx1ZSh2YWx1ZSkpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qgc3RhY2sgPSBbXTtcblxuICBjb25zdCBleHBvc2VkSGVscGVycyA9IE9iamVjdC5hc3NpZ24ocHJlZGljYXRlcywge1xuICAgIGRlZmF1bHRWaXNpdG9yLFxuICAgIGNvbnZlcnRWYWx1ZSxcbiAgICBpc1Zpc2l0YWJsZVxuICB9KTtcblxuICBmdW5jdGlvbiBidWlsZCh2YWx1ZSwgcGF0aCkge1xuICAgIGlmICh1dGlscyQxLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMkMS5mb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiBlYWNoKGVsLCBrZXkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9ICEodXRpbHMkMS5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIHZpc2l0b3IuY2FsbChcbiAgICAgICAgZm9ybURhdGEsIGVsLCB1dGlscyQxLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMkMS5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0YSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgYnVpbGQob2JqKTtcblxuICByZXR1cm4gZm9ybURhdGE7XG59XG5cbi8qKlxuICogSXQgZW5jb2RlcyBhIHN0cmluZyBieSByZXBsYWNpbmcgYWxsIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGluIHRoZSB1bnJlc2VydmVkIHNldCB3aXRoXG4gKiB0aGVpciBwZXJjZW50LWVuY29kZWQgZXF1aXZhbGVudHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBlbmNvZGUuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlbmNvZGUkMShzdHIpIHtcbiAgY29uc3QgY2hhck1hcCA9IHtcbiAgICAnISc6ICclMjEnLFxuICAgIFwiJ1wiOiAnJTI3JyxcbiAgICAnKCc6ICclMjgnLFxuICAgICcpJzogJyUyOScsXG4gICAgJ34nOiAnJTdFJyxcbiAgICAnJTIwJzogJysnLFxuICAgICclMDAnOiAnXFx4MDAnXG4gIH07XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKX5dfCUyMHwlMDAvZywgZnVuY3Rpb24gcmVwbGFjZXIobWF0Y2gpIHtcbiAgICByZXR1cm4gY2hhck1hcFttYXRjaF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcGFyYW1zIG9iamVjdCBhbmQgY29udmVydHMgaXQgdG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IHBhcmFtcyAtIFRoZSBwYXJhbWV0ZXJzIHRvIGJlIGNvbnZlcnRlZCB0byBhIEZvcm1EYXRhIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIG9iamVjdCBwYXNzZWQgdG8gdGhlIEF4aW9zIGNvbnN0cnVjdG9yLlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgdGhpcy5fcGFpcnMgPSBbXTtcblxuICBwYXJhbXMgJiYgdG9Gb3JtRGF0YShwYXJhbXMsIHRoaXMsIG9wdGlvbnMpO1xufVxuXG5jb25zdCBwcm90b3R5cGUgPSBBeGlvc1VSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGU7XG5cbnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5fcGFpcnMucHVzaChbbmFtZSwgdmFsdWVdKTtcbn07XG5cbnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKGVuY29kZXIpIHtcbiAgY29uc3QgX2VuY29kZSA9IGVuY29kZXIgPyBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBlbmNvZGVyLmNhbGwodGhpcywgdmFsdWUsIGVuY29kZSQxKTtcbiAgfSA6IGVuY29kZSQxO1xuXG4gIHJldHVybiB0aGlzLl9wYWlycy5tYXAoZnVuY3Rpb24gZWFjaChwYWlyKSB7XG4gICAgcmV0dXJuIF9lbmNvZGUocGFpclswXSkgKyAnPScgKyBfZW5jb2RlKHBhaXJbMV0pO1xuICB9LCAnJykuam9pbignJicpO1xufTtcblxuLyoqXG4gKiBJdCByZXBsYWNlcyBhbGwgaW5zdGFuY2VzIG9mIHRoZSBjaGFyYWN0ZXJzIGA6YCwgYCRgLCBgLGAsIGArYCwgYFtgLCBhbmQgYF1gIHdpdGggdGhlaXJcbiAqIFVSSSBlbmNvZGVkIGNvdW50ZXJwYXJ0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgVGhlIHZhbHVlIHRvIGJlIGVuY29kZWQuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcGFyYW0gez9vYmplY3R9IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5mdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgb3B0aW9ucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIFxuICBjb25zdCBfZW5jb2RlID0gb3B0aW9ucyAmJiBvcHRpb25zLmVuY29kZSB8fCBlbmNvZGU7XG5cbiAgY29uc3Qgc2VyaWFsaXplRm4gPSBvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplO1xuXG4gIGxldCBzZXJpYWxpemVkUGFyYW1zO1xuXG4gIGlmIChzZXJpYWxpemVGbikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBzZXJpYWxpemVGbihwYXJhbXMsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSB1dGlscyQxLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykgP1xuICAgICAgcGFyYW1zLnRvU3RyaW5nKCkgOlxuICAgICAgbmV3IEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykudG9TdHJpbmcoX2VuY29kZSk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIGNvbnN0IGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG5cbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn1cblxuY2xhc3MgSW50ZXJjZXB0b3JNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gICAqL1xuICB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICAgIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgICBmdWxmaWxsZWQsXG4gICAgICByZWplY3RlZCxcbiAgICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gICAqXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGludGVyY2VwdG9yIHdhcyByZW1vdmVkLCBgZmFsc2VgIG90aGVyd2lzZVxuICAgKi9cbiAgZWplY3QoaWQpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIGludGVyY2VwdG9ycyBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gICAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZvckVhY2goZm4pIHtcbiAgICB1dGlscyQxLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgICAgZm4oaCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxudmFyIEludGVyY2VwdG9yTWFuYWdlciQxID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuXG52YXIgdHJhbnNpdGlvbmFsRGVmYXVsdHMgPSB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXMkMSA9IHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnID8gVVJMU2VhcmNoUGFyYW1zIDogQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG5cbnZhciBGb3JtRGF0YSQxID0gdHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJyA/IEZvcm1EYXRhIDogbnVsbDtcblxudmFyIEJsb2IkMSA9IHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyA/IEJsb2IgOiBudWxsO1xuXG52YXIgcGxhdGZvcm0kMSA9IHtcbiAgaXNCcm93c2VyOiB0cnVlLFxuICBjbGFzc2VzOiB7XG4gICAgVVJMU2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXMkMSxcbiAgICBGb3JtRGF0YTogRm9ybURhdGEkMSxcbiAgICBCbG9iOiBCbG9iJDFcbiAgfSxcbiAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScsICdibG9iJywgJ3VybCcsICdkYXRhJ11cbn07XG5cbmNvbnN0IGhhc0Jyb3dzZXJFbnYgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyRW52ID0gKFxuICAocHJvZHVjdCkgPT4ge1xuICAgIHJldHVybiBoYXNCcm93c2VyRW52ICYmIFsnUmVhY3ROYXRpdmUnLCAnTmF0aXZlU2NyaXB0JywgJ05TJ10uaW5kZXhPZihwcm9kdWN0KSA8IDBcbiAgfSkodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciB3ZWJXb3JrZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBBbHRob3VnaCB0aGUgYGlzU3RhbmRhcmRCcm93c2VyRW52YCBtZXRob2QgaW5kaWNhdGVzIHRoYXRcbiAqIGBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlcmAsIHRoZSBXZWJXb3JrZXIgd2lsbCBzdGlsbCBiZVxuICogZmlsdGVyZWQgb3V0IGR1ZSB0byBpdHMganVkZ21lbnQgc3RhbmRhcmRcbiAqIGB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnYC5cbiAqIFRoaXMgbGVhZHMgdG8gYSBwcm9ibGVtIHdoZW4gYXhpb3MgcG9zdCBgRm9ybURhdGFgIGluIHdlYldvcmtlclxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYgPSAoKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUgJiZcbiAgICB0eXBlb2Ygc2VsZi5pbXBvcnRTY3JpcHRzID09PSAnZnVuY3Rpb24nXG4gICk7XG59KSgpO1xuXG5jb25zdCBvcmlnaW4gPSBoYXNCcm93c2VyRW52ICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmIHx8ICdodHRwOi8vbG9jYWxob3N0JztcblxudmFyIHV0aWxzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIGhhc0Jyb3dzZXJFbnY6IGhhc0Jyb3dzZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudjogaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJFbnY6IGhhc1N0YW5kYXJkQnJvd3NlckVudixcbiAgb3JpZ2luOiBvcmlnaW5cbn0pO1xuXG52YXIgcGxhdGZvcm0gPSB7XG4gIC4uLnV0aWxzLFxuICAuLi5wbGF0Zm9ybSQxXG59O1xuXG5mdW5jdGlvbiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRvRm9ybURhdGEoZGF0YSwgbmV3IHBsYXRmb3JtLmNsYXNzZXMuVVJMU2VhcmNoUGFyYW1zKCksIE9iamVjdC5hc3NpZ24oe1xuICAgIHZpc2l0b3I6IGZ1bmN0aW9uKHZhbHVlLCBrZXksIHBhdGgsIGhlbHBlcnMpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5pc05vZGUgJiYgdXRpbHMkMS5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygnYmFzZTY0JykpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoZWxwZXJzLmRlZmF1bHRWaXNpdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCBvcHRpb25zKSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcgbGlrZSBgZm9vW3hdW3ldW3pdYCBhbmQgcmV0dXJucyBhbiBhcnJheSBsaWtlIGBbJ2ZvbycsICd4JywgJ3knLCAneiddXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICpcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcFBhdGgobmFtZSkge1xuICAvLyBmb29beF1beV1bel1cbiAgLy8gZm9vLngueS56XG4gIC8vIGZvby14LXktelxuICAvLyBmb28geCB5IHpcbiAgcmV0dXJuIHV0aWxzJDEubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcblxuICAgIGlmIChuYW1lID09PSAnX19wcm90b19fJykgcmV0dXJuIHRydWU7XG5cbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscyQxLmlzQXJyYXkodGFyZ2V0KSA/IHRhcmdldC5sZW5ndGggOiBuYW1lO1xuXG4gICAgaWYgKGlzTGFzdCkge1xuICAgICAgaWYgKHV0aWxzJDEuaGFzT3duUHJvcCh0YXJnZXQsIG5hbWUpKSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IFt0YXJnZXRbbmFtZV0sIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldFtuYW1lXSB8fCAhdXRpbHMkMS5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscyQxLmlzQXJyYXkodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gYXJyYXlUb09iamVjdCh0YXJnZXRbbmFtZV0pO1xuICAgIH1cblxuICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICB9XG5cbiAgaWYgKHV0aWxzJDEuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMkMS5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscyQxLmZvckVhY2hFbnRyeShmb3JtRGF0YSwgKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICBidWlsZFBhdGgocGFyc2VQcm9wUGF0aChuYW1lKSwgdmFsdWUsIG9iaiwgMCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcsIHRyaWVzIHRvIHBhcnNlIGl0LCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHVybnMgdGhlIHN0cmluZ2lmaWVkIHZlcnNpb25cbiAqIG9mIHRoZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7YW55fSByYXdWYWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBzdHJpbmdpZmllZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcnNlciAtIEEgZnVuY3Rpb24gdGhhdCBwYXJzZXMgYSBzdHJpbmcgaW50byBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5jb2RlciAtIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHZhbHVlIGFuZCByZXR1cm5zIGEgc3RyaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgcmF3VmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscyQxLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscyQxLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxuY29uc3QgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBbJ3hocicsICdodHRwJywgJ2ZldGNoJ10sXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpIHx8ICcnO1xuICAgIGNvbnN0IGhhc0pTT05Db250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA+IC0xO1xuICAgIGNvbnN0IGlzT2JqZWN0UGF5bG9hZCA9IHV0aWxzJDEuaXNPYmplY3QoZGF0YSk7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkICYmIHV0aWxzJDEuaXNIVE1MRm9ybShkYXRhKSkge1xuICAgICAgZGF0YSA9IG5ldyBGb3JtRGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zvcm1EYXRhID0gdXRpbHMkMS5pc0Zvcm1EYXRhKGRhdGEpO1xuXG4gICAgaWYgKGlzRm9ybURhdGEpIHtcbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscyQxLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzJDEuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzJDEuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzJDEuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscyQxLmlzQmxvYihkYXRhKSB8fFxuICAgICAgdXRpbHMkMS5pc1JlYWRhYmxlU3RyZWFtKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzJDEuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzJDEuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04JywgZmFsc2UpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBsZXQgaXNGaWxlTGlzdDtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQpIHtcbiAgICAgIGlmIChjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIHRoaXMuZm9ybVNlcmlhbGl6ZXIpLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICgoaXNGaWxlTGlzdCA9IHV0aWxzJDEuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgY29uc3QgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG5cbiAgICAgICAgcmV0dXJuIHRvRm9ybURhdGEoXG4gICAgICAgICAgaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSxcbiAgICAgICAgICBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpLFxuICAgICAgICAgIHRoaXMuZm9ybVNlcmlhbGl6ZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGhhc0pTT05Db250ZW50VHlwZSApIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nLCBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgY29uc3QgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIGNvbnN0IEpTT05SZXF1ZXN0ZWQgPSB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHV0aWxzJDEuaXNSZXNwb25zZShkYXRhKSB8fCB1dGlscyQxLmlzUmVhZGFibGVTdHJlYW0oZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGlmIChkYXRhICYmIHV0aWxzJDEuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxufTtcblxudXRpbHMkMS5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIChtZXRob2QpID0+IHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudmFyIGRlZmF1bHRzJDEgPSBkZWZhdWx0cztcblxuLy8gUmF3QXhpb3NIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xuY29uc3QgaWdub3JlRHVwbGljYXRlT2YgPSB1dGlscyQxLnRvT2JqZWN0U2V0KFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dKTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJhd0hlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbnZhciBwYXJzZUhlYWRlcnMgPSByYXdIZWFkZXJzID0+IHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG4gIGxldCBpO1xuXG4gIHJhd0hlYWRlcnMgJiYgcmF3SGVhZGVycy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSBsaW5lLnN1YnN0cmluZyhpICsgMSkudHJpbSgpO1xuXG4gICAgaWYgKCFrZXkgfHwgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mW2tleV0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0pIHtcbiAgICAgICAgcGFyc2VkW2tleV0ucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBbdmFsXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG5jb25zdCAkaW50ZXJuYWxzID0gU3ltYm9sKCdpbnRlcm5hbHMnKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyICYmIFN0cmluZyhoZWFkZXIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdXRpbHMkMS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWYWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRva2VucyhzdHIpIHtcbiAgY29uc3QgdG9rZW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgdG9rZW5zUkUgPSAvKFteXFxzLDs9XSspXFxzKig/Oj1cXHMqKFteLDtdKykpPy9nO1xuICBsZXQgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHRva2Vuc1JFLmV4ZWMoc3RyKSkpIHtcbiAgICB0b2tlbnNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5jb25zdCBpc1ZhbGlkSGVhZGVyTmFtZSA9IChzdHIpID0+IC9eWy1fYS16QS1aMC05XmB8fiwhIyQlJicqKy5dKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzJDEuaXNGdW5jdGlvbihmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMsIHZhbHVlLCBoZWFkZXIpO1xuICB9XG5cbiAgaWYgKGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICAgIHZhbHVlID0gaGVhZGVyO1xuICB9XG5cbiAgaWYgKCF1dGlscyQxLmlzU3RyaW5nKHZhbHVlKSkgcmV0dXJuO1xuXG4gIGlmICh1dGlscyQxLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscyQxLmlzUmVnRXhwKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLnRlc3QodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlci50cmltKClcbiAgICAudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oW2EtelxcZF0pKFxcdyopL2csICh3LCBjaGFyLCBzdHIpID0+IHtcbiAgICAgIHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKCkgKyBzdHI7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQWNjZXNzb3JzKG9iaiwgaGVhZGVyKSB7XG4gIGNvbnN0IGFjY2Vzc29yTmFtZSA9IHV0aWxzJDEudG9DYW1lbENhc2UoJyAnICsgaGVhZGVyKTtcblxuICBbJ2dldCcsICdzZXQnLCAnaGFzJ10uZm9yRWFjaChtZXRob2ROYW1lID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBtZXRob2ROYW1lICsgYWNjZXNzb3JOYW1lLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgICByZXR1cm4gdGhpc1ttZXRob2ROYW1lXS5jYWxsKHRoaXMsIGhlYWRlciwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5jbGFzcyBBeGlvc0hlYWRlcnMge1xuICBjb25zdHJ1Y3RvcihoZWFkZXJzKSB7XG4gICAgaGVhZGVycyAmJiB0aGlzLnNldChoZWFkZXJzKTtcbiAgfVxuXG4gIHNldChoZWFkZXIsIHZhbHVlT3JSZXdyaXRlLCByZXdyaXRlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFsSGVhZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGVhZGVyIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga2V5ID0gdXRpbHMkMS5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMkMS5mb3JFYWNoKGhlYWRlcnMsIChfdmFsdWUsIF9oZWFkZXIpID0+IHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSk7XG5cbiAgICBpZiAodXRpbHMkMS5pc1BsYWluT2JqZWN0KGhlYWRlcikgfHwgaGVhZGVyIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcikge1xuICAgICAgc2V0SGVhZGVycyhoZWFkZXIsIHZhbHVlT3JSZXdyaXRlKTtcbiAgICB9IGVsc2UgaWYodXRpbHMkMS5pc1N0cmluZyhoZWFkZXIpICYmIChoZWFkZXIgPSBoZWFkZXIudHJpbSgpKSAmJiAhaXNWYWxpZEhlYWRlck5hbWUoaGVhZGVyKSkge1xuICAgICAgc2V0SGVhZGVycyhwYXJzZUhlYWRlcnMoaGVhZGVyKSwgdmFsdWVPclJld3JpdGUpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMkMS5pc0hlYWRlcnMoaGVhZGVyKSkge1xuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgaGVhZGVyLmVudHJpZXMoKSkge1xuICAgICAgICBzZXRIZWFkZXIodmFsdWUsIGtleSwgcmV3cml0ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMkMS5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzW2tleV07XG5cbiAgICAgICAgaWYgKCFwYXJzZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyc2VyID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5zKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscyQxLmlzRnVuY3Rpb24ocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuY2FsbCh0aGlzLCB2YWx1ZSwga2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscyQxLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscyQxLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgcmV0dXJuICEhKGtleSAmJiB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlcikpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBkZWxldGUoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUhlYWRlcihfaGVhZGVyKSB7XG4gICAgICBfaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoX2hlYWRlcikge1xuICAgICAgICBjb25zdCBrZXkgPSB1dGlscyQxLmZpbmRLZXkoc2VsZiwgX2hlYWRlcik7XG5cbiAgICAgICAgaWYgKGtleSAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZShzZWxmLCBzZWxmW2tleV0sIGtleSwgbWF0Y2hlcikpKSB7XG4gICAgICAgICAgZGVsZXRlIHNlbGZba2V5XTtcblxuICAgICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzJDEuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKG1hdGNoZXIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIsIHRydWUpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzJDEuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMkMS5maW5kS2V5KGhlYWRlcnMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgc2VsZltrZXldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgICAgICBkZWxldGUgc2VsZltoZWFkZXJdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBmb3JtYXQgPyBmb3JtYXRIZWFkZXIoaGVhZGVyKSA6IFN0cmluZyhoZWFkZXIpLnRyaW0oKTtcblxuICAgICAgaWYgKG5vcm1hbGl6ZWQgIT09IGhlYWRlcikge1xuICAgICAgICBkZWxldGUgc2VsZltoZWFkZXJdO1xuICAgICAgfVxuXG4gICAgICBzZWxmW25vcm1hbGl6ZWRdID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuXG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWRdID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29uY2F0KC4uLnRhcmdldHMpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5jb25jYXQodGhpcywgLi4udGFyZ2V0cyk7XG4gIH1cblxuICB0b0pTT04oYXNTdHJpbmdzKSB7XG4gICAgY29uc3Qgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIHV0aWxzJDEuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzJDEuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsICcpIDogdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSkubWFwKChbaGVhZGVyLCB2YWx1ZV0pID0+IGhlYWRlciArICc6ICcgKyB2YWx1ZSkuam9pbignXFxuJyk7XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdBeGlvc0hlYWRlcnMnO1xuICB9XG5cbiAgc3RhdGljIGZyb20odGhpbmcpIHtcbiAgICByZXR1cm4gdGhpbmcgaW5zdGFuY2VvZiB0aGlzID8gdGhpbmcgOiBuZXcgdGhpcyh0aGluZyk7XG4gIH1cblxuICBzdGF0aWMgY29uY2F0KGZpcnN0LCAuLi50YXJnZXRzKSB7XG4gICAgY29uc3QgY29tcHV0ZWQgPSBuZXcgdGhpcyhmaXJzdCk7XG5cbiAgICB0YXJnZXRzLmZvckVhY2goKHRhcmdldCkgPT4gY29tcHV0ZWQuc2V0KHRhcmdldCkpO1xuXG4gICAgcmV0dXJuIGNvbXB1dGVkO1xuICB9XG5cbiAgc3RhdGljIGFjY2Vzc29yKGhlYWRlcikge1xuICAgIGNvbnN0IGludGVybmFscyA9IHRoaXNbJGludGVybmFsc10gPSAodGhpc1skaW50ZXJuYWxzXSA9IHtcbiAgICAgIGFjY2Vzc29yczoge31cbiAgICB9KTtcblxuICAgIGNvbnN0IGFjY2Vzc29ycyA9IGludGVybmFscy5hY2Nlc3NvcnM7XG4gICAgY29uc3QgcHJvdG90eXBlID0gdGhpcy5wcm90b3R5cGU7XG5cbiAgICBmdW5jdGlvbiBkZWZpbmVBY2Nlc3NvcihfaGVhZGVyKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWFjY2Vzc29yc1tsSGVhZGVyXSkge1xuICAgICAgICBidWlsZEFjY2Vzc29ycyhwcm90b3R5cGUsIF9oZWFkZXIpO1xuICAgICAgICBhY2Nlc3NvcnNbbEhlYWRlcl0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHV0aWxzJDEuaXNBcnJheShoZWFkZXIpID8gaGVhZGVyLmZvckVhY2goZGVmaW5lQWNjZXNzb3IpIDogZGVmaW5lQWNjZXNzb3IoaGVhZGVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbkF4aW9zSGVhZGVycy5hY2Nlc3NvcihbJ0NvbnRlbnQtVHlwZScsICdDb250ZW50LUxlbmd0aCcsICdBY2NlcHQnLCAnQWNjZXB0LUVuY29kaW5nJywgJ1VzZXItQWdlbnQnLCAnQXV0aG9yaXphdGlvbiddKTtcblxuLy8gcmVzZXJ2ZWQgbmFtZXMgaG90Zml4XG51dGlscyQxLnJlZHVjZURlc2NyaXB0b3JzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUsICh7dmFsdWV9LCBrZXkpID0+IHtcbiAgbGV0IG1hcHBlZCA9IGtleVswXS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpOyAvLyBtYXAgYHNldGAgPT4gYFNldGBcbiAgcmV0dXJuIHtcbiAgICBnZXQ6ICgpID0+IHZhbHVlLFxuICAgIHNldChoZWFkZXJWYWx1ZSkge1xuICAgICAgdGhpc1ttYXBwZWRdID0gaGVhZGVyVmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudXRpbHMkMS5mcmVlemVNZXRob2RzKEF4aW9zSGVhZGVycyk7XG5cbnZhciBBeGlvc0hlYWRlcnMkMSA9IEF4aW9zSGVhZGVycztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cyQxO1xuICBjb25zdCBjb250ZXh0ID0gcmVzcG9uc2UgfHwgY29uZmlnO1xuICBjb25zdCBoZWFkZXJzID0gQXhpb3NIZWFkZXJzJDEuZnJvbShjb250ZXh0LmhlYWRlcnMpO1xuICBsZXQgZGF0YSA9IGNvbnRleHQuZGF0YTtcblxuICB1dGlscyQxLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufVxuXG4vKipcbiAqIEEgYENhbmNlbGVkRXJyb3JgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3Q9fSByZXF1ZXN0IFRoZSByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxlZEVycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIEF4aW9zRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlID09IG51bGwgPyAnY2FuY2VsZWQnIDogbWVzc2FnZSwgQXhpb3NFcnJvci5FUlJfQ0FOQ0VMRUQsIGNvbmZpZywgcmVxdWVzdCk7XG4gIHRoaXMubmFtZSA9ICdDYW5jZWxlZEVycm9yJztcbn1cblxudXRpbHMkMS5pbmhlcml0cyhDYW5jZWxlZEVycm9yLCBBeGlvc0Vycm9yLCB7XG4gIF9fQ0FOQ0VMX186IHRydWVcbn0pO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXNwb25zZS5cbiAqL1xuZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlUHJvdG9jb2wodXJsKSB7XG4gIGNvbnN0IG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSBkYXRhIG1heFJhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2FtcGxlc0NvdW50PSAxMF1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbbWluPSAxMDAwXVxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBzcGVlZG9tZXRlcihzYW1wbGVzQ291bnQsIG1pbikge1xuICBzYW1wbGVzQ291bnQgPSBzYW1wbGVzQ291bnQgfHwgMTA7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGNvbnN0IHRpbWVzdGFtcHMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgbGV0IGhlYWQgPSAwO1xuICBsZXQgdGFpbCA9IDA7XG4gIGxldCBmaXJzdFNhbXBsZVRTO1xuXG4gIG1pbiA9IG1pbiAhPT0gdW5kZWZpbmVkID8gbWluIDogMTAwMDtcblxuICByZXR1cm4gZnVuY3Rpb24gcHVzaChjaHVua0xlbmd0aCkge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICBjb25zdCBzdGFydGVkQXQgPSB0aW1lc3RhbXBzW3RhaWxdO1xuXG4gICAgaWYgKCFmaXJzdFNhbXBsZVRTKSB7XG4gICAgICBmaXJzdFNhbXBsZVRTID0gbm93O1xuICAgIH1cblxuICAgIGJ5dGVzW2hlYWRdID0gY2h1bmtMZW5ndGg7XG4gICAgdGltZXN0YW1wc1toZWFkXSA9IG5vdztcblxuICAgIGxldCBpID0gdGFpbDtcbiAgICBsZXQgYnl0ZXNDb3VudCA9IDA7XG5cbiAgICB3aGlsZSAoaSAhPT0gaGVhZCkge1xuICAgICAgYnl0ZXNDb3VudCArPSBieXRlc1tpKytdO1xuICAgICAgaSA9IGkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaGVhZCA9IChoZWFkICsgMSkgJSBzYW1wbGVzQ291bnQ7XG5cbiAgICBpZiAoaGVhZCA9PT0gdGFpbCkge1xuICAgICAgdGFpbCA9ICh0YWlsICsgMSkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaWYgKG5vdyAtIGZpcnN0U2FtcGxlVFMgPCBtaW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXNzZWQgPSBzdGFydGVkQXQgJiYgbm93IC0gc3RhcnRlZEF0O1xuXG4gICAgcmV0dXJuIHBhc3NlZCA/IE1hdGgucm91bmQoYnl0ZXNDb3VudCAqIDEwMDAgLyBwYXNzZWQpIDogdW5kZWZpbmVkO1xuICB9O1xufVxuXG4vKipcbiAqIFRocm90dGxlIGRlY29yYXRvclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7TnVtYmVyfSBmcmVxXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZm4sIGZyZXEpIHtcbiAgbGV0IHRpbWVzdGFtcCA9IDA7XG4gIGNvbnN0IHRocmVzaG9sZCA9IDEwMDAgLyBmcmVxO1xuICBsZXQgdGltZXIgPSBudWxsO1xuICByZXR1cm4gZnVuY3Rpb24gdGhyb3R0bGVkKCkge1xuICAgIGNvbnN0IGZvcmNlID0gdGhpcyA9PT0gdHJ1ZTtcblxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgaWYgKGZvcmNlIHx8IG5vdyAtIHRpbWVzdGFtcCA+IHRocmVzaG9sZCkge1xuICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRpbWVzdGFtcCA9IG5vdztcbiAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBpZiAoIXRpbWVyKSB7XG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgIHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgfSwgdGhyZXNob2xkIC0gKG5vdyAtIHRpbWVzdGFtcCkpO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHByb2dyZXNzRXZlbnRSZWR1Y2VyID0gKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtLCBmcmVxID0gMykgPT4ge1xuICBsZXQgYnl0ZXNOb3RpZmllZCA9IDA7XG4gIGNvbnN0IF9zcGVlZG9tZXRlciA9IHNwZWVkb21ldGVyKDUwLCAyNTApO1xuXG4gIHJldHVybiB0aHJvdHRsZShlID0+IHtcbiAgICBjb25zdCBsb2FkZWQgPSBlLmxvYWRlZDtcbiAgICBjb25zdCB0b3RhbCA9IGUubGVuZ3RoQ29tcHV0YWJsZSA/IGUudG90YWwgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcHJvZ3Jlc3NCeXRlcyA9IGxvYWRlZCAtIGJ5dGVzTm90aWZpZWQ7XG4gICAgY29uc3QgcmF0ZSA9IF9zcGVlZG9tZXRlcihwcm9ncmVzc0J5dGVzKTtcbiAgICBjb25zdCBpblJhbmdlID0gbG9hZGVkIDw9IHRvdGFsO1xuXG4gICAgYnl0ZXNOb3RpZmllZCA9IGxvYWRlZDtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBsb2FkZWQsXG4gICAgICB0b3RhbCxcbiAgICAgIHByb2dyZXNzOiB0b3RhbCA/IChsb2FkZWQgLyB0b3RhbCkgOiB1bmRlZmluZWQsXG4gICAgICBieXRlczogcHJvZ3Jlc3NCeXRlcyxcbiAgICAgIHJhdGU6IHJhdGUgPyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXN0aW1hdGVkOiByYXRlICYmIHRvdGFsICYmIGluUmFuZ2UgPyAodG90YWwgLSBsb2FkZWQpIC8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGV2ZW50OiBlLFxuICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogdG90YWwgIT0gbnVsbFxuICAgIH07XG5cbiAgICBkYXRhW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddID0gdHJ1ZTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9LCBmcmVxKTtcbn07XG5cbnZhciBpc1VSTFNhbWVPcmlnaW4gPSBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4vLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3Rcbi8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIGNvbnN0IG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGNvbnN0IHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxldCBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0cyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICBsZXQgaHJlZiA9IHVybDtcblxuICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgY29uc3QgcGFyc2VkID0gKHV0aWxzJDEuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpO1xuXG52YXIgY29va2llcyA9IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIHtcbiAgICB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgIGNvbnN0IGNvb2tpZSA9IFtuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKV07XG5cbiAgICAgIHV0aWxzJDEuaXNOdW1iZXIoZXhwaXJlcykgJiYgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuXG4gICAgICB1dGlscyQxLmlzU3RyaW5nKHBhdGgpICYmIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcblxuICAgICAgdXRpbHMkMS5pc1N0cmluZyhkb21haW4pICYmIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG5cbiAgICAgIHNlY3VyZSA9PT0gdHJ1ZSAmJiBjb29raWUucHVzaCgnc2VjdXJlJyk7XG5cbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgIH0sXG5cbiAgICByZWFkKG5hbWUpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgfSxcblxuICAgIHJlbW92ZShuYW1lKSB7XG4gICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgIH1cbiAgfVxuXG4gIDpcblxuICAvLyBOb24tc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIHtcbiAgICB3cml0ZSgpIHt9LFxuICAgIHJlYWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHJlbW92ZSgpIHt9XG4gIH07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xuZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLz9cXC8kLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5mdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn1cblxuY29uc3QgaGVhZGVyc1RvT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyBpbnN0YW5jZW9mIEF4aW9zSGVhZGVycyQxID8geyAuLi50aGluZyB9IDogdGhpbmc7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlLCBjYXNlbGVzcykge1xuICAgIGlmICh1dGlscyQxLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscyQxLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzJDEubWVyZ2UuY2FsbCh7Y2FzZWxlc3N9LCB0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscyQxLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzJDEubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscyQxLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMoYSwgYiwgY2FzZWxlc3MpIHtcbiAgICBpZiAoIXV0aWxzJDEuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiLCBjYXNlbGVzcyk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMkMS5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSwgY2FzZWxlc3MpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzJDEuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzJDEuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzJDEuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMoYSwgYiwgcHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgbWVyZ2VNYXAgPSB7XG4gICAgdXJsOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIG1ldGhvZDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBkYXRhOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGJhc2VVUkw6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXNwb25zZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBwYXJhbXNTZXJpYWxpemVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dE1lc3NhZ2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aENyZWRlbnRpYWxzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhYU1JGVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYWRhcHRlcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZVR5cGU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkNvb2tpZU5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkhlYWRlck5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25VcGxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvbkRvd25sb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgZGVjb21wcmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhDb250ZW50TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heEJvZHlMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYmVmb3JlUmVkaXJlY3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNwb3J0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwc0FnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGNhbmNlbFRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHNvY2tldFBhdGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VFbmNvZGluZzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB2YWxpZGF0ZVN0YXR1czogbWVyZ2VEaXJlY3RLZXlzLFxuICAgIGhlYWRlcnM6IChhLCBiKSA9PiBtZXJnZURlZXBQcm9wZXJ0aWVzKGhlYWRlcnNUb09iamVjdChhKSwgaGVhZGVyc1RvT2JqZWN0KGIpLCB0cnVlKVxuICB9O1xuXG4gIHV0aWxzJDEuZm9yRWFjaChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBjb25maWcxLCBjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgY29uc3QgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gbWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSwgcHJvcCk7XG4gICAgKHV0aWxzJDEuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59XG5cbnZhciByZXNvbHZlQ29uZmlnID0gKGNvbmZpZykgPT4ge1xuICBjb25zdCBuZXdDb25maWcgPSBtZXJnZUNvbmZpZyh7fSwgY29uZmlnKTtcblxuICBsZXQge2RhdGEsIHdpdGhYU1JGVG9rZW4sIHhzcmZIZWFkZXJOYW1lLCB4c3JmQ29va2llTmFtZSwgaGVhZGVycywgYXV0aH0gPSBuZXdDb25maWc7XG5cbiAgbmV3Q29uZmlnLmhlYWRlcnMgPSBoZWFkZXJzID0gQXhpb3NIZWFkZXJzJDEuZnJvbShoZWFkZXJzKTtcblxuICBuZXdDb25maWcudXJsID0gYnVpbGRVUkwoYnVpbGRGdWxsUGF0aChuZXdDb25maWcuYmFzZVVSTCwgbmV3Q29uZmlnLnVybCksIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcblxuICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gIGlmIChhdXRoKSB7XG4gICAgaGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArXG4gICAgICBidG9hKChhdXRoLnVzZXJuYW1lIHx8ICcnKSArICc6JyArIChhdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgucGFzc3dvcmQpKSA6ICcnKSlcbiAgICApO1xuICB9XG5cbiAgbGV0IGNvbnRlbnRUeXBlO1xuXG4gIGlmICh1dGlscyQxLmlzRm9ybURhdGEoZGF0YSkpIHtcbiAgICBpZiAocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52IHx8IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudikge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSh1bmRlZmluZWQpOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfSBlbHNlIGlmICgoY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkpICE9PSBmYWxzZSkge1xuICAgICAgLy8gZml4IHNlbWljb2xvbiBkdXBsaWNhdGlvbiBpc3N1ZSBmb3IgUmVhY3ROYXRpdmUgRm9ybURhdGEgaW1wbGVtZW50YXRpb25cbiAgICAgIGNvbnN0IFt0eXBlLCAuLi50b2tlbnNdID0gY29udGVudFR5cGUgPyBjb250ZW50VHlwZS5zcGxpdCgnOycpLm1hcCh0b2tlbiA9PiB0b2tlbi50cmltKCkpLmZpbHRlcihCb29sZWFuKSA6IFtdO1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZShbdHlwZSB8fCAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScsIC4uLnRva2Vuc10uam9pbignOyAnKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuXG4gIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYpIHtcbiAgICB3aXRoWFNSRlRva2VuICYmIHV0aWxzJDEuaXNGdW5jdGlvbih3aXRoWFNSRlRva2VuKSAmJiAod2l0aFhTUkZUb2tlbiA9IHdpdGhYU1JGVG9rZW4obmV3Q29uZmlnKSk7XG5cbiAgICBpZiAod2l0aFhTUkZUb2tlbiB8fCAod2l0aFhTUkZUb2tlbiAhPT0gZmFsc2UgJiYgaXNVUkxTYW1lT3JpZ2luKG5ld0NvbmZpZy51cmwpKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICBjb25zdCB4c3JmVmFsdWUgPSB4c3JmSGVhZGVyTmFtZSAmJiB4c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoeHNyZkNvb2tpZU5hbWUpO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIGhlYWRlcnMuc2V0KHhzcmZIZWFkZXJOYW1lLCB4c3JmVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdDb25maWc7XG59O1xuXG5jb25zdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgeGhyQWRhcHRlciA9IGlzWEhSQWRhcHRlclN1cHBvcnRlZCAmJiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgY29uc3QgX2NvbmZpZyA9IHJlc29sdmVDb25maWcoY29uZmlnKTtcbiAgICBsZXQgcmVxdWVzdERhdGEgPSBfY29uZmlnLmRhdGE7XG4gICAgY29uc3QgcmVxdWVzdEhlYWRlcnMgPSBBeGlvc0hlYWRlcnMkMS5mcm9tKF9jb25maWcuaGVhZGVycykubm9ybWFsaXplKCk7XG4gICAgbGV0IHtyZXNwb25zZVR5cGV9ID0gX2NvbmZpZztcbiAgICBsZXQgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKF9jb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgX2NvbmZpZy5jYW5jZWxUb2tlbi51bnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9jb25maWcuc2lnbmFsKSB7XG4gICAgICAgIF9jb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIHJlcXVlc3Qub3BlbihfY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBfY29uZmlnLnVybCwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IF9jb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gQXhpb3NIZWFkZXJzJDEuZnJvbShcbiAgICAgICAgJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCAmJiByZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICApO1xuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIF9jb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBfY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIGxldCB0aW1lb3V0RXJyb3JNZXNzYWdlID0gX2NvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIF9jb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBfY29uZmlnLnRyYW5zaXRpb25hbCB8fCB0cmFuc2l0aW9uYWxEZWZhdWx0cztcbiAgICAgIGlmIChfY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IF9jb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBfY29uZmlnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgcmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShudWxsKTtcblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscyQxLmZvckVhY2gocmVxdWVzdEhlYWRlcnMudG9KU09OKCksIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzJDEuaXNVbmRlZmluZWQoX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhX2NvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gX2NvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgX2NvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihfY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBfY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoX2NvbmZpZy5vblVwbG9hZFByb2dyZXNzKSk7XG4gICAgfVxuXG4gICAgaWYgKF9jb25maWcuY2FuY2VsVG9rZW4gfHwgX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gY2FuY2VsID0+IHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IGNhbmNlbC50eXBlID8gbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnLCByZXF1ZXN0KSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBfY29uZmlnLmNhbmNlbFRva2VuICYmIF9jb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKF9jb25maWcuc2lnbmFsKSB7XG4gICAgICAgIF9jb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBfY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChfY29uZmlnLnVybCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufTtcblxuY29uc3QgY29tcG9zZVNpZ25hbHMgPSAoc2lnbmFscywgdGltZW91dCkgPT4ge1xuICBsZXQgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcblxuICBsZXQgYWJvcnRlZDtcblxuICBjb25zdCBvbmFib3J0ID0gZnVuY3Rpb24gKGNhbmNlbCkge1xuICAgIGlmICghYWJvcnRlZCkge1xuICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgY29uc3QgZXJyID0gY2FuY2VsIGluc3RhbmNlb2YgRXJyb3IgPyBjYW5jZWwgOiB0aGlzLnJlYXNvbjtcbiAgICAgIGNvbnRyb2xsZXIuYWJvcnQoZXJyIGluc3RhbmNlb2YgQXhpb3NFcnJvciA/IGVyciA6IG5ldyBDYW5jZWxlZEVycm9yKGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiBlcnIpKTtcbiAgICB9XG4gIH07XG5cbiAgbGV0IHRpbWVyID0gdGltZW91dCAmJiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBvbmFib3J0KG5ldyBBeGlvc0Vycm9yKGB0aW1lb3V0ICR7dGltZW91dH0gb2YgbXMgZXhjZWVkZWRgLCBBeGlvc0Vycm9yLkVUSU1FRE9VVCkpO1xuICB9LCB0aW1lb3V0KTtcblxuICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICBpZiAoc2lnbmFscykge1xuICAgICAgdGltZXIgJiYgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgIHNpZ25hbHMuZm9yRWFjaChzaWduYWwgPT4ge1xuICAgICAgICBzaWduYWwgJiZcbiAgICAgICAgKHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyID8gc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25hYm9ydCkgOiBzaWduYWwudW5zdWJzY3JpYmUob25hYm9ydCkpO1xuICAgICAgfSk7XG4gICAgICBzaWduYWxzID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgc2lnbmFscy5mb3JFYWNoKChzaWduYWwpID0+IHNpZ25hbCAmJiBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbmFib3J0KSk7XG5cbiAgY29uc3Qge3NpZ25hbH0gPSBjb250cm9sbGVyO1xuXG4gIHNpZ25hbC51bnN1YnNjcmliZSA9IHVuc3Vic2NyaWJlO1xuXG4gIHJldHVybiBbc2lnbmFsLCAoKSA9PiB7XG4gICAgdGltZXIgJiYgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICB0aW1lciA9IG51bGw7XG4gIH1dO1xufTtcblxudmFyIGNvbXBvc2VTaWduYWxzJDEgPSBjb21wb3NlU2lnbmFscztcblxuY29uc3Qgc3RyZWFtQ2h1bmsgPSBmdW5jdGlvbiogKGNodW5rLCBjaHVua1NpemUpIHtcbiAgbGV0IGxlbiA9IGNodW5rLmJ5dGVMZW5ndGg7XG5cbiAgaWYgKCFjaHVua1NpemUgfHwgbGVuIDwgY2h1bmtTaXplKSB7XG4gICAgeWllbGQgY2h1bms7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IHBvcyA9IDA7XG4gIGxldCBlbmQ7XG5cbiAgd2hpbGUgKHBvcyA8IGxlbikge1xuICAgIGVuZCA9IHBvcyArIGNodW5rU2l6ZTtcbiAgICB5aWVsZCBjaHVuay5zbGljZShwb3MsIGVuZCk7XG4gICAgcG9zID0gZW5kO1xuICB9XG59O1xuXG5jb25zdCByZWFkQnl0ZXMgPSBhc3luYyBmdW5jdGlvbiogKGl0ZXJhYmxlLCBjaHVua1NpemUsIGVuY29kZSkge1xuICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIGl0ZXJhYmxlKSB7XG4gICAgeWllbGQqIHN0cmVhbUNodW5rKEFycmF5QnVmZmVyLmlzVmlldyhjaHVuaykgPyBjaHVuayA6IChhd2FpdCBlbmNvZGUoU3RyaW5nKGNodW5rKSkpLCBjaHVua1NpemUpO1xuICB9XG59O1xuXG5jb25zdCB0cmFja1N0cmVhbSA9IChzdHJlYW0sIGNodW5rU2l6ZSwgb25Qcm9ncmVzcywgb25GaW5pc2gsIGVuY29kZSkgPT4ge1xuICBjb25zdCBpdGVyYXRvciA9IHJlYWRCeXRlcyhzdHJlYW0sIGNodW5rU2l6ZSwgZW5jb2RlKTtcblxuICBsZXQgYnl0ZXMgPSAwO1xuXG4gIHJldHVybiBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICAgIHR5cGU6ICdieXRlcycsXG5cbiAgICBhc3luYyBwdWxsKGNvbnRyb2xsZXIpIHtcbiAgICAgIGNvbnN0IHtkb25lLCB2YWx1ZX0gPSBhd2FpdCBpdGVyYXRvci5uZXh0KCk7XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgb25GaW5pc2goKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsZXQgbGVuID0gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgIG9uUHJvZ3Jlc3MgJiYgb25Qcm9ncmVzcyhieXRlcyArPSBsZW4pO1xuICAgICAgY29udHJvbGxlci5lbnF1ZXVlKG5ldyBVaW50OEFycmF5KHZhbHVlKSk7XG4gICAgfSxcbiAgICBjYW5jZWwocmVhc29uKSB7XG4gICAgICBvbkZpbmlzaChyZWFzb24pO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLnJldHVybigpO1xuICAgIH1cbiAgfSwge1xuICAgIGhpZ2hXYXRlck1hcms6IDJcbiAgfSlcbn07XG5cbmNvbnN0IGZldGNoUHJvZ3Jlc3NEZWNvcmF0b3IgPSAodG90YWwsIGZuKSA9PiB7XG4gIGNvbnN0IGxlbmd0aENvbXB1dGFibGUgPSB0b3RhbCAhPSBudWxsO1xuICByZXR1cm4gKGxvYWRlZCkgPT4gc2V0VGltZW91dCgoKSA9PiBmbih7XG4gICAgbGVuZ3RoQ29tcHV0YWJsZSxcbiAgICB0b3RhbCxcbiAgICBsb2FkZWRcbiAgfSkpO1xufTtcblxuY29uc3QgaXNGZXRjaFN1cHBvcnRlZCA9IHR5cGVvZiBmZXRjaCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgUmVzcG9uc2UgPT09ICdmdW5jdGlvbic7XG5jb25zdCBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkID0gaXNGZXRjaFN1cHBvcnRlZCAmJiB0eXBlb2YgUmVhZGFibGVTdHJlYW0gPT09ICdmdW5jdGlvbic7XG5cbi8vIHVzZWQgb25seSBpbnNpZGUgdGhlIGZldGNoIGFkYXB0ZXJcbmNvbnN0IGVuY29kZVRleHQgPSBpc0ZldGNoU3VwcG9ydGVkICYmICh0eXBlb2YgVGV4dEVuY29kZXIgPT09ICdmdW5jdGlvbicgP1xuICAgICgoZW5jb2RlcikgPT4gKHN0cikgPT4gZW5jb2Rlci5lbmNvZGUoc3RyKSkobmV3IFRleHRFbmNvZGVyKCkpIDpcbiAgICBhc3luYyAoc3RyKSA9PiBuZXcgVWludDhBcnJheShhd2FpdCBuZXcgUmVzcG9uc2Uoc3RyKS5hcnJheUJ1ZmZlcigpKVxuKTtcblxuY29uc3Qgc3VwcG9ydHNSZXF1ZXN0U3RyZWFtID0gaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCAmJiAoKCkgPT4ge1xuICBsZXQgZHVwbGV4QWNjZXNzZWQgPSBmYWxzZTtcblxuICBjb25zdCBoYXNDb250ZW50VHlwZSA9IG5ldyBSZXF1ZXN0KHBsYXRmb3JtLm9yaWdpbiwge1xuICAgIGJvZHk6IG5ldyBSZWFkYWJsZVN0cmVhbSgpLFxuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGdldCBkdXBsZXgoKSB7XG4gICAgICBkdXBsZXhBY2Nlc3NlZCA9IHRydWU7XG4gICAgICByZXR1cm4gJ2hhbGYnO1xuICAgIH0sXG4gIH0pLmhlYWRlcnMuaGFzKCdDb250ZW50LVR5cGUnKTtcblxuICByZXR1cm4gZHVwbGV4QWNjZXNzZWQgJiYgIWhhc0NvbnRlbnRUeXBlO1xufSkoKTtcblxuY29uc3QgREVGQVVMVF9DSFVOS19TSVpFID0gNjQgKiAxMDI0O1xuXG5jb25zdCBzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtID0gaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCAmJiAhISgoKT0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdXRpbHMkMS5pc1JlYWRhYmxlU3RyZWFtKG5ldyBSZXNwb25zZSgnJykuYm9keSk7XG4gIH0gY2F0Y2goZXJyKSB7XG4gICAgLy8gcmV0dXJuIHVuZGVmaW5lZFxuICB9XG59KSgpO1xuXG5jb25zdCByZXNvbHZlcnMgPSB7XG4gIHN0cmVhbTogc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAoKHJlcykgPT4gcmVzLmJvZHkpXG59O1xuXG5pc0ZldGNoU3VwcG9ydGVkICYmICgoKHJlcykgPT4ge1xuICBbJ3RleHQnLCAnYXJyYXlCdWZmZXInLCAnYmxvYicsICdmb3JtRGF0YScsICdzdHJlYW0nXS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICFyZXNvbHZlcnNbdHlwZV0gJiYgKHJlc29sdmVyc1t0eXBlXSA9IHV0aWxzJDEuaXNGdW5jdGlvbihyZXNbdHlwZV0pID8gKHJlcykgPT4gcmVzW3R5cGVdKCkgOlxuICAgICAgKF8sIGNvbmZpZykgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgUmVzcG9uc2UgdHlwZSAnJHt0eXBlfScgaXMgbm90IHN1cHBvcnRlZGAsIEF4aW9zRXJyb3IuRVJSX05PVF9TVVBQT1JULCBjb25maWcpO1xuICAgICAgfSk7XG4gIH0pO1xufSkobmV3IFJlc3BvbnNlKSk7XG5cbmNvbnN0IGdldEJvZHlMZW5ndGggPSBhc3luYyAoYm9keSkgPT4ge1xuICBpZiAoYm9keSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZih1dGlscyQxLmlzQmxvYihib2R5KSkge1xuICAgIHJldHVybiBib2R5LnNpemU7XG4gIH1cblxuICBpZih1dGlscyQxLmlzU3BlY0NvbXBsaWFudEZvcm0oYm9keSkpIHtcbiAgICByZXR1cm4gKGF3YWl0IG5ldyBSZXF1ZXN0KGJvZHkpLmFycmF5QnVmZmVyKCkpLmJ5dGVMZW5ndGg7XG4gIH1cblxuICBpZih1dGlscyQxLmlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSB7XG4gICAgcmV0dXJuIGJvZHkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzJDEuaXNVUkxTZWFyY2hQYXJhbXMoYm9keSkpIHtcbiAgICBib2R5ID0gYm9keSArICcnO1xuICB9XG5cbiAgaWYodXRpbHMkMS5pc1N0cmluZyhib2R5KSkge1xuICAgIHJldHVybiAoYXdhaXQgZW5jb2RlVGV4dChib2R5KSkuYnl0ZUxlbmd0aDtcbiAgfVxufTtcblxuY29uc3QgcmVzb2x2ZUJvZHlMZW5ndGggPSBhc3luYyAoaGVhZGVycywgYm9keSkgPT4ge1xuICBjb25zdCBsZW5ndGggPSB1dGlscyQxLnRvRmluaXRlTnVtYmVyKGhlYWRlcnMuZ2V0Q29udGVudExlbmd0aCgpKTtcblxuICByZXR1cm4gbGVuZ3RoID09IG51bGwgPyBnZXRCb2R5TGVuZ3RoKGJvZHkpIDogbGVuZ3RoO1xufTtcblxudmFyIGZldGNoQWRhcHRlciA9IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgKGFzeW5jIChjb25maWcpID0+IHtcbiAgbGV0IHtcbiAgICB1cmwsXG4gICAgbWV0aG9kLFxuICAgIGRhdGEsXG4gICAgc2lnbmFsLFxuICAgIGNhbmNlbFRva2VuLFxuICAgIHRpbWVvdXQsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3MsXG4gICAgcmVzcG9uc2VUeXBlLFxuICAgIGhlYWRlcnMsXG4gICAgd2l0aENyZWRlbnRpYWxzID0gJ3NhbWUtb3JpZ2luJyxcbiAgICBmZXRjaE9wdGlvbnNcbiAgfSA9IHJlc29sdmVDb25maWcoY29uZmlnKTtcblxuICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgPyAocmVzcG9uc2VUeXBlICsgJycpLnRvTG93ZXJDYXNlKCkgOiAndGV4dCc7XG5cbiAgbGV0IFtjb21wb3NlZFNpZ25hbCwgc3RvcFRpbWVvdXRdID0gKHNpZ25hbCB8fCBjYW5jZWxUb2tlbiB8fCB0aW1lb3V0KSA/XG4gICAgY29tcG9zZVNpZ25hbHMkMShbc2lnbmFsLCBjYW5jZWxUb2tlbl0sIHRpbWVvdXQpIDogW107XG5cbiAgbGV0IGZpbmlzaGVkLCByZXF1ZXN0O1xuXG4gIGNvbnN0IG9uRmluaXNoID0gKCkgPT4ge1xuICAgICFmaW5pc2hlZCAmJiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbXBvc2VkU2lnbmFsICYmIGNvbXBvc2VkU2lnbmFsLnVuc3Vic2NyaWJlKCk7XG4gICAgfSk7XG5cbiAgICBmaW5pc2hlZCA9IHRydWU7XG4gIH07XG5cbiAgbGV0IHJlcXVlc3RDb250ZW50TGVuZ3RoO1xuXG4gIHRyeSB7XG4gICAgaWYgKFxuICAgICAgb25VcGxvYWRQcm9ncmVzcyAmJiBzdXBwb3J0c1JlcXVlc3RTdHJlYW0gJiYgbWV0aG9kICE9PSAnZ2V0JyAmJiBtZXRob2QgIT09ICdoZWFkJyAmJlxuICAgICAgKHJlcXVlc3RDb250ZW50TGVuZ3RoID0gYXdhaXQgcmVzb2x2ZUJvZHlMZW5ndGgoaGVhZGVycywgZGF0YSkpICE9PSAwXG4gICAgKSB7XG4gICAgICBsZXQgX3JlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgIGR1cGxleDogXCJoYWxmXCJcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgY29udGVudFR5cGVIZWFkZXI7XG5cbiAgICAgIGlmICh1dGlscyQxLmlzRm9ybURhdGEoZGF0YSkgJiYgKGNvbnRlbnRUeXBlSGVhZGVyID0gX3JlcXVlc3QuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSkge1xuICAgICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKGNvbnRlbnRUeXBlSGVhZGVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9yZXF1ZXN0LmJvZHkpIHtcbiAgICAgICAgZGF0YSA9IHRyYWNrU3RyZWFtKF9yZXF1ZXN0LmJvZHksIERFRkFVTFRfQ0hVTktfU0laRSwgZmV0Y2hQcm9ncmVzc0RlY29yYXRvcihcbiAgICAgICAgICByZXF1ZXN0Q29udGVudExlbmd0aCxcbiAgICAgICAgICBwcm9ncmVzc0V2ZW50UmVkdWNlcihvblVwbG9hZFByb2dyZXNzKVxuICAgICAgICApLCBudWxsLCBlbmNvZGVUZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXV0aWxzJDEuaXNTdHJpbmcod2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgd2l0aENyZWRlbnRpYWxzID0gd2l0aENyZWRlbnRpYWxzID8gJ2NvcnMnIDogJ29taXQnO1xuICAgIH1cblxuICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIHtcbiAgICAgIC4uLmZldGNoT3B0aW9ucyxcbiAgICAgIHNpZ25hbDogY29tcG9zZWRTaWduYWwsXG4gICAgICBtZXRob2Q6IG1ldGhvZC50b1VwcGVyQ2FzZSgpLFxuICAgICAgaGVhZGVyczogaGVhZGVycy5ub3JtYWxpemUoKS50b0pTT04oKSxcbiAgICAgIGJvZHk6IGRhdGEsXG4gICAgICBkdXBsZXg6IFwiaGFsZlwiLFxuICAgICAgd2l0aENyZWRlbnRpYWxzXG4gICAgfSk7XG5cbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChyZXF1ZXN0KTtcblxuICAgIGNvbnN0IGlzU3RyZWFtUmVzcG9uc2UgPSBzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmIChyZXNwb25zZVR5cGUgPT09ICdzdHJlYW0nIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3Jlc3BvbnNlJyk7XG5cbiAgICBpZiAoc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAob25Eb3dubG9hZFByb2dyZXNzIHx8IGlzU3RyZWFtUmVzcG9uc2UpKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0ge307XG5cbiAgICAgIFsnc3RhdHVzJywgJ3N0YXR1c1RleHQnLCAnaGVhZGVycyddLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgIG9wdGlvbnNbcHJvcF0gPSByZXNwb25zZVtwcm9wXTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNwb25zZUNvbnRlbnRMZW5ndGggPSB1dGlscyQxLnRvRmluaXRlTnVtYmVyKHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LWxlbmd0aCcpKTtcblxuICAgICAgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoXG4gICAgICAgIHRyYWNrU3RyZWFtKHJlc3BvbnNlLmJvZHksIERFRkFVTFRfQ0hVTktfU0laRSwgb25Eb3dubG9hZFByb2dyZXNzICYmIGZldGNoUHJvZ3Jlc3NEZWNvcmF0b3IoXG4gICAgICAgICAgcmVzcG9uc2VDb250ZW50TGVuZ3RoLFxuICAgICAgICAgIHByb2dyZXNzRXZlbnRSZWR1Y2VyKG9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSlcbiAgICAgICAgKSwgaXNTdHJlYW1SZXNwb25zZSAmJiBvbkZpbmlzaCwgZW5jb2RlVGV4dCksXG4gICAgICAgIG9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlIHx8ICd0ZXh0JztcblxuICAgIGxldCByZXNwb25zZURhdGEgPSBhd2FpdCByZXNvbHZlcnNbdXRpbHMkMS5maW5kS2V5KHJlc29sdmVycywgcmVzcG9uc2VUeXBlKSB8fCAndGV4dCddKHJlc3BvbnNlLCBjb25maWcpO1xuXG4gICAgIWlzU3RyZWFtUmVzcG9uc2UgJiYgb25GaW5pc2goKTtcblxuICAgIHN0b3BUaW1lb3V0ICYmIHN0b3BUaW1lb3V0KCk7XG5cbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIGhlYWRlcnM6IEF4aW9zSGVhZGVycyQxLmZyb20ocmVzcG9uc2UuaGVhZGVycyksXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH0pO1xuICAgIH0pXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIG9uRmluaXNoKCk7XG5cbiAgICBpZiAoZXJyICYmIGVyci5uYW1lID09PSAnVHlwZUVycm9yJyAmJiAvZmV0Y2gvaS50ZXN0KGVyci5tZXNzYWdlKSkge1xuICAgICAgdGhyb3cgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgbmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpLFxuICAgICAgICB7XG4gICAgICAgICAgY2F1c2U6IGVyci5jYXVzZSB8fCBlcnJcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlcnIsIGVyciAmJiBlcnIuY29kZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgfVxufSk7XG5cbmNvbnN0IGtub3duQWRhcHRlcnMgPSB7XG4gIGh0dHA6IGh0dHBBZGFwdGVyLFxuICB4aHI6IHhockFkYXB0ZXIsXG4gIGZldGNoOiBmZXRjaEFkYXB0ZXJcbn07XG5cbnV0aWxzJDEuZm9yRWFjaChrbm93bkFkYXB0ZXJzLCAoZm4sIHZhbHVlKSA9PiB7XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICduYW1lJywge3ZhbHVlfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ2FkYXB0ZXJOYW1lJywge3ZhbHVlfSk7XG4gIH1cbn0pO1xuXG5jb25zdCByZW5kZXJSZWFzb24gPSAocmVhc29uKSA9PiBgLSAke3JlYXNvbn1gO1xuXG5jb25zdCBpc1Jlc29sdmVkSGFuZGxlID0gKGFkYXB0ZXIpID0+IHV0aWxzJDEuaXNGdW5jdGlvbihhZGFwdGVyKSB8fCBhZGFwdGVyID09PSBudWxsIHx8IGFkYXB0ZXIgPT09IGZhbHNlO1xuXG52YXIgYWRhcHRlcnMgPSB7XG4gIGdldEFkYXB0ZXI6IChhZGFwdGVycykgPT4ge1xuICAgIGFkYXB0ZXJzID0gdXRpbHMkMS5pc0FycmF5KGFkYXB0ZXJzKSA/IGFkYXB0ZXJzIDogW2FkYXB0ZXJzXTtcblxuICAgIGNvbnN0IHtsZW5ndGh9ID0gYWRhcHRlcnM7XG4gICAgbGV0IG5hbWVPckFkYXB0ZXI7XG4gICAgbGV0IGFkYXB0ZXI7XG5cbiAgICBjb25zdCByZWplY3RlZFJlYXNvbnMgPSB7fTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIG5hbWVPckFkYXB0ZXIgPSBhZGFwdGVyc1tpXTtcbiAgICAgIGxldCBpZDtcblxuICAgICAgYWRhcHRlciA9IG5hbWVPckFkYXB0ZXI7XG5cbiAgICAgIGlmICghaXNSZXNvbHZlZEhhbmRsZShuYW1lT3JBZGFwdGVyKSkge1xuICAgICAgICBhZGFwdGVyID0ga25vd25BZGFwdGVyc1soaWQgPSBTdHJpbmcobmFtZU9yQWRhcHRlcikpLnRvTG93ZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChhZGFwdGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgVW5rbm93biBhZGFwdGVyICcke2lkfSdgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRhcHRlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVqZWN0ZWRSZWFzb25zW2lkIHx8ICcjJyArIGldID0gYWRhcHRlcjtcbiAgICB9XG5cbiAgICBpZiAoIWFkYXB0ZXIpIHtcblxuICAgICAgY29uc3QgcmVhc29ucyA9IE9iamVjdC5lbnRyaWVzKHJlamVjdGVkUmVhc29ucylcbiAgICAgICAgLm1hcCgoW2lkLCBzdGF0ZV0pID0+IGBhZGFwdGVyICR7aWR9IGAgK1xuICAgICAgICAgIChzdGF0ZSA9PT0gZmFsc2UgPyAnaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnQnIDogJ2lzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkJylcbiAgICAgICAgKTtcblxuICAgICAgbGV0IHMgPSBsZW5ndGggP1xuICAgICAgICAocmVhc29ucy5sZW5ndGggPiAxID8gJ3NpbmNlIDpcXG4nICsgcmVhc29ucy5tYXAocmVuZGVyUmVhc29uKS5qb2luKCdcXG4nKSA6ICcgJyArIHJlbmRlclJlYXNvbihyZWFzb25zWzBdKSkgOlxuICAgICAgICAnYXMgbm8gYWRhcHRlciBzcGVjaWZpZWQnO1xuXG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgYFRoZXJlIGlzIG5vIHN1aXRhYmxlIGFkYXB0ZXIgdG8gZGlzcGF0Y2ggdGhlIHJlcXVlc3QgYCArIHMsXG4gICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5mdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycyQxLmZyb20oY29uZmlnLmhlYWRlcnMpO1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgaWYgKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXS5pbmRleE9mKGNvbmZpZy5tZXRob2QpICE9PSAtMSkge1xuICAgIGNvbmZpZy5oZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCBmYWxzZSk7XG4gIH1cblxuICBjb25zdCBhZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcihjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cyQxLmFkYXB0ZXIpO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgcmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycyQxLmZyb20ocmVzcG9uc2UuaGVhZGVycyk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzJDEuZnJvbShyZWFzb24ucmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufVxuXG5jb25zdCBWRVJTSU9OID0gXCIxLjcuMlwiO1xuXG5jb25zdCB2YWxpZGF0b3JzJDEgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnMkMVt0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzJDEudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gKHZhbHVlLCBvcHQsIG9wdHMpID0+IHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgY29uc3Qgb3B0ID0ga2V5c1tpXTtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdmFsaWRhdG9yID0ge1xuICBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzJDFcbn07XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIkMSgpLFxuICAgICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIkMSgpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBjb25maWdPclVybCBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gICAqIEBwYXJhbSB7P09iamVjdH0gY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAgICovXG4gIGFzeW5jIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5fcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBsZXQgZHVtbXk7XG5cbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UgPyBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShkdW1teSA9IHt9KSA6IChkdW1teSA9IG5ldyBFcnJvcigpKTtcblxuICAgICAgICAvLyBzbGljZSBvZmYgdGhlIEVycm9yOiAuLi4gbGluZVxuICAgICAgICBjb25zdCBzdGFjayA9IGR1bW15LnN0YWNrID8gZHVtbXkuc3RhY2sucmVwbGFjZSgvXi4rXFxuLywgJycpIDogJyc7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFlcnIuc3RhY2spIHtcbiAgICAgICAgICAgIGVyci5zdGFjayA9IHN0YWNrO1xuICAgICAgICAgICAgLy8gbWF0Y2ggd2l0aG91dCB0aGUgMiB0b3Agc3RhY2sgbGluZXNcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YWNrICYmICFTdHJpbmcoZXJyLnN0YWNrKS5lbmRzV2l0aChzdGFjay5yZXBsYWNlKC9eLitcXG4uK1xcbi8sICcnKSkpIHtcbiAgICAgICAgICAgIGVyci5zdGFjayArPSAnXFxuJyArIHN0YWNrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlnbm9yZSB0aGUgY2FzZSB3aGVyZSBcInN0YWNrXCIgaXMgYW4gdW4td3JpdGFibGUgcHJvcGVydHlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgX3JlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgICB9XG5cbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gICAgY29uc3Qge3RyYW5zaXRpb25hbCwgcGFyYW1zU2VyaWFsaXplciwgaGVhZGVyc30gPSBjb25maWc7XG5cbiAgICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zU2VyaWFsaXplciAhPSBudWxsKSB7XG4gICAgICBpZiAodXRpbHMkMS5pc0Z1bmN0aW9uKHBhcmFtc1NlcmlhbGl6ZXIpKSB7XG4gICAgICAgIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyID0ge1xuICAgICAgICAgIHNlcmlhbGl6ZTogcGFyYW1zU2VyaWFsaXplclxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnMocGFyYW1zU2VyaWFsaXplciwge1xuICAgICAgICAgIGVuY29kZTogdmFsaWRhdG9ycy5mdW5jdGlvbixcbiAgICAgICAgICBzZXJpYWxpemU6IHZhbGlkYXRvcnMuZnVuY3Rpb25cbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgICBjb25maWcubWV0aG9kID0gKGNvbmZpZy5tZXRob2QgfHwgdGhpcy5kZWZhdWx0cy5tZXRob2QgfHwgJ2dldCcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgICBsZXQgY29udGV4dEhlYWRlcnMgPSBoZWFkZXJzICYmIHV0aWxzJDEubWVyZ2UoXG4gICAgICBoZWFkZXJzLmNvbW1vbixcbiAgICAgIGhlYWRlcnNbY29uZmlnLm1ldGhvZF1cbiAgICApO1xuXG4gICAgaGVhZGVycyAmJiB1dGlscyQxLmZvckVhY2goXG4gICAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICAgIChtZXRob2QpID0+IHtcbiAgICAgICAgZGVsZXRlIGhlYWRlcnNbbWV0aG9kXTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMkMS5jb25jYXQoY29udGV4dEhlYWRlcnMsIGhlYWRlcnMpO1xuXG4gICAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICAgIGNvbnN0IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgbGV0IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGxldCBwcm9taXNlO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbGVuO1xuXG4gICAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICAgIGNvbnN0IGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdC5iaW5kKHRoaXMpLCB1bmRlZmluZWRdO1xuICAgICAgY2hhaW4udW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgY2hhaW4ucHVzaC5hcHBseShjaGFpbiwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGxlbiA9IGNoYWluLmxlbmd0aDtcblxuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluW2krK10sIGNoYWluW2krK10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBsZW4gPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICBsZXQgbmV3Q29uZmlnID0gY29uZmlnO1xuXG4gICAgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29uc3Qgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgY29uc3Qgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICB0cnkge1xuICAgICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgb25SZWplY3RlZC5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QuY2FsbCh0aGlzLCBuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIGkgPSAwO1xuICAgIGxlbiA9IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZ2V0VXJpKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbiAgfVxufVxuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzJDEuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscyQxLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxudmFyIEF4aW9zJDEgPSBBeGlvcztcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsVG9rZW59XG4gKi9cbmNsYXNzIENhbmNlbFRva2VuIHtcbiAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgbGV0IHJlc29sdmVQcm9taXNlO1xuXG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHRva2VuID0gdGhpcztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4oY2FuY2VsID0+IHtcbiAgICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgICBsZXQgaSA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgICB9XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgICB9KTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdGhpcy5wcm9taXNlLnRoZW4gPSBvbmZ1bGZpbGxlZCA9PiB7XG4gICAgICBsZXQgX3Jlc29sdmU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfTtcblxuICAgIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gICAqL1xuICB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgdGhyb3cgdGhpcy5yZWFzb247XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICAgKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICAgKi9cbiAgc3RhdGljIHNvdXJjZSgpIHtcbiAgICBsZXQgY2FuY2VsO1xuICAgIGNvbnN0IHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICAgIGNhbmNlbCA9IGM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRva2VuLFxuICAgICAgY2FuY2VsXG4gICAgfTtcbiAgfVxufVxuXG52YXIgQ2FuY2VsVG9rZW4kMSA9IENhbmNlbFRva2VuO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzJDEuaXNPYmplY3QocGF5bG9hZCkgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn1cblxuY29uc3QgSHR0cFN0YXR1c0NvZGUgPSB7XG4gIENvbnRpbnVlOiAxMDAsXG4gIFN3aXRjaGluZ1Byb3RvY29sczogMTAxLFxuICBQcm9jZXNzaW5nOiAxMDIsXG4gIEVhcmx5SGludHM6IDEwMyxcbiAgT2s6IDIwMCxcbiAgQ3JlYXRlZDogMjAxLFxuICBBY2NlcHRlZDogMjAyLFxuICBOb25BdXRob3JpdGF0aXZlSW5mb3JtYXRpb246IDIwMyxcbiAgTm9Db250ZW50OiAyMDQsXG4gIFJlc2V0Q29udGVudDogMjA1LFxuICBQYXJ0aWFsQ29udGVudDogMjA2LFxuICBNdWx0aVN0YXR1czogMjA3LFxuICBBbHJlYWR5UmVwb3J0ZWQ6IDIwOCxcbiAgSW1Vc2VkOiAyMjYsXG4gIE11bHRpcGxlQ2hvaWNlczogMzAwLFxuICBNb3ZlZFBlcm1hbmVudGx5OiAzMDEsXG4gIEZvdW5kOiAzMDIsXG4gIFNlZU90aGVyOiAzMDMsXG4gIE5vdE1vZGlmaWVkOiAzMDQsXG4gIFVzZVByb3h5OiAzMDUsXG4gIFVudXNlZDogMzA2LFxuICBUZW1wb3JhcnlSZWRpcmVjdDogMzA3LFxuICBQZXJtYW5lbnRSZWRpcmVjdDogMzA4LFxuICBCYWRSZXF1ZXN0OiA0MDAsXG4gIFVuYXV0aG9yaXplZDogNDAxLFxuICBQYXltZW50UmVxdWlyZWQ6IDQwMixcbiAgRm9yYmlkZGVuOiA0MDMsXG4gIE5vdEZvdW5kOiA0MDQsXG4gIE1ldGhvZE5vdEFsbG93ZWQ6IDQwNSxcbiAgTm90QWNjZXB0YWJsZTogNDA2LFxuICBQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDQwNyxcbiAgUmVxdWVzdFRpbWVvdXQ6IDQwOCxcbiAgQ29uZmxpY3Q6IDQwOSxcbiAgR29uZTogNDEwLFxuICBMZW5ndGhSZXF1aXJlZDogNDExLFxuICBQcmVjb25kaXRpb25GYWlsZWQ6IDQxMixcbiAgUGF5bG9hZFRvb0xhcmdlOiA0MTMsXG4gIFVyaVRvb0xvbmc6IDQxNCxcbiAgVW5zdXBwb3J0ZWRNZWRpYVR5cGU6IDQxNSxcbiAgUmFuZ2VOb3RTYXRpc2ZpYWJsZTogNDE2LFxuICBFeHBlY3RhdGlvbkZhaWxlZDogNDE3LFxuICBJbUFUZWFwb3Q6IDQxOCxcbiAgTWlzZGlyZWN0ZWRSZXF1ZXN0OiA0MjEsXG4gIFVucHJvY2Vzc2FibGVFbnRpdHk6IDQyMixcbiAgTG9ja2VkOiA0MjMsXG4gIEZhaWxlZERlcGVuZGVuY3k6IDQyNCxcbiAgVG9vRWFybHk6IDQyNSxcbiAgVXBncmFkZVJlcXVpcmVkOiA0MjYsXG4gIFByZWNvbmRpdGlvblJlcXVpcmVkOiA0MjgsXG4gIFRvb01hbnlSZXF1ZXN0czogNDI5LFxuICBSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2U6IDQzMSxcbiAgVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnM6IDQ1MSxcbiAgSW50ZXJuYWxTZXJ2ZXJFcnJvcjogNTAwLFxuICBOb3RJbXBsZW1lbnRlZDogNTAxLFxuICBCYWRHYXRld2F5OiA1MDIsXG4gIFNlcnZpY2VVbmF2YWlsYWJsZTogNTAzLFxuICBHYXRld2F5VGltZW91dDogNTA0LFxuICBIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZDogNTA1LFxuICBWYXJpYW50QWxzb05lZ290aWF0ZXM6IDUwNixcbiAgSW5zdWZmaWNpZW50U3RvcmFnZTogNTA3LFxuICBMb29wRGV0ZWN0ZWQ6IDUwOCxcbiAgTm90RXh0ZW5kZWQ6IDUxMCxcbiAgTmV0d29ya0F1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDUxMSxcbn07XG5cbk9iamVjdC5lbnRyaWVzKEh0dHBTdGF0dXNDb2RlKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgSHR0cFN0YXR1c0NvZGVbdmFsdWVdID0ga2V5O1xufSk7XG5cbnZhciBIdHRwU3RhdHVzQ29kZSQxID0gSHR0cFN0YXR1c0NvZGU7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJucyB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgY29uc3QgY29udGV4dCA9IG5ldyBBeGlvcyQxKGRlZmF1bHRDb25maWcpO1xuICBjb25zdCBpbnN0YW5jZSA9IGJpbmQoQXhpb3MkMS5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMkMS5leHRlbmQoaW5zdGFuY2UsIEF4aW9zJDEucHJvdG90eXBlLCBjb250ZXh0LCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscyQxLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCwgbnVsbCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG5jb25zdCBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzJDEpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3MkMTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gQ2FuY2VsZWRFcnJvcjtcbmF4aW9zLkNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW4kMTtcbmF4aW9zLmlzQ2FuY2VsID0gaXNDYW5jZWw7XG5heGlvcy5WRVJTSU9OID0gVkVSU0lPTjtcbmF4aW9zLnRvRm9ybURhdGEgPSB0b0Zvcm1EYXRhO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IEF4aW9zRXJyb3I7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuXG5heGlvcy5zcHJlYWQgPSBzcHJlYWQ7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IGlzQXhpb3NFcnJvcjtcblxuLy8gRXhwb3NlIG1lcmdlQ29uZmlnXG5heGlvcy5tZXJnZUNvbmZpZyA9IG1lcmdlQ29uZmlnO1xuXG5heGlvcy5BeGlvc0hlYWRlcnMgPSBBeGlvc0hlYWRlcnMkMTtcblxuYXhpb3MuZm9ybVRvSlNPTiA9IHRoaW5nID0+IGZvcm1EYXRhVG9KU09OKHV0aWxzJDEuaXNIVE1MRm9ybSh0aGluZykgPyBuZXcgRm9ybURhdGEodGhpbmcpIDogdGhpbmcpO1xuXG5heGlvcy5nZXRBZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcjtcblxuYXhpb3MuSHR0cFN0YXR1c0NvZGUgPSBIdHRwU3RhdHVzQ29kZSQxO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1heGlvcy5janMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjt2YXIgemU9T2JqZWN0LmNyZWF0ZTt2YXIgWT1PYmplY3QuZGVmaW5lUHJvcGVydHk7dmFyIEhlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dmFyIEJlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO3ZhciBLZT1PYmplY3QuZ2V0UHJvdG90eXBlT2YsWGU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTt2YXIgR2U9KGUsdCk9Pntmb3IodmFyIG8gaW4gdClZKGUsbyx7Z2V0OnRbb10sZW51bWVyYWJsZTohMH0pfSx5ZT0oZSx0LG8sbik9PntpZih0JiZ0eXBlb2YgdD09XCJvYmplY3RcInx8dHlwZW9mIHQ9PVwiZnVuY3Rpb25cIilmb3IobGV0IHIgb2YgQmUodCkpIVhlLmNhbGwoZSxyKSYmciE9PW8mJlkoZSxyLHtnZXQ6KCk9PnRbcl0sZW51bWVyYWJsZTohKG49SGUodCxyKSl8fG4uZW51bWVyYWJsZX0pO3JldHVybiBlfTt2YXIgbWU9KGUsdCxvKT0+KG89ZSE9bnVsbD96ZShLZShlKSk6e30seWUodHx8IWV8fCFlLl9fZXNNb2R1bGU/WShvLFwiZGVmYXVsdFwiLHt2YWx1ZTplLGVudW1lcmFibGU6ITB9KTpvLGUpKSxKZT1lPT55ZShZKHt9LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUpO3ZhciBOdD17fTtHZShOdCx7UHJvdmlkZXI6KCk9PlVlLFJlYWN0UmVkdXhDb250ZXh0OigpPT5mLGJhdGNoOigpPT52dCxjb25uZWN0OigpPT5XZSxjcmVhdGVEaXNwYXRjaEhvb2s6KCk9PlBlLGNyZWF0ZVNlbGVjdG9ySG9vazooKT0+YWUsY3JlYXRlU3RvcmVIb29rOigpPT5qLHNoYWxsb3dFcXVhbDooKT0+Zyx1c2VEaXNwYXRjaDooKT0+amUsdXNlU2VsZWN0b3I6KCk9PndlLHVzZVN0b3JlOigpPT5KfSk7bW9kdWxlLmV4cG9ydHM9SmUoTnQpO3ZhciBxZT1tZShyZXF1aXJlKFwicmVhY3RcIikpLCRlPXJlcXVpcmUoXCJ1c2Utc3luYy1leHRlcm5hbC1zdG9yZS93aXRoLXNlbGVjdG9yLmpzXCIpO3ZhciB6PW1lKHJlcXVpcmUoXCJyZWFjdFwiKSksYT1cImRlZmF1bHRcImluIHo/ei5kZWZhdWx0Ono7dmFyIHNlPVN5bWJvbC5mb3IoXCJyZWFjdC1yZWR1eC1jb250ZXh0XCIpLHBlPXR5cGVvZiBnbG9iYWxUaGlzPFwidVwiP2dsb2JhbFRoaXM6e307ZnVuY3Rpb24gWmUoKXtpZighYS5jcmVhdGVDb250ZXh0KXJldHVybnt9O2xldCBlPXBlW3NlXT8/KHBlW3NlXT1uZXcgTWFwKSx0PWUuZ2V0KGEuY3JlYXRlQ29udGV4dCk7cmV0dXJuIHR8fCh0PWEuY3JlYXRlQ29udGV4dChudWxsKSxlLnNldChhLmNyZWF0ZUNvbnRleHQsdCkpLHR9dmFyIGY9WmUoKTt2YXIgSD0oKT0+e3Rocm93IG5ldyBFcnJvcihcInVTRVMgbm90IGluaXRpYWxpemVkIVwiKX07ZnVuY3Rpb24gVihlPWYpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBhLnVzZUNvbnRleHQoZSl9fXZhciBCPVYoKTt2YXIgaGU9SCx4ZT1lPT57aGU9ZX0sUWU9KGUsdCk9PmU9PT10O2Z1bmN0aW9uIGFlKGU9Zil7bGV0IHQ9ZT09PWY/QjpWKGUpLG89KG4scj17fSk9PntsZXR7ZXF1YWxpdHlGbjpzPVFlLGRldk1vZGVDaGVja3M6Yz17fX09dHlwZW9mIHI9PVwiZnVuY3Rpb25cIj97ZXF1YWxpdHlGbjpyfTpyLHtzdG9yZTp1LHN1YnNjcmlwdGlvbjppLGdldFNlcnZlclN0YXRlOnAsc3RhYmlsaXR5Q2hlY2s6UCxpZGVudGl0eUZ1bmN0aW9uQ2hlY2s6bH09dCgpLFQ9YS51c2VSZWYoITApLHc9YS51c2VDYWxsYmFjayh7W24ubmFtZV0oRCl7bGV0IGQ9bihEKTtpZighMSl7aWYoKFM9PT1cImFsd2F5c1wifHxTPT09XCJvbmNlXCImJlQuY3VycmVudCkmJiFzKGQsbSkpdHJ5e31jYXRjaChxKXt9aWYoKHg9PT1cImFsd2F5c1wifHx4PT09XCJvbmNlXCImJlQuY3VycmVudCkmJmQ9PT1EKXRyeXt9Y2F0Y2goQyl7fX1yZXR1cm4gZH19W24ubmFtZV0sW24sUCxjLnN0YWJpbGl0eUNoZWNrXSkseT1oZShpLmFkZE5lc3RlZFN1Yix1LmdldFN0YXRlLHB8fHUuZ2V0U3RhdGUsdyxzKTtyZXR1cm4gYS51c2VEZWJ1Z1ZhbHVlKHkpLHl9O3JldHVybiBPYmplY3QuYXNzaWduKG8se3dpdGhUeXBlczooKT0+b30pLG99dmFyIHdlPWFlKCk7dmFyIGV0PVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHR0PVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksb3Q9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHJ0PVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxudD1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksc3Q9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHB0PVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLGF0PVN5bWJvbC5mb3IoXCJyZWFjdC5zZXJ2ZXJfY29udGV4dFwiKSxDZT1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksY3Q9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLGl0PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLGNlPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHV0PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLFh0PVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIiksR3Q9U3ltYm9sLmZvcihcInJlYWN0LmNsaWVudC5yZWZlcmVuY2VcIiksT2U9Q2UsYmU9Y2U7ZnVuY3Rpb24gUHQoZSl7aWYodHlwZW9mIGU9PVwib2JqZWN0XCImJmUhPT1udWxsKXtsZXQgdD1lLiQkdHlwZW9mO3N3aXRjaCh0KXtjYXNlIGV0OntsZXQgbz1lLnR5cGU7c3dpdGNoKG8pe2Nhc2Ugb3Q6Y2FzZSBudDpjYXNlIHJ0OmNhc2UgY3Q6Y2FzZSBpdDpyZXR1cm4gbztkZWZhdWx0OntsZXQgbj1vJiZvLiQkdHlwZW9mO3N3aXRjaChuKXtjYXNlIGF0OmNhc2UgcHQ6Y2FzZSBDZTpjYXNlIHV0OmNhc2UgY2U6Y2FzZSBzdDpyZXR1cm4gbjtkZWZhdWx0OnJldHVybiB0fX19fWNhc2UgdHQ6cmV0dXJuIHR9fX1mdW5jdGlvbiBEZShlKXtyZXR1cm4gUHQoZSk9PT1jZX1mdW5jdGlvbiBsdChlLHQsbyxuLHthcmVTdGF0ZXNFcXVhbDpyLGFyZU93blByb3BzRXF1YWw6cyxhcmVTdGF0ZVByb3BzRXF1YWw6Y30pe2xldCB1PSExLGkscCxQLGwsVDtmdW5jdGlvbiB3KFMsbSl7cmV0dXJuIGk9UyxwPW0sUD1lKGkscCksbD10KG4scCksVD1vKFAsbCxwKSx1PSEwLFR9ZnVuY3Rpb24geSgpe3JldHVybiBQPWUoaSxwKSx0LmRlcGVuZHNPbk93blByb3BzJiYobD10KG4scCkpLFQ9byhQLGwscCksVH1mdW5jdGlvbiBEKCl7cmV0dXJuIGUuZGVwZW5kc09uT3duUHJvcHMmJihQPWUoaSxwKSksdC5kZXBlbmRzT25Pd25Qcm9wcyYmKGw9dChuLHApKSxUPW8oUCxsLHApLFR9ZnVuY3Rpb24gZCgpe2xldCBTPWUoaSxwKSxtPSFjKFMsUCk7cmV0dXJuIFA9UyxtJiYoVD1vKFAsbCxwKSksVH1mdW5jdGlvbiB4KFMsbSl7bGV0IEM9IXMobSxwKSxxPSFyKFMsaSxtLHApO3JldHVybiBpPVMscD1tLEMmJnE/eSgpOkM/RCgpOnE/ZCgpOlR9cmV0dXJuIGZ1bmN0aW9uKG0sQyl7cmV0dXJuIHU/eChtLEMpOncobSxDKX19ZnVuY3Rpb24gaWUoZSx7aW5pdE1hcFN0YXRlVG9Qcm9wczp0LGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6byxpbml0TWVyZ2VQcm9wczpuLC4uLnJ9KXtsZXQgcz10KGUsciksYz1vKGUsciksdT1uKGUscik7cmV0dXJuIGx0KHMsYyx1LGUscil9ZnVuY3Rpb24gdWUoZSx0KXtsZXQgbz17fTtmb3IobGV0IG4gaW4gZSl7bGV0IHI9ZVtuXTt0eXBlb2Ygcj09XCJmdW5jdGlvblwiJiYob1tuXT0oLi4ucyk9PnQociguLi5zKSkpfXJldHVybiBvfWZ1bmN0aW9uIFcoZSl7cmV0dXJuIGZ1bmN0aW9uKG8pe2xldCBuPWUobyk7ZnVuY3Rpb24gcigpe3JldHVybiBufXJldHVybiByLmRlcGVuZHNPbk93blByb3BzPSExLHJ9fWZ1bmN0aW9uIFJlKGUpe3JldHVybiBlLmRlcGVuZHNPbk93blByb3BzPyEhZS5kZXBlbmRzT25Pd25Qcm9wczplLmxlbmd0aCE9PTF9ZnVuY3Rpb24gSyhlLHQpe3JldHVybiBmdW5jdGlvbihuLHtkaXNwbGF5TmFtZTpyfSl7bGV0IHM9ZnVuY3Rpb24odSxpKXtyZXR1cm4gcy5kZXBlbmRzT25Pd25Qcm9wcz9zLm1hcFRvUHJvcHModSxpKTpzLm1hcFRvUHJvcHModSx2b2lkIDApfTtyZXR1cm4gcy5kZXBlbmRzT25Pd25Qcm9wcz0hMCxzLm1hcFRvUHJvcHM9ZnVuY3Rpb24odSxpKXtzLm1hcFRvUHJvcHM9ZSxzLmRlcGVuZHNPbk93blByb3BzPVJlKGUpO2xldCBwPXModSxpKTtyZXR1cm4gdHlwZW9mIHA9PVwiZnVuY3Rpb25cIiYmKHMubWFwVG9Qcm9wcz1wLHMuZGVwZW5kc09uT3duUHJvcHM9UmUocCkscD1zKHUsaSkpLHB9LHN9fWZ1bmN0aW9uIEEoZSx0KXtyZXR1cm4obyxuKT0+e3Rocm93IG5ldyBFcnJvcihgSW52YWxpZCB2YWx1ZSBvZiB0eXBlICR7dHlwZW9mIGV9IGZvciAke3R9IGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgJHtuLndyYXBwZWRDb21wb25lbnROYW1lfS5gKX19ZnVuY3Rpb24gTWUoZSl7cmV0dXJuIGUmJnR5cGVvZiBlPT1cIm9iamVjdFwiP1codD0+dWUoZSx0KSk6ZT90eXBlb2YgZT09XCJmdW5jdGlvblwiP0soZSxcIm1hcERpc3BhdGNoVG9Qcm9wc1wiKTpBKGUsXCJtYXBEaXNwYXRjaFRvUHJvcHNcIik6Vyh0PT4oe2Rpc3BhdGNoOnR9KSl9ZnVuY3Rpb24gZ2UoZSl7cmV0dXJuIGU/dHlwZW9mIGU9PVwiZnVuY3Rpb25cIj9LKGUsXCJtYXBTdGF0ZVRvUHJvcHNcIik6QShlLFwibWFwU3RhdGVUb1Byb3BzXCIpOlcoKCk9Pih7fSkpfWZ1bmN0aW9uIGR0KGUsdCxvKXtyZXR1cm57Li4ubywuLi5lLC4uLnR9fWZ1bmN0aW9uIFR0KGUpe3JldHVybiBmdW5jdGlvbihvLHtkaXNwbGF5TmFtZTpuLGFyZU1lcmdlZFByb3BzRXF1YWw6cn0pe2xldCBzPSExLGM7cmV0dXJuIGZ1bmN0aW9uKGkscCxQKXtsZXQgbD1lKGkscCxQKTtyZXR1cm4gcz9yKGwsYyl8fChjPWwpOihzPSEwLGM9bCksY319fWZ1bmN0aW9uIEVlKGUpe3JldHVybiBlP3R5cGVvZiBlPT1cImZ1bmN0aW9uXCI/VHQoZSk6QShlLFwibWVyZ2VQcm9wc1wiKTooKT0+ZHR9ZnVuY3Rpb24gWChlKXtlKCl9ZnVuY3Rpb24gZnQoKXtsZXQgZT1udWxsLHQ9bnVsbDtyZXR1cm57Y2xlYXIoKXtlPW51bGwsdD1udWxsfSxub3RpZnkoKXtYKCgpPT57bGV0IG89ZTtmb3IoO287KW8uY2FsbGJhY2soKSxvPW8ubmV4dH0pfSxnZXQoKXtsZXQgbz1bXSxuPWU7Zm9yKDtuOylvLnB1c2gobiksbj1uLm5leHQ7cmV0dXJuIG99LHN1YnNjcmliZShvKXtsZXQgbj0hMCxyPXQ9e2NhbGxiYWNrOm8sbmV4dDpudWxsLHByZXY6dH07cmV0dXJuIHIucHJldj9yLnByZXYubmV4dD1yOmU9cixmdW5jdGlvbigpeyFufHxlPT09bnVsbHx8KG49ITEsci5uZXh0P3IubmV4dC5wcmV2PXIucHJldjp0PXIucHJldixyLnByZXY/ci5wcmV2Lm5leHQ9ci5uZXh0OmU9ci5uZXh0KX19fX12YXIga2U9e25vdGlmeSgpe30sZ2V0OigpPT5bXX07ZnVuY3Rpb24gRyhlLHQpe2xldCBvLG49a2Uscj0wLHM9ITE7ZnVuY3Rpb24gYyhEKXtQKCk7bGV0IGQ9bi5zdWJzY3JpYmUoRCkseD0hMTtyZXR1cm4oKT0+e3h8fCh4PSEwLGQoKSxsKCkpfX1mdW5jdGlvbiB1KCl7bi5ub3RpZnkoKX1mdW5jdGlvbiBpKCl7eS5vblN0YXRlQ2hhbmdlJiZ5Lm9uU3RhdGVDaGFuZ2UoKX1mdW5jdGlvbiBwKCl7cmV0dXJuIHN9ZnVuY3Rpb24gUCgpe3IrKyxvfHwobz10P3QuYWRkTmVzdGVkU3ViKGkpOmUuc3Vic2NyaWJlKGkpLG49ZnQoKSl9ZnVuY3Rpb24gbCgpe3ItLSxvJiZyPT09MCYmKG8oKSxvPXZvaWQgMCxuLmNsZWFyKCksbj1rZSl9ZnVuY3Rpb24gVCgpe3N8fChzPSEwLFAoKSl9ZnVuY3Rpb24gdygpe3MmJihzPSExLGwoKSl9bGV0IHk9e2FkZE5lc3RlZFN1YjpjLG5vdGlmeU5lc3RlZFN1YnM6dSxoYW5kbGVDaGFuZ2VXcmFwcGVyOmksaXNTdWJzY3JpYmVkOnAsdHJ5U3Vic2NyaWJlOlQsdHJ5VW5zdWJzY3JpYmU6dyxnZXRMaXN0ZW5lcnM6KCk9Pm59O3JldHVybiB5fXZhciBTdD10eXBlb2Ygd2luZG93PFwidVwiJiZ0eXBlb2Ygd2luZG93LmRvY3VtZW50PFwidVwiJiZ0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQ8XCJ1XCIseXQ9dHlwZW9mIG5hdmlnYXRvcjxcInVcIiYmbmF2aWdhdG9yLnByb2R1Y3Q9PT1cIlJlYWN0TmF0aXZlXCIsRj1TdHx8eXQ/YS51c2VMYXlvdXRFZmZlY3Q6YS51c2VFZmZlY3Q7ZnVuY3Rpb24gQWUoZSx0KXtyZXR1cm4gZT09PXQ/ZSE9PTB8fHQhPT0wfHwxL2U9PT0xL3Q6ZSE9PWUmJnQhPT10fWZ1bmN0aW9uIGcoZSx0KXtpZihBZShlLHQpKXJldHVybiEwO2lmKHR5cGVvZiBlIT1cIm9iamVjdFwifHxlPT09bnVsbHx8dHlwZW9mIHQhPVwib2JqZWN0XCJ8fHQ9PT1udWxsKXJldHVybiExO2xldCBvPU9iamVjdC5rZXlzKGUpLG49T2JqZWN0LmtleXModCk7aWYoby5sZW5ndGghPT1uLmxlbmd0aClyZXR1cm4hMTtmb3IobGV0IHI9MDtyPG8ubGVuZ3RoO3IrKylpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsb1tyXSl8fCFBZShlW29bcl1dLHRbb1tyXV0pKXJldHVybiExO3JldHVybiEwfXZhciBtdD17Y2hpbGRDb250ZXh0VHlwZXM6ITAsY29udGV4dFR5cGU6ITAsY29udGV4dFR5cGVzOiEwLGRlZmF1bHRQcm9wczohMCxkaXNwbGF5TmFtZTohMCxnZXREZWZhdWx0UHJvcHM6ITAsZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiEwLGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczohMCxtaXhpbnM6ITAscHJvcFR5cGVzOiEwLHR5cGU6ITB9LGh0PXtuYW1lOiEwLGxlbmd0aDohMCxwcm90b3R5cGU6ITAsY2FsbGVyOiEwLGNhbGxlZTohMCxhcmd1bWVudHM6ITAsYXJpdHk6ITB9LHh0PXskJHR5cGVvZjohMCxyZW5kZXI6ITAsZGVmYXVsdFByb3BzOiEwLGRpc3BsYXlOYW1lOiEwLHByb3BUeXBlczohMH0sX2U9eyQkdHlwZW9mOiEwLGNvbXBhcmU6ITAsZGVmYXVsdFByb3BzOiEwLGRpc3BsYXlOYW1lOiEwLHByb3BUeXBlczohMCx0eXBlOiEwfSx3dD17W09lXTp4dCxbYmVdOl9lfTtmdW5jdGlvbiBGZShlKXtyZXR1cm4gRGUoZSk/X2U6d3RbZS4kJHR5cGVvZl18fG10fXZhciBDdD1PYmplY3QuZGVmaW5lUHJvcGVydHksT3Q9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsdmU9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxidD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLER0PU9iamVjdC5nZXRQcm90b3R5cGVPZixOZT1PYmplY3QucHJvdG90eXBlO2Z1bmN0aW9uIFUoZSx0KXtpZih0eXBlb2YgdCE9XCJzdHJpbmdcIil7aWYoTmUpe2xldCBzPUR0KHQpO3MmJnMhPT1OZSYmVShlLHMpfWxldCBvPU90KHQpO3ZlJiYobz1vLmNvbmNhdCh2ZSh0KSkpO2xldCBuPUZlKGUpLHI9RmUodCk7Zm9yKGxldCBzPTA7czxvLmxlbmd0aDsrK3Mpe2xldCBjPW9bc107aWYoIWh0W2NdJiYhKHImJnJbY10pJiYhKG4mJm5bY10pKXtsZXQgdT1idCh0LGMpO3RyeXtDdChlLGMsdSl9Y2F0Y2h7fX19fXJldHVybiBlfXZhciBJZT1ILFZlPWU9PntJZT1lfTt2YXIgUnQ9W251bGwsbnVsbF07ZnVuY3Rpb24gTXQoZSx0LG8pe0YoKCk9PmUoLi4udCksbyl9ZnVuY3Rpb24gZ3QoZSx0LG8sbixyLHMpe2UuY3VycmVudD1uLG8uY3VycmVudD0hMSxyLmN1cnJlbnQmJihyLmN1cnJlbnQ9bnVsbCxzKCkpfWZ1bmN0aW9uIEV0KGUsdCxvLG4scixzLGMsdSxpLHAsUCl7aWYoIWUpcmV0dXJuKCk9Pnt9O2xldCBsPSExLFQ9bnVsbCx3PSgpPT57aWYobHx8IXUuY3VycmVudClyZXR1cm47bGV0IEQ9dC5nZXRTdGF0ZSgpLGQseDt0cnl7ZD1uKEQsci5jdXJyZW50KX1jYXRjaChTKXt4PVMsVD1TfXh8fChUPW51bGwpLGQ9PT1zLmN1cnJlbnQ/Yy5jdXJyZW50fHxwKCk6KHMuY3VycmVudD1kLGkuY3VycmVudD1kLGMuY3VycmVudD0hMCxQKCkpfTtyZXR1cm4gby5vblN0YXRlQ2hhbmdlPXcsby50cnlTdWJzY3JpYmUoKSx3KCksKCk9PntpZihsPSEwLG8udHJ5VW5zdWJzY3JpYmUoKSxvLm9uU3RhdGVDaGFuZ2U9bnVsbCxUKXRocm93IFR9fWZ1bmN0aW9uIGt0KGUsdCl7cmV0dXJuIGU9PT10fWZ1bmN0aW9uIEF0KGUsdCxvLHtwdXJlOm4sYXJlU3RhdGVzRXF1YWw6cj1rdCxhcmVPd25Qcm9wc0VxdWFsOnM9ZyxhcmVTdGF0ZVByb3BzRXF1YWw6Yz1nLGFyZU1lcmdlZFByb3BzRXF1YWw6dT1nLGZvcndhcmRSZWY6aT0hMSxjb250ZXh0OnA9Zn09e30pe2xldCBQPXAsbD1nZShlKSxUPU1lKHQpLHc9RWUobykseT0hIWU7cmV0dXJuIGQ9PntsZXQgeD1kLmRpc3BsYXlOYW1lfHxkLm5hbWV8fFwiQ29tcG9uZW50XCIsUz1gQ29ubmVjdCgke3h9KWAsbT17c2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOnksZGlzcGxheU5hbWU6Uyx3cmFwcGVkQ29tcG9uZW50TmFtZTp4LFdyYXBwZWRDb21wb25lbnQ6ZCxpbml0TWFwU3RhdGVUb1Byb3BzOmwsaW5pdE1hcERpc3BhdGNoVG9Qcm9wczpULGluaXRNZXJnZVByb3BzOncsYXJlU3RhdGVzRXF1YWw6cixhcmVTdGF0ZVByb3BzRXF1YWw6YyxhcmVPd25Qcm9wc0VxdWFsOnMsYXJlTWVyZ2VkUHJvcHNFcXVhbDp1fTtmdW5jdGlvbiBDKE8pe2xldFtFLFosUl09YS51c2VNZW1vKCgpPT57bGV0e3JlYWN0UmVkdXhGb3J3YXJkZWRSZWY6aCwuLi5rfT1PO3JldHVybltPLmNvbnRleHQsaCxrXX0sW09dKSx2PWEudXNlTWVtbygoKT0+e2xldCBoPVA7cmV0dXJuIEU/LkNvbnN1bWVyLGh9LFtFLFBdKSxiPWEudXNlQ29udGV4dCh2KSxOPSEhTy5zdG9yZSYmISFPLnN0b3JlLmdldFN0YXRlJiYhIU8uc3RvcmUuZGlzcGF0Y2gsTGU9ISFiJiYhIWIuc3RvcmUsTT1OP08uc3RvcmU6Yi5zdG9yZSxsZT1MZT9iLmdldFNlcnZlclN0YXRlOk0uZ2V0U3RhdGUsUT1hLnVzZU1lbW8oKCk9PmllKE0uZGlzcGF0Y2gsbSksW01dKSxbXyxkZV09YS51c2VNZW1vKCgpPT57aWYoIXkpcmV0dXJuIFJ0O2xldCBoPUcoTSxOP3ZvaWQgMDpiLnN1YnNjcmlwdGlvbiksaz1oLm5vdGlmeU5lc3RlZFN1YnMuYmluZChoKTtyZXR1cm5baCxrXX0sW00sTixiXSksVGU9YS51c2VNZW1vKCgpPT5OP2I6ey4uLmIsc3Vic2NyaXB0aW9uOl99LFtOLGIsX10pLGVlPWEudXNlUmVmKHZvaWQgMCksdGU9YS51c2VSZWYoUiksST1hLnVzZVJlZih2b2lkIDApLGZlPWEudXNlUmVmKCExKSxvZT1hLnVzZVJlZighMSkscmU9YS51c2VSZWYodm9pZCAwKTtGKCgpPT4ob2UuY3VycmVudD0hMCwoKT0+e29lLmN1cnJlbnQ9ITF9KSxbXSk7bGV0IFNlPWEudXNlTWVtbygoKT0+KCk9PkkuY3VycmVudCYmUj09PXRlLmN1cnJlbnQ/SS5jdXJyZW50OlEoTS5nZXRTdGF0ZSgpLFIpLFtNLFJdKSxZZT1hLnVzZU1lbW8oKCk9Pms9Pl8/RXQoeSxNLF8sUSx0ZSxlZSxmZSxvZSxJLGRlLGspOigpPT57fSxbX10pO010KGd0LFt0ZSxlZSxmZSxSLEksZGVdKTtsZXQgTDt0cnl7TD1JZShZZSxTZSxsZT8oKT0+UShsZSgpLFIpOlNlKX1jYXRjaChoKXt0aHJvdyByZS5jdXJyZW50JiYoaC5tZXNzYWdlKz1gXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxuJHtyZS5jdXJyZW50LnN0YWNrfVxuXG5gKSxofUYoKCk9PntyZS5jdXJyZW50PXZvaWQgMCxJLmN1cnJlbnQ9dm9pZCAwLGVlLmN1cnJlbnQ9TH0pO2xldCBuZT1hLnVzZU1lbW8oKCk9PmEuY3JlYXRlRWxlbWVudChkLHsuLi5MLHJlZjpafSksW1osZCxMXSk7cmV0dXJuIGEudXNlTWVtbygoKT0+eT9hLmNyZWF0ZUVsZW1lbnQodi5Qcm92aWRlcix7dmFsdWU6VGV9LG5lKTpuZSxbdixuZSxUZV0pfWxldCAkPWEubWVtbyhDKTtpZigkLldyYXBwZWRDb21wb25lbnQ9ZCwkLmRpc3BsYXlOYW1lPUMuZGlzcGxheU5hbWU9UyxpKXtsZXQgRT1hLmZvcndhcmRSZWYoZnVuY3Rpb24oUix2KXtyZXR1cm4gYS5jcmVhdGVFbGVtZW50KCQsey4uLlIscmVhY3RSZWR1eEZvcndhcmRlZFJlZjp2fSl9KTtyZXR1cm4gRS5kaXNwbGF5TmFtZT1TLEUuV3JhcHBlZENvbXBvbmVudD1kLFUoRSxkKX1yZXR1cm4gVSgkLGQpfX12YXIgV2U9QXQ7ZnVuY3Rpb24gRnQoe3N0b3JlOmUsY29udGV4dDp0LGNoaWxkcmVuOm8sc2VydmVyU3RhdGU6bixzdGFiaWxpdHlDaGVjazpyPVwib25jZVwiLGlkZW50aXR5RnVuY3Rpb25DaGVjazpzPVwib25jZVwifSl7bGV0IGM9YS51c2VNZW1vKCgpPT57bGV0IHA9RyhlKTtyZXR1cm57c3RvcmU6ZSxzdWJzY3JpcHRpb246cCxnZXRTZXJ2ZXJTdGF0ZTpuPygpPT5uOnZvaWQgMCxzdGFiaWxpdHlDaGVjazpyLGlkZW50aXR5RnVuY3Rpb25DaGVjazpzfX0sW2UsbixyLHNdKSx1PWEudXNlTWVtbygoKT0+ZS5nZXRTdGF0ZSgpLFtlXSk7cmV0dXJuIEYoKCk9PntsZXR7c3Vic2NyaXB0aW9uOnB9PWM7cmV0dXJuIHAub25TdGF0ZUNoYW5nZT1wLm5vdGlmeU5lc3RlZFN1YnMscC50cnlTdWJzY3JpYmUoKSx1IT09ZS5nZXRTdGF0ZSgpJiZwLm5vdGlmeU5lc3RlZFN1YnMoKSwoKT0+e3AudHJ5VW5zdWJzY3JpYmUoKSxwLm9uU3RhdGVDaGFuZ2U9dm9pZCAwfX0sW2MsdV0pLGEuY3JlYXRlRWxlbWVudCgodHx8ZikuUHJvdmlkZXIse3ZhbHVlOmN9LG8pfXZhciBVZT1GdDtmdW5jdGlvbiBqKGU9Zil7bGV0IHQ9ZT09PWY/QjpWKGUpLG89KCk9PntsZXR7c3RvcmU6bn09dCgpO3JldHVybiBufTtyZXR1cm4gT2JqZWN0LmFzc2lnbihvLHt3aXRoVHlwZXM6KCk9Pm99KSxvfXZhciBKPWooKTtmdW5jdGlvbiBQZShlPWYpe2xldCB0PWU9PT1mP0o6aihlKSxvPSgpPT50KCkuZGlzcGF0Y2g7cmV0dXJuIE9iamVjdC5hc3NpZ24obyx7d2l0aFR5cGVzOigpPT5vfSksb312YXIgamU9UGUoKTt2YXIgdnQ9WDt4ZSgkZS51c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3Rvcik7VmUocWUudXNlU3luY0V4dGVybmFsU3RvcmUpOzAmJihtb2R1bGUuZXhwb3J0cz17UHJvdmlkZXIsUmVhY3RSZWR1eENvbnRleHQsYmF0Y2gsY29ubmVjdCxjcmVhdGVEaXNwYXRjaEhvb2ssY3JlYXRlU2VsZWN0b3JIb29rLGNyZWF0ZVN0b3JlSG9vayxzaGFsbG93RXF1YWwsdXNlRGlzcGF0Y2gsdXNlU2VsZWN0b3IsdXNlU3RvcmV9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJlZHV4LnByb2R1Y3Rpb24ubWluLmNqcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICB0aHVuazogKCkgPT4gdGh1bmssXG4gIHdpdGhFeHRyYUFyZ3VtZW50OiAoKSA9PiB3aXRoRXh0cmFBcmd1bWVudFxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5mdW5jdGlvbiBjcmVhdGVUaHVua01pZGRsZXdhcmUoZXh0cmFBcmd1bWVudCkge1xuICBjb25zdCBtaWRkbGV3YXJlID0gKHsgZGlzcGF0Y2gsIGdldFN0YXRlIH0pID0+IChuZXh0KSA9PiAoYWN0aW9uKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICB9O1xuICByZXR1cm4gbWlkZGxld2FyZTtcbn1cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpO1xudmFyIHdpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRodW5rLFxuICB3aXRoRXh0cmFBcmd1bWVudFxufSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzOiAoKSA9PiBhY3Rpb25UeXBlc19kZWZhdWx0LFxuICBhcHBseU1pZGRsZXdhcmU6ICgpID0+IGFwcGx5TWlkZGxld2FyZSxcbiAgYmluZEFjdGlvbkNyZWF0b3JzOiAoKSA9PiBiaW5kQWN0aW9uQ3JlYXRvcnMsXG4gIGNvbWJpbmVSZWR1Y2VyczogKCkgPT4gY29tYmluZVJlZHVjZXJzLFxuICBjb21wb3NlOiAoKSA9PiBjb21wb3NlLFxuICBjcmVhdGVTdG9yZTogKCkgPT4gY3JlYXRlU3RvcmUsXG4gIGlzQWN0aW9uOiAoKSA9PiBpc0FjdGlvbixcbiAgaXNQbGFpbk9iamVjdDogKCkgPT4gaXNQbGFpbk9iamVjdCxcbiAgbGVnYWN5X2NyZWF0ZVN0b3JlOiAoKSA9PiBsZWdhY3lfY3JlYXRlU3RvcmVcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvdXRpbHMvZm9ybWF0UHJvZEVycm9yTWVzc2FnZS50c1xuZnVuY3Rpb24gZm9ybWF0UHJvZEVycm9yTWVzc2FnZShjb2RlKSB7XG4gIHJldHVybiBgTWluaWZpZWQgUmVkdXggZXJyb3IgIyR7Y29kZX07IHZpc2l0IGh0dHBzOi8vcmVkdXguanMub3JnL0Vycm9ycz9jb2RlPSR7Y29kZX0gZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycy4gYDtcbn1cblxuLy8gc3JjL3V0aWxzL3N5bWJvbC1vYnNlcnZhYmxlLnRzXG52YXIgJCRvYnNlcnZhYmxlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLm9ic2VydmFibGUgfHwgXCJAQG9ic2VydmFibGVcIikoKTtcbnZhciBzeW1ib2xfb2JzZXJ2YWJsZV9kZWZhdWx0ID0gJCRvYnNlcnZhYmxlO1xuXG4vLyBzcmMvdXRpbHMvYWN0aW9uVHlwZXMudHNcbnZhciByYW5kb21TdHJpbmcgPSAoKSA9PiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoXCJcIikuam9pbihcIi5cIik7XG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IGBAQHJlZHV4L0lOSVQkey8qIEBfX1BVUkVfXyAqLyByYW5kb21TdHJpbmcoKX1gLFxuICBSRVBMQUNFOiBgQEByZWR1eC9SRVBMQUNFJHsvKiBAX19QVVJFX18gKi8gcmFuZG9tU3RyaW5nKCl9YCxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046ICgpID0+IGBAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OJHtyYW5kb21TdHJpbmcoKX1gXG59O1xudmFyIGFjdGlvblR5cGVzX2RlZmF1bHQgPSBBY3Rpb25UeXBlcztcblxuLy8gc3JjL3V0aWxzL2lzUGxhaW5PYmplY3QudHNcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiIHx8IG9iaiA9PT0gbnVsbClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGxldCBwcm90byA9IG9iajtcbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90byB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gbnVsbDtcbn1cblxuLy8gc3JjL3V0aWxzL2tpbmRPZi50c1xuZnVuY3Rpb24gbWluaUtpbmRPZih2YWwpIHtcbiAgaWYgKHZhbCA9PT0gdm9pZCAwKVxuICAgIHJldHVybiBcInVuZGVmaW5lZFwiO1xuICBpZiAodmFsID09PSBudWxsKVxuICAgIHJldHVybiBcIm51bGxcIjtcbiAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgY2FzZSBcImZ1bmN0aW9uXCI6IHtcbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKVxuICAgIHJldHVybiBcImFycmF5XCI7XG4gIGlmIChpc0RhdGUodmFsKSlcbiAgICByZXR1cm4gXCJkYXRlXCI7XG4gIGlmIChpc0Vycm9yKHZhbCkpXG4gICAgcmV0dXJuIFwiZXJyb3JcIjtcbiAgY29uc3QgY29uc3RydWN0b3JOYW1lID0gY3Rvck5hbWUodmFsKTtcbiAgc3dpdGNoIChjb25zdHJ1Y3Rvck5hbWUpIHtcbiAgICBjYXNlIFwiU3ltYm9sXCI6XG4gICAgY2FzZSBcIlByb21pc2VcIjpcbiAgICBjYXNlIFwiV2Vha01hcFwiOlxuICAgIGNhc2UgXCJXZWFrU2V0XCI6XG4gICAgY2FzZSBcIk1hcFwiOlxuICAgIGNhc2UgXCJTZXRcIjpcbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvck5hbWU7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCBcIlwiKTtcbn1cbmZ1bmN0aW9uIGN0b3JOYW1lKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbC5jb25zdHJ1Y3RvciA9PT0gXCJmdW5jdGlvblwiID8gdmFsLmNvbnN0cnVjdG9yLm5hbWUgOiBudWxsO1xufVxuZnVuY3Rpb24gaXNFcnJvcih2YWwpIHtcbiAgcmV0dXJuIHZhbCBpbnN0YW5jZW9mIEVycm9yIHx8IHR5cGVvZiB2YWwubWVzc2FnZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWwuY29uc3RydWN0b3IgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5zdGFja1RyYWNlTGltaXQgPT09IFwibnVtYmVyXCI7XG59XG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBEYXRlKVxuICAgIHJldHVybiB0cnVlO1xuICByZXR1cm4gdHlwZW9mIHZhbC50b0RhdGVTdHJpbmcgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgdmFsLmdldERhdGUgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgdmFsLnNldERhdGUgPT09IFwiZnVuY3Rpb25cIjtcbn1cbmZ1bmN0aW9uIGtpbmRPZih2YWwpIHtcbiAgbGV0IHR5cGVPZlZhbCA9IHR5cGVvZiB2YWw7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB0eXBlT2ZWYWwgPSBtaW5pS2luZE9mKHZhbCk7XG4gIH1cbiAgcmV0dXJuIHR5cGVPZlZhbDtcbn1cblxuLy8gc3JjL2NyZWF0ZVN0b3JlLnRzXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyKSA6IGBFeHBlY3RlZCB0aGUgcm9vdCByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnJHtraW5kT2YocmVkdWNlcil9J2ApO1xuICB9XG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZW5oYW5jZXIgPT09IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgZW5oYW5jZXIgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgwKSA6IFwiSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gdG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNjcmVhdGluZy1hLXN0b3JlLXdpdGgtZW5oYW5jZXJzIGZvciBhbiBleGFtcGxlLlwiKTtcbiAgfVxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGVuaGFuY2VyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHZvaWQgMDtcbiAgfVxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxKSA6IGBFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICcke2tpbmRPZihlbmhhbmNlcil9J2ApO1xuICAgIH1cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuICBsZXQgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICBsZXQgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIGxldCBjdXJyZW50TGlzdGVuZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgbGV0IG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICBsZXQgbGlzdGVuZXJJZENvdW50ZXIgPSAwO1xuICBsZXQgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICAgIGN1cnJlbnRMaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIsIGtleSkgPT4ge1xuICAgICAgICBuZXh0TGlzdGVuZXJzLnNldChrZXksIGxpc3RlbmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMykgOiBcIllvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuIFRoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS5cIik7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0KSA6IGBFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICcke2tpbmRPZihsaXN0ZW5lcil9J2ApO1xuICAgIH1cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNSkgOiBcIllvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiBJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSBjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLlwiKTtcbiAgICB9XG4gICAgbGV0IGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIGNvbnN0IGxpc3RlbmVySWQgPSBsaXN0ZW5lcklkQ291bnRlcisrO1xuICAgIG5leHRMaXN0ZW5lcnMuc2V0KGxpc3RlbmVySWQsIGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2KSA6IFwiWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLlwiKTtcbiAgICAgIH1cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgbmV4dExpc3RlbmVycy5kZWxldGUobGlzdGVuZXJJZCk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg3KSA6IGBBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gSW5zdGVhZCwgdGhlIGFjdHVhbCB0eXBlIHdhczogJyR7a2luZE9mKGFjdGlvbil9Jy4gWW91IG1heSBuZWVkIHRvIGFkZCBtaWRkbGV3YXJlIHRvIHlvdXIgc3RvcmUgc2V0dXAgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIG90aGVyIHZhbHVlcywgc3VjaCBhcyAncmVkdXgtdGh1bmsnIHRvIGhhbmRsZSBkaXNwYXRjaGluZyBmdW5jdGlvbnMuIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNtaWRkbGV3YXJlIGFuZCBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNi1hc3luYy1sb2dpYyN1c2luZy10aGUtcmVkdXgtdGh1bmstbWlkZGxld2FyZSBmb3IgZXhhbXBsZXMuYCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDgpIDogJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gWW91IG1heSBoYXZlIG1pc3NwZWxsZWQgYW4gYWN0aW9uIHR5cGUgc3RyaW5nIGNvbnN0YW50LicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNykgOiBgQWN0aW9uIFwidHlwZVwiIHByb3BlcnR5IG11c3QgYmUgYSBzdHJpbmcuIEluc3RlYWQsIHRoZSBhY3R1YWwgdHlwZSB3YXM6ICcke2tpbmRPZihhY3Rpb24udHlwZSl9Jy4gVmFsdWUgd2FzOiAnJHthY3Rpb24udHlwZX0nIChzdHJpbmdpZmllZClgKTtcbiAgICB9XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkpIDogXCJSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuXCIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG4gICAgbGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEwKSA6IGBFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICcke2tpbmRPZihuZXh0UmVkdWNlcil9YCk7XG4gICAgfVxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7XG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogYWN0aW9uVHlwZXNfZGVmYXVsdC5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICBjb25zdCBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSBcIm9iamVjdFwiIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTEpIDogYEV4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuIEluc3RlYWQsIHJlY2VpdmVkOiAnJHtraW5kT2Yob2JzZXJ2ZXIpfSdgKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgY29uc3Qgb2JzZXJ2ZXJBc09ic2VydmVyID0gb2JzZXJ2ZXI7XG4gICAgICAgICAgaWYgKG9ic2VydmVyQXNPYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlckFzT2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIFtzeW1ib2xfb2JzZXJ2YWJsZV9kZWZhdWx0XSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogYWN0aW9uVHlwZXNfZGVmYXVsdC5JTklUXG4gIH0pO1xuICBjb25zdCBzdG9yZSA9IHtcbiAgICBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXIsXG4gICAgW3N5bWJvbF9vYnNlcnZhYmxlX2RlZmF1bHRdOiBvYnNlcnZhYmxlXG4gIH07XG4gIHJldHVybiBzdG9yZTtcbn1cbmZ1bmN0aW9uIGxlZ2FjeV9jcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgcmV0dXJuIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcik7XG59XG5cbi8vIHNyYy91dGlscy93YXJuaW5nLnRzXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIHRyeSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7XG4gIH1cbn1cblxuLy8gc3JjL2NvbWJpbmVSZWR1Y2Vycy50c1xuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgY29uc3QgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIGNvbnN0IGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gYWN0aW9uVHlwZXNfZGVmYXVsdC5JTklUID8gXCJwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmVcIiA6IFwicHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXJcIjtcbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBcIlN0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCB0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuXCI7XG4gIH1cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIGBUaGUgJHthcmd1bWVudE5hbWV9IGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXCIke2tpbmRPZihpbnB1dFN0YXRlKX1cIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBrZXlzOiBcIiR7cmVkdWNlcktleXMuam9pbignXCIsIFwiJyl9XCJgO1xuICB9XG4gIGNvbnN0IHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKChrZXkpID0+ICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IGFjdGlvblR5cGVzX2RlZmF1bHQuUkVQTEFDRSlcbiAgICByZXR1cm47XG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGBVbmV4cGVjdGVkICR7dW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/IFwia2V5c1wiIDogXCJrZXlcIn0gXCIke3VuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpfVwiIGZvdW5kIGluICR7YXJndW1lbnROYW1lfS4gRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiR7cmVkdWNlcktleXMuam9pbignXCIsIFwiJyl9XCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuYDtcbiAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHZvaWQgMCwge1xuICAgICAgdHlwZTogYWN0aW9uVHlwZXNfZGVmYXVsdC5JTklUXG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEyKSA6IGBUaGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFwiJHtrZXl9XCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgeW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5gKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHZvaWQgMCwge1xuICAgICAgdHlwZTogYWN0aW9uVHlwZXNfZGVmYXVsdC5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzKSA6IGBUaGUgc2xpY2UgcmVkdWNlciBmb3Iga2V5IFwiJHtrZXl9XCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gRG9uJ3QgdHJ5IHRvIGhhbmRsZSAnJHthY3Rpb25UeXBlc19kZWZhdWx0LklOSVR9JyBvciBvdGhlciBhY3Rpb25zIGluIFwicmVkdXgvKlwiIG5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIGluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5gKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIGNvbnN0IHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICBjb25zdCBmaW5hbFJlZHVjZXJzID0ge307XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgd2FybmluZyhgTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFwiJHtrZXl9XCJgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG4gIGNvbnN0IGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTtcbiAgbGV0IHVuZXhwZWN0ZWRLZXlDYWNoZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG4gIGxldCBzaGFwZUFzc2VydGlvbkVycm9yO1xuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSA9IHt9LCBhY3Rpb24pIHtcbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc3Qgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgY29uc3QgbmV4dFN0YXRlID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSBmaW5hbFJlZHVjZXJLZXlzW2ldO1xuICAgICAgY29uc3QgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNba2V5XTtcbiAgICAgIGNvbnN0IHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtrZXldO1xuICAgICAgY29uc3QgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgY29uc3QgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTQpIDogYFdoZW4gY2FsbGVkIHdpdGggYW4gYWN0aW9uIG9mIHR5cGUgJHthY3Rpb25UeXBlID8gYFwiJHtTdHJpbmcoYWN0aW9uVHlwZSl9XCJgIDogXCIodW5rbm93biB0eXBlKVwifSwgdGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcIiR7a2V5fVwiIHJldHVybmVkIHVuZGVmaW5lZC4gVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5gKTtcbiAgICAgIH1cbiAgICAgIG5leHRTdGF0ZVtrZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG4vLyBzcmMvYmluZEFjdGlvbkNyZWF0b3JzLnRzXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3MpKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gXCJvYmplY3RcIiB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2KSA6IGBiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGJ1dCBpbnN0ZWFkIHJlY2VpdmVkOiAnJHtraW5kT2YoYWN0aW9uQ3JlYXRvcnMpfScuIERpZCB5b3Ugd3JpdGUgXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiIGluc3RlYWQgb2YgXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXCI/YCk7XG4gIH1cbiAgY29uc3QgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIGNvbnN0IGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG4vLyBzcmMvY29tcG9zZS50c1xuZnVuY3Rpb24gY29tcG9zZSguLi5mdW5jcykge1xuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIChhcmcpID0+IGFyZztcbiAgfVxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoKGEsIGIpID0+ICguLi5hcmdzKSA9PiBhKGIoLi4uYXJncykpKTtcbn1cblxuLy8gc3JjL2FwcGx5TWlkZGxld2FyZS50c1xuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKC4uLm1pZGRsZXdhcmVzKSB7XG4gIHJldHVybiAoY3JlYXRlU3RvcmUyKSA9PiAocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpID0+IHtcbiAgICBjb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlMihyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gICAgbGV0IGRpc3BhdGNoID0gKCkgPT4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTUpIDogXCJEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiBPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guXCIpO1xuICAgIH07XG4gICAgY29uc3QgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgIGRpc3BhdGNoOiAoYWN0aW9uLCAuLi5hcmdzKSA9PiBkaXNwYXRjaChhY3Rpb24sIC4uLmFyZ3MpXG4gICAgfTtcbiAgICBjb25zdCBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcCgobWlkZGxld2FyZSkgPT4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKSk7XG4gICAgZGlzcGF0Y2ggPSBjb21wb3NlKC4uLmNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnN0b3JlLFxuICAgICAgZGlzcGF0Y2hcbiAgICB9O1xuICB9O1xufVxuXG4vLyBzcmMvdXRpbHMvaXNBY3Rpb24udHNcbmZ1bmN0aW9uIGlzQWN0aW9uKGFjdGlvbikge1xuICByZXR1cm4gaXNQbGFpbk9iamVjdChhY3Rpb24pICYmIFwidHlwZVwiIGluIGFjdGlvbiAmJiB0eXBlb2YgYWN0aW9uLnR5cGUgPT09IFwic3RyaW5nXCI7XG59XG4vLyBBbm5vdGF0ZSB0aGUgQ29tbW9uSlMgZXhwb3J0IG5hbWVzIGZvciBFU00gaW1wb3J0IGluIG5vZGU6XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcyxcbiAgYXBwbHlNaWRkbGV3YXJlLFxuICBiaW5kQWN0aW9uQ3JlYXRvcnMsXG4gIGNvbWJpbmVSZWR1Y2VycyxcbiAgY29tcG9zZSxcbiAgY3JlYXRlU3RvcmUsXG4gIGlzQWN0aW9uLFxuICBpc1BsYWluT2JqZWN0LFxuICBsZWdhY3lfY3JlYXRlU3RvcmVcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkdXguY2pzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIGNyZWF0ZVNlbGVjdG9yOiAoKSA9PiBjcmVhdGVTZWxlY3RvcixcbiAgY3JlYXRlU2VsZWN0b3JDcmVhdG9yOiAoKSA9PiBjcmVhdGVTZWxlY3RvckNyZWF0b3IsXG4gIGNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvcjogKCkgPT4gY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yLFxuICBscnVNZW1vaXplOiAoKSA9PiBscnVNZW1vaXplLFxuICByZWZlcmVuY2VFcXVhbGl0eUNoZWNrOiAoKSA9PiByZWZlcmVuY2VFcXVhbGl0eUNoZWNrLFxuICBzZXRHbG9iYWxEZXZNb2RlQ2hlY2tzOiAoKSA9PiBzZXRHbG9iYWxEZXZNb2RlQ2hlY2tzLFxuICB1bnN0YWJsZV9hdXRvdHJhY2tNZW1vaXplOiAoKSA9PiBhdXRvdHJhY2tNZW1vaXplLFxuICB3ZWFrTWFwTWVtb2l6ZTogKCkgPT4gd2Vha01hcE1lbW9pemVcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvZGV2TW9kZUNoZWNrcy9pZGVudGl0eUZ1bmN0aW9uQ2hlY2sudHNcbnZhciBydW5JZGVudGl0eUZ1bmN0aW9uQ2hlY2sgPSAocmVzdWx0RnVuYywgaW5wdXRTZWxlY3RvcnNSZXN1bHRzLCBvdXRwdXRTZWxlY3RvclJlc3VsdCkgPT4ge1xuICBpZiAoaW5wdXRTZWxlY3RvcnNSZXN1bHRzLmxlbmd0aCA9PT0gMSAmJiBpbnB1dFNlbGVjdG9yc1Jlc3VsdHNbMF0gPT09IG91dHB1dFNlbGVjdG9yUmVzdWx0KSB7XG4gICAgbGV0IGlzSW5wdXRTYW1lQXNPdXRwdXQgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZW1wdHlPYmplY3QgPSB7fTtcbiAgICAgIGlmIChyZXN1bHRGdW5jKGVtcHR5T2JqZWN0KSA9PT0gZW1wdHlPYmplY3QpXG4gICAgICAgIGlzSW5wdXRTYW1lQXNPdXRwdXQgPSB0cnVlO1xuICAgIH0gY2F0Y2gge1xuICAgIH1cbiAgICBpZiAoaXNJbnB1dFNhbWVBc091dHB1dCkge1xuICAgICAgbGV0IHN0YWNrID0gdm9pZCAwO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIDtcbiAgICAgICAgKHsgc3RhY2sgfSA9IGUpO1xuICAgICAgfVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBcIlRoZSByZXN1bHQgZnVuY3Rpb24gcmV0dXJuZWQgaXRzIG93biBpbnB1dHMgd2l0aG91dCBtb2RpZmljYXRpb24uIGUuZ1xcbmBjcmVhdGVTZWxlY3Rvcihbc3RhdGUgPT4gc3RhdGUudG9kb3NdLCB0b2RvcyA9PiB0b2RvcylgXFxuVGhpcyBjb3VsZCBsZWFkIHRvIGluZWZmaWNpZW50IG1lbW9pemF0aW9uIGFuZCB1bm5lY2Vzc2FyeSByZS1yZW5kZXJzLlxcbkVuc3VyZSB0cmFuc2Zvcm1hdGlvbiBsb2dpYyBpcyBpbiB0aGUgcmVzdWx0IGZ1bmN0aW9uLCBhbmQgZXh0cmFjdGlvbiBsb2dpYyBpcyBpbiB0aGUgaW5wdXQgc2VsZWN0b3JzLlwiLFxuICAgICAgICB7IHN0YWNrIH1cbiAgICAgICk7XG4gICAgfVxuICB9XG59O1xuXG4vLyBzcmMvZGV2TW9kZUNoZWNrcy9pbnB1dFN0YWJpbGl0eUNoZWNrLnRzXG52YXIgcnVuSW5wdXRTdGFiaWxpdHlDaGVjayA9IChpbnB1dFNlbGVjdG9yUmVzdWx0c09iamVjdCwgb3B0aW9ucywgaW5wdXRTZWxlY3RvckFyZ3MpID0+IHtcbiAgY29uc3QgeyBtZW1vaXplLCBtZW1vaXplT3B0aW9ucyB9ID0gb3B0aW9ucztcbiAgY29uc3QgeyBpbnB1dFNlbGVjdG9yUmVzdWx0cywgaW5wdXRTZWxlY3RvclJlc3VsdHNDb3B5IH0gPSBpbnB1dFNlbGVjdG9yUmVzdWx0c09iamVjdDtcbiAgY29uc3QgY3JlYXRlQW5FbXB0eU9iamVjdCA9IG1lbW9pemUoKCkgPT4gKHt9KSwgLi4ubWVtb2l6ZU9wdGlvbnMpO1xuICBjb25zdCBhcmVJbnB1dFNlbGVjdG9yUmVzdWx0c0VxdWFsID0gY3JlYXRlQW5FbXB0eU9iamVjdC5hcHBseShudWxsLCBpbnB1dFNlbGVjdG9yUmVzdWx0cykgPT09IGNyZWF0ZUFuRW1wdHlPYmplY3QuYXBwbHkobnVsbCwgaW5wdXRTZWxlY3RvclJlc3VsdHNDb3B5KTtcbiAgaWYgKCFhcmVJbnB1dFNlbGVjdG9yUmVzdWx0c0VxdWFsKSB7XG4gICAgbGV0IHN0YWNrID0gdm9pZCAwO1xuICAgIHRyeSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICA7XG4gICAgICAoeyBzdGFjayB9ID0gZSk7XG4gICAgfVxuICAgIGNvbnNvbGUud2FybihcbiAgICAgIFwiQW4gaW5wdXQgc2VsZWN0b3IgcmV0dXJuZWQgYSBkaWZmZXJlbnQgcmVzdWx0IHdoZW4gcGFzc2VkIHNhbWUgYXJndW1lbnRzLlxcblRoaXMgbWVhbnMgeW91ciBvdXRwdXQgc2VsZWN0b3Igd2lsbCBsaWtlbHkgcnVuIG1vcmUgZnJlcXVlbnRseSB0aGFuIGludGVuZGVkLlxcbkF2b2lkIHJldHVybmluZyBhIG5ldyByZWZlcmVuY2UgaW5zaWRlIHlvdXIgaW5wdXQgc2VsZWN0b3IsIGUuZy5cXG5gY3JlYXRlU2VsZWN0b3IoW3N0YXRlID0+IHN0YXRlLnRvZG9zLm1hcCh0b2RvID0+IHRvZG8uaWQpXSwgdG9kb0lkcyA9PiB0b2RvSWRzLmxlbmd0aClgXCIsXG4gICAgICB7XG4gICAgICAgIGFyZ3VtZW50czogaW5wdXRTZWxlY3RvckFyZ3MsXG4gICAgICAgIGZpcnN0SW5wdXRzOiBpbnB1dFNlbGVjdG9yUmVzdWx0cyxcbiAgICAgICAgc2Vjb25kSW5wdXRzOiBpbnB1dFNlbGVjdG9yUmVzdWx0c0NvcHksXG4gICAgICAgIHN0YWNrXG4gICAgICB9XG4gICAgKTtcbiAgfVxufTtcblxuLy8gc3JjL2Rldk1vZGVDaGVja3Mvc2V0R2xvYmFsRGV2TW9kZUNoZWNrcy50c1xudmFyIGdsb2JhbERldk1vZGVDaGVja3MgPSB7XG4gIGlucHV0U3RhYmlsaXR5Q2hlY2s6IFwib25jZVwiLFxuICBpZGVudGl0eUZ1bmN0aW9uQ2hlY2s6IFwib25jZVwiXG59O1xudmFyIHNldEdsb2JhbERldk1vZGVDaGVja3MgPSAoZGV2TW9kZUNoZWNrcykgPT4ge1xuICBPYmplY3QuYXNzaWduKGdsb2JhbERldk1vZGVDaGVja3MsIGRldk1vZGVDaGVja3MpO1xufTtcblxuLy8gc3JjL3V0aWxzLnRzXG52YXIgTk9UX0ZPVU5EID0gLyogQF9fUFVSRV9fICovIFN5bWJvbChcIk5PVF9GT1VORFwiKTtcbmZ1bmN0aW9uIGFzc2VydElzRnVuY3Rpb24oZnVuYywgZXJyb3JNZXNzYWdlID0gYGV4cGVjdGVkIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgJHt0eXBlb2YgZnVuY31gKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihlcnJvck1lc3NhZ2UpO1xuICB9XG59XG5mdW5jdGlvbiBhc3NlcnRJc09iamVjdChvYmplY3QsIGVycm9yTWVzc2FnZSA9IGBleHBlY3RlZCBhbiBvYmplY3QsIGluc3RlYWQgcmVjZWl2ZWQgJHt0eXBlb2Ygb2JqZWN0fWApIHtcbiAgaWYgKHR5cGVvZiBvYmplY3QgIT09IFwib2JqZWN0XCIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGVycm9yTWVzc2FnZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFzc2VydElzQXJyYXlPZkZ1bmN0aW9ucyhhcnJheSwgZXJyb3JNZXNzYWdlID0gYGV4cGVjdGVkIGFsbCBpdGVtcyB0byBiZSBmdW5jdGlvbnMsIGluc3RlYWQgcmVjZWl2ZWQgdGhlIGZvbGxvd2luZyB0eXBlczogYCkge1xuICBpZiAoIWFycmF5LmV2ZXJ5KChpdGVtKSA9PiB0eXBlb2YgaXRlbSA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIGNvbnN0IGl0ZW1UeXBlcyA9IGFycmF5Lm1hcChcbiAgICAgIChpdGVtKSA9PiB0eXBlb2YgaXRlbSA9PT0gXCJmdW5jdGlvblwiID8gYGZ1bmN0aW9uICR7aXRlbS5uYW1lIHx8IFwidW5uYW1lZFwifSgpYCA6IHR5cGVvZiBpdGVtXG4gICAgKS5qb2luKFwiLCBcIik7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtlcnJvck1lc3NhZ2V9WyR7aXRlbVR5cGVzfV1gKTtcbiAgfVxufVxudmFyIGVuc3VyZUlzQXJyYXkgPSAoaXRlbSkgPT4ge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShpdGVtKSA/IGl0ZW0gOiBbaXRlbV07XG59O1xuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jaWVzKGNyZWF0ZVNlbGVjdG9yQXJncykge1xuICBjb25zdCBkZXBlbmRlbmNpZXMgPSBBcnJheS5pc0FycmF5KGNyZWF0ZVNlbGVjdG9yQXJnc1swXSkgPyBjcmVhdGVTZWxlY3RvckFyZ3NbMF0gOiBjcmVhdGVTZWxlY3RvckFyZ3M7XG4gIGFzc2VydElzQXJyYXlPZkZ1bmN0aW9ucyhcbiAgICBkZXBlbmRlbmNpZXMsXG4gICAgYGNyZWF0ZVNlbGVjdG9yIGV4cGVjdHMgYWxsIGlucHV0LXNlbGVjdG9ycyB0byBiZSBmdW5jdGlvbnMsIGJ1dCByZWNlaXZlZCB0aGUgZm9sbG93aW5nIHR5cGVzOiBgXG4gICk7XG4gIHJldHVybiBkZXBlbmRlbmNpZXM7XG59XG5mdW5jdGlvbiBjb2xsZWN0SW5wdXRTZWxlY3RvclJlc3VsdHMoZGVwZW5kZW5jaWVzLCBpbnB1dFNlbGVjdG9yQXJncykge1xuICBjb25zdCBpbnB1dFNlbGVjdG9yUmVzdWx0cyA9IFtdO1xuICBjb25zdCB7IGxlbmd0aCB9ID0gZGVwZW5kZW5jaWVzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaW5wdXRTZWxlY3RvclJlc3VsdHMucHVzaChkZXBlbmRlbmNpZXNbaV0uYXBwbHkobnVsbCwgaW5wdXRTZWxlY3RvckFyZ3MpKTtcbiAgfVxuICByZXR1cm4gaW5wdXRTZWxlY3RvclJlc3VsdHM7XG59XG52YXIgZ2V0RGV2TW9kZUNoZWNrc0V4ZWN1dGlvbkluZm8gPSAoZmlyc3RSdW4sIGRldk1vZGVDaGVja3MpID0+IHtcbiAgY29uc3QgeyBpZGVudGl0eUZ1bmN0aW9uQ2hlY2ssIGlucHV0U3RhYmlsaXR5Q2hlY2sgfSA9IHtcbiAgICAuLi5nbG9iYWxEZXZNb2RlQ2hlY2tzLFxuICAgIC4uLmRldk1vZGVDaGVja3NcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBpZGVudGl0eUZ1bmN0aW9uQ2hlY2s6IHtcbiAgICAgIHNob3VsZFJ1bjogaWRlbnRpdHlGdW5jdGlvbkNoZWNrID09PSBcImFsd2F5c1wiIHx8IGlkZW50aXR5RnVuY3Rpb25DaGVjayA9PT0gXCJvbmNlXCIgJiYgZmlyc3RSdW4sXG4gICAgICBydW46IHJ1bklkZW50aXR5RnVuY3Rpb25DaGVja1xuICAgIH0sXG4gICAgaW5wdXRTdGFiaWxpdHlDaGVjazoge1xuICAgICAgc2hvdWxkUnVuOiBpbnB1dFN0YWJpbGl0eUNoZWNrID09PSBcImFsd2F5c1wiIHx8IGlucHV0U3RhYmlsaXR5Q2hlY2sgPT09IFwib25jZVwiICYmIGZpcnN0UnVuLFxuICAgICAgcnVuOiBydW5JbnB1dFN0YWJpbGl0eUNoZWNrXG4gICAgfVxuICB9O1xufTtcblxuLy8gc3JjL2F1dG90cmFja01lbW9pemUvYXV0b3RyYWNraW5nLnRzXG52YXIgJFJFVklTSU9OID0gMDtcbnZhciBDVVJSRU5UX1RSQUNLRVIgPSBudWxsO1xudmFyIENlbGwgPSBjbGFzcyB7XG4gIHJldmlzaW9uID0gJFJFVklTSU9OO1xuICBfdmFsdWU7XG4gIF9sYXN0VmFsdWU7XG4gIF9pc0VxdWFsID0gdHJpcGxlRXE7XG4gIGNvbnN0cnVjdG9yKGluaXRpYWxWYWx1ZSwgaXNFcXVhbCA9IHRyaXBsZUVxKSB7XG4gICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9sYXN0VmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gICAgdGhpcy5faXNFcXVhbCA9IGlzRXF1YWw7XG4gIH1cbiAgLy8gV2hlbmV2ZXIgYSBzdG9yYWdlIHZhbHVlIGlzIHJlYWQsIGl0J2xsIGFkZCBpdHNlbGYgdG8gdGhlIGN1cnJlbnQgdHJhY2tlciBpZlxuICAvLyBvbmUgZXhpc3RzLCBlbnRhbmdsaW5nIGl0cyBzdGF0ZSB3aXRoIHRoYXQgY2FjaGUuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICBDVVJSRU5UX1RSQUNLRVI/LmFkZCh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cbiAgLy8gV2hlbmV2ZXIgYSBzdG9yYWdlIHZhbHVlIGlzIHVwZGF0ZWQsIHdlIGJ1bXAgdGhlIGdsb2JhbCByZXZpc2lvbiBjbG9jayxcbiAgLy8gYXNzaWduIHRoZSByZXZpc2lvbiBmb3IgdGhpcyBzdG9yYWdlIHRvIHRoZSBuZXcgdmFsdWUsIF9hbmRfIHdlIHNjaGVkdWxlIGFcbiAgLy8gcmVyZW5kZXIuIFRoaXMgaXMgaW1wb3J0YW50LCBhbmQgaXQncyB3aGF0IG1ha2VzIGF1dG90cmFja2luZyAgX3B1bGxfXG4gIC8vIGJhc2VkLiBXZSBkb24ndCBhY3RpdmVseSB0ZWxsIHRoZSBjYWNoZXMgd2hpY2ggZGVwZW5kIG9uIHRoZSBzdG9yYWdlIHRoYXRcbiAgLy8gYW55dGhpbmcgaGFzIGhhcHBlbmVkLiBJbnN0ZWFkLCB3ZSByZWNvbXB1dGUgdGhlIGNhY2hlcyB3aGVuIG5lZWRlZC5cbiAgc2V0IHZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IG5ld1ZhbHVlKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuX3ZhbHVlID0gbmV3VmFsdWU7XG4gICAgdGhpcy5yZXZpc2lvbiA9ICsrJFJFVklTSU9OO1xuICB9XG59O1xuZnVuY3Rpb24gdHJpcGxlRXEoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cbnZhciBUcmFja2luZ0NhY2hlID0gY2xhc3Mge1xuICBfY2FjaGVkVmFsdWU7XG4gIF9jYWNoZWRSZXZpc2lvbiA9IC0xO1xuICBfZGVwcyA9IFtdO1xuICBoaXRzID0gMDtcbiAgZm47XG4gIGNvbnN0cnVjdG9yKGZuKSB7XG4gICAgdGhpcy5mbiA9IGZuO1xuICB9XG4gIGNsZWFyKCkge1xuICAgIHRoaXMuX2NhY2hlZFZhbHVlID0gdm9pZCAwO1xuICAgIHRoaXMuX2NhY2hlZFJldmlzaW9uID0gLTE7XG4gICAgdGhpcy5fZGVwcyA9IFtdO1xuICAgIHRoaXMuaGl0cyA9IDA7XG4gIH1cbiAgZ2V0IHZhbHVlKCkge1xuICAgIGlmICh0aGlzLnJldmlzaW9uID4gdGhpcy5fY2FjaGVkUmV2aXNpb24pIHtcbiAgICAgIGNvbnN0IHsgZm4gfSA9IHRoaXM7XG4gICAgICBjb25zdCBjdXJyZW50VHJhY2tlciA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgICBjb25zdCBwcmV2VHJhY2tlciA9IENVUlJFTlRfVFJBQ0tFUjtcbiAgICAgIENVUlJFTlRfVFJBQ0tFUiA9IGN1cnJlbnRUcmFja2VyO1xuICAgICAgdGhpcy5fY2FjaGVkVmFsdWUgPSBmbigpO1xuICAgICAgQ1VSUkVOVF9UUkFDS0VSID0gcHJldlRyYWNrZXI7XG4gICAgICB0aGlzLmhpdHMrKztcbiAgICAgIHRoaXMuX2RlcHMgPSBBcnJheS5mcm9tKGN1cnJlbnRUcmFja2VyKTtcbiAgICAgIHRoaXMuX2NhY2hlZFJldmlzaW9uID0gdGhpcy5yZXZpc2lvbjtcbiAgICB9XG4gICAgQ1VSUkVOVF9UUkFDS0VSPy5hZGQodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMuX2NhY2hlZFZhbHVlO1xuICB9XG4gIGdldCByZXZpc2lvbigpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoLi4udGhpcy5fZGVwcy5tYXAoKGQpID0+IGQucmV2aXNpb24pLCAwKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGdldFZhbHVlKGNlbGwpIHtcbiAgaWYgKCEoY2VsbCBpbnN0YW5jZW9mIENlbGwpKSB7XG4gICAgY29uc29sZS53YXJuKFwiTm90IGEgdmFsaWQgY2VsbCEgXCIsIGNlbGwpO1xuICB9XG4gIHJldHVybiBjZWxsLnZhbHVlO1xufVxuZnVuY3Rpb24gc2V0VmFsdWUoc3RvcmFnZSwgdmFsdWUpIHtcbiAgaWYgKCEoc3RvcmFnZSBpbnN0YW5jZW9mIENlbGwpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIFwic2V0VmFsdWUgbXVzdCBiZSBwYXNzZWQgYSB0cmFja2VkIHN0b3JlIGNyZWF0ZWQgd2l0aCBgY3JlYXRlU3RvcmFnZWAuXCJcbiAgICApO1xuICB9XG4gIHN0b3JhZ2UudmFsdWUgPSBzdG9yYWdlLl9sYXN0VmFsdWUgPSB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNlbGwoaW5pdGlhbFZhbHVlLCBpc0VxdWFsID0gdHJpcGxlRXEpIHtcbiAgcmV0dXJuIG5ldyBDZWxsKGluaXRpYWxWYWx1ZSwgaXNFcXVhbCk7XG59XG5mdW5jdGlvbiBjcmVhdGVDYWNoZShmbikge1xuICBhc3NlcnRJc0Z1bmN0aW9uKFxuICAgIGZuLFxuICAgIFwidGhlIGZpcnN0IHBhcmFtZXRlciB0byBgY3JlYXRlQ2FjaGVgIG11c3QgYmUgYSBmdW5jdGlvblwiXG4gICk7XG4gIHJldHVybiBuZXcgVHJhY2tpbmdDYWNoZShmbik7XG59XG5cbi8vIHNyYy9hdXRvdHJhY2tNZW1vaXplL3RyYWNraW5nLnRzXG52YXIgbmV2ZXJFcSA9IChhLCBiKSA9PiBmYWxzZTtcbmZ1bmN0aW9uIGNyZWF0ZVRhZygpIHtcbiAgcmV0dXJuIGNyZWF0ZUNlbGwobnVsbCwgbmV2ZXJFcSk7XG59XG5mdW5jdGlvbiBkaXJ0eVRhZyh0YWcsIHZhbHVlKSB7XG4gIHNldFZhbHVlKHRhZywgdmFsdWUpO1xufVxudmFyIGNvbnN1bWVDb2xsZWN0aW9uID0gKG5vZGUpID0+IHtcbiAgbGV0IHRhZyA9IG5vZGUuY29sbGVjdGlvblRhZztcbiAgaWYgKHRhZyA9PT0gbnVsbCkge1xuICAgIHRhZyA9IG5vZGUuY29sbGVjdGlvblRhZyA9IGNyZWF0ZVRhZygpO1xuICB9XG4gIGdldFZhbHVlKHRhZyk7XG59O1xudmFyIGRpcnR5Q29sbGVjdGlvbiA9IChub2RlKSA9PiB7XG4gIGNvbnN0IHRhZyA9IG5vZGUuY29sbGVjdGlvblRhZztcbiAgaWYgKHRhZyAhPT0gbnVsbCkge1xuICAgIGRpcnR5VGFnKHRhZywgbnVsbCk7XG4gIH1cbn07XG5cbi8vIHNyYy9hdXRvdHJhY2tNZW1vaXplL3Byb3h5LnRzXG52YXIgUkVEVVhfUFJPWFlfTEFCRUwgPSBTeW1ib2woKTtcbnZhciBuZXh0SWQgPSAwO1xudmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHt9KTtcbnZhciBPYmplY3RUcmVlTm9kZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMudGFnLnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHJveHkgPSBuZXcgUHJveHkodGhpcywgb2JqZWN0UHJveHlIYW5kbGVyKTtcbiAgdGFnID0gY3JlYXRlVGFnKCk7XG4gIHRhZ3MgPSB7fTtcbiAgY2hpbGRyZW4gPSB7fTtcbiAgY29sbGVjdGlvblRhZyA9IG51bGw7XG4gIGlkID0gbmV4dElkKys7XG59O1xudmFyIG9iamVjdFByb3h5SGFuZGxlciA9IHtcbiAgZ2V0KG5vZGUsIGtleSkge1xuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVJlc3VsdCgpIHtcbiAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IG5vZGU7XG4gICAgICBjb25zdCBjaGlsZFZhbHVlID0gUmVmbGVjdC5nZXQodmFsdWUsIGtleSk7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJzeW1ib2xcIikge1xuICAgICAgICByZXR1cm4gY2hpbGRWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgaW4gcHJvdG8pIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkVmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGNoaWxkVmFsdWUgPT09IFwib2JqZWN0XCIgJiYgY2hpbGRWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBsZXQgY2hpbGROb2RlID0gbm9kZS5jaGlsZHJlbltrZXldO1xuICAgICAgICBpZiAoY2hpbGROb2RlID09PSB2b2lkIDApIHtcbiAgICAgICAgICBjaGlsZE5vZGUgPSBub2RlLmNoaWxkcmVuW2tleV0gPSBjcmVhdGVOb2RlKGNoaWxkVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZE5vZGUudGFnKSB7XG4gICAgICAgICAgZ2V0VmFsdWUoY2hpbGROb2RlLnRhZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoaWxkTm9kZS5wcm94eTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCB0YWcgPSBub2RlLnRhZ3Nba2V5XTtcbiAgICAgICAgaWYgKHRhZyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgdGFnID0gbm9kZS50YWdzW2tleV0gPSBjcmVhdGVUYWcoKTtcbiAgICAgICAgICB0YWcudmFsdWUgPSBjaGlsZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGdldFZhbHVlKHRhZyk7XG4gICAgICAgIHJldHVybiBjaGlsZFZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXMgPSBjYWxjdWxhdGVSZXN1bHQoKTtcbiAgICByZXR1cm4gcmVzO1xuICB9LFxuICBvd25LZXlzKG5vZGUpIHtcbiAgICBjb25zdW1lQ29sbGVjdGlvbihub2RlKTtcbiAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKG5vZGUudmFsdWUpO1xuICB9LFxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iobm9kZSwgcHJvcCkge1xuICAgIHJldHVybiBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihub2RlLnZhbHVlLCBwcm9wKTtcbiAgfSxcbiAgaGFzKG5vZGUsIHByb3ApIHtcbiAgICByZXR1cm4gUmVmbGVjdC5oYXMobm9kZS52YWx1ZSwgcHJvcCk7XG4gIH1cbn07XG52YXIgQXJyYXlUcmVlTm9kZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMudGFnLnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgcHJveHkgPSBuZXcgUHJveHkoW3RoaXNdLCBhcnJheVByb3h5SGFuZGxlcik7XG4gIHRhZyA9IGNyZWF0ZVRhZygpO1xuICB0YWdzID0ge307XG4gIGNoaWxkcmVuID0ge307XG4gIGNvbGxlY3Rpb25UYWcgPSBudWxsO1xuICBpZCA9IG5leHRJZCsrO1xufTtcbnZhciBhcnJheVByb3h5SGFuZGxlciA9IHtcbiAgZ2V0KFtub2RlXSwga2V5KSB7XG4gICAgaWYgKGtleSA9PT0gXCJsZW5ndGhcIikge1xuICAgICAgY29uc3VtZUNvbGxlY3Rpb24obm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RQcm94eUhhbmRsZXIuZ2V0KG5vZGUsIGtleSk7XG4gIH0sXG4gIG93bktleXMoW25vZGVdKSB7XG4gICAgcmV0dXJuIG9iamVjdFByb3h5SGFuZGxlci5vd25LZXlzKG5vZGUpO1xuICB9LFxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoW25vZGVdLCBwcm9wKSB7XG4gICAgcmV0dXJuIG9iamVjdFByb3h5SGFuZGxlci5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iobm9kZSwgcHJvcCk7XG4gIH0sXG4gIGhhcyhbbm9kZV0sIHByb3ApIHtcbiAgICByZXR1cm4gb2JqZWN0UHJveHlIYW5kbGVyLmhhcyhub2RlLCBwcm9wKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZU5vZGUodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheVRyZWVOb2RlKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gbmV3IE9iamVjdFRyZWVOb2RlKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU5vZGUobm9kZSwgbmV3VmFsdWUpIHtcbiAgY29uc3QgeyB2YWx1ZSwgdGFncywgY2hpbGRyZW4gfSA9IG5vZGU7XG4gIG5vZGUudmFsdWUgPSBuZXdWYWx1ZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIEFycmF5LmlzQXJyYXkobmV3VmFsdWUpICYmIHZhbHVlLmxlbmd0aCAhPT0gbmV3VmFsdWUubGVuZ3RoKSB7XG4gICAgZGlydHlDb2xsZWN0aW9uKG5vZGUpO1xuICB9IGVsc2Uge1xuICAgIGlmICh2YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgIGxldCBvbGRLZXlzU2l6ZSA9IDA7XG4gICAgICBsZXQgbmV3S2V5c1NpemUgPSAwO1xuICAgICAgbGV0IGFueUtleXNBZGRlZCA9IGZhbHNlO1xuICAgICAgZm9yIChjb25zdCBfa2V5IGluIHZhbHVlKSB7XG4gICAgICAgIG9sZEtleXNTaXplKys7XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBuZXdWYWx1ZSkge1xuICAgICAgICBuZXdLZXlzU2l6ZSsrO1xuICAgICAgICBpZiAoIShrZXkgaW4gdmFsdWUpKSB7XG4gICAgICAgICAgYW55S2V5c0FkZGVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgaXNEaWZmZXJlbnQgPSBhbnlLZXlzQWRkZWQgfHwgb2xkS2V5c1NpemUgIT09IG5ld0tleXNTaXplO1xuICAgICAgaWYgKGlzRGlmZmVyZW50KSB7XG4gICAgICAgIGRpcnR5Q29sbGVjdGlvbihub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gdGFncykge1xuICAgIGNvbnN0IGNoaWxkVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgIGNvbnN0IG5ld0NoaWxkVmFsdWUgPSBuZXdWYWx1ZVtrZXldO1xuICAgIGlmIChjaGlsZFZhbHVlICE9PSBuZXdDaGlsZFZhbHVlKSB7XG4gICAgICBkaXJ0eUNvbGxlY3Rpb24obm9kZSk7XG4gICAgICBkaXJ0eVRhZyh0YWdzW2tleV0sIG5ld0NoaWxkVmFsdWUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkVmFsdWUgPT09IFwib2JqZWN0XCIgJiYgbmV3Q2hpbGRWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgZGVsZXRlIHRhZ3Nba2V5XTtcbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gY2hpbGRyZW4pIHtcbiAgICBjb25zdCBjaGlsZE5vZGUgPSBjaGlsZHJlbltrZXldO1xuICAgIGNvbnN0IG5ld0NoaWxkVmFsdWUgPSBuZXdWYWx1ZVtrZXldO1xuICAgIGNvbnN0IGNoaWxkVmFsdWUgPSBjaGlsZE5vZGUudmFsdWU7XG4gICAgaWYgKGNoaWxkVmFsdWUgPT09IG5ld0NoaWxkVmFsdWUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG5ld0NoaWxkVmFsdWUgPT09IFwib2JqZWN0XCIgJiYgbmV3Q2hpbGRWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgdXBkYXRlTm9kZShjaGlsZE5vZGUsIG5ld0NoaWxkVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVOb2RlKGNoaWxkTm9kZSk7XG4gICAgICBkZWxldGUgY2hpbGRyZW5ba2V5XTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGRlbGV0ZU5vZGUobm9kZSkge1xuICBpZiAobm9kZS50YWcpIHtcbiAgICBkaXJ0eVRhZyhub2RlLnRhZywgbnVsbCk7XG4gIH1cbiAgZGlydHlDb2xsZWN0aW9uKG5vZGUpO1xuICBmb3IgKGNvbnN0IGtleSBpbiBub2RlLnRhZ3MpIHtcbiAgICBkaXJ0eVRhZyhub2RlLnRhZ3Nba2V5XSwgbnVsbCk7XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gbm9kZS5jaGlsZHJlbikge1xuICAgIGRlbGV0ZU5vZGUobm9kZS5jaGlsZHJlbltrZXldKTtcbiAgfVxufVxuXG4vLyBzcmMvbHJ1TWVtb2l6ZS50c1xuZnVuY3Rpb24gY3JlYXRlU2luZ2xldG9uQ2FjaGUoZXF1YWxzKSB7XG4gIGxldCBlbnRyeTtcbiAgcmV0dXJuIHtcbiAgICBnZXQoa2V5KSB7XG4gICAgICBpZiAoZW50cnkgJiYgZXF1YWxzKGVudHJ5LmtleSwga2V5KSkge1xuICAgICAgICByZXR1cm4gZW50cnkudmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gTk9UX0ZPVU5EO1xuICAgIH0sXG4gICAgcHV0KGtleSwgdmFsdWUpIHtcbiAgICAgIGVudHJ5ID0geyBrZXksIHZhbHVlIH07XG4gICAgfSxcbiAgICBnZXRFbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIGVudHJ5ID8gW2VudHJ5XSA6IFtdO1xuICAgIH0sXG4gICAgY2xlYXIoKSB7XG4gICAgICBlbnRyeSA9IHZvaWQgMDtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVMcnVDYWNoZShtYXhTaXplLCBlcXVhbHMpIHtcbiAgbGV0IGVudHJpZXMgPSBbXTtcbiAgZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGNvbnN0IGNhY2hlSW5kZXggPSBlbnRyaWVzLmZpbmRJbmRleCgoZW50cnkpID0+IGVxdWFscyhrZXksIGVudHJ5LmtleSkpO1xuICAgIGlmIChjYWNoZUluZGV4ID4gLTEpIHtcbiAgICAgIGNvbnN0IGVudHJ5ID0gZW50cmllc1tjYWNoZUluZGV4XTtcbiAgICAgIGlmIChjYWNoZUluZGV4ID4gMCkge1xuICAgICAgICBlbnRyaWVzLnNwbGljZShjYWNoZUluZGV4LCAxKTtcbiAgICAgICAgZW50cmllcy51bnNoaWZ0KGVudHJ5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbnRyeS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIE5PVF9GT1VORDtcbiAgfVxuICBmdW5jdGlvbiBwdXQoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChnZXQoa2V5KSA9PT0gTk9UX0ZPVU5EKSB7XG4gICAgICBlbnRyaWVzLnVuc2hpZnQoeyBrZXksIHZhbHVlIH0pO1xuICAgICAgaWYgKGVudHJpZXMubGVuZ3RoID4gbWF4U2l6ZSkge1xuICAgICAgICBlbnRyaWVzLnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXRFbnRyaWVzKCkge1xuICAgIHJldHVybiBlbnRyaWVzO1xuICB9XG4gIGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIGVudHJpZXMgPSBbXTtcbiAgfVxuICByZXR1cm4geyBnZXQsIHB1dCwgZ2V0RW50cmllcywgY2xlYXIgfTtcbn1cbnZhciByZWZlcmVuY2VFcXVhbGl0eUNoZWNrID0gKGEsIGIpID0+IGEgPT09IGI7XG5mdW5jdGlvbiBjcmVhdGVDYWNoZUtleUNvbXBhcmF0b3IoZXF1YWxpdHlDaGVjaykge1xuICByZXR1cm4gZnVuY3Rpb24gYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwocHJldiwgbmV4dCkge1xuICAgIGlmIChwcmV2ID09PSBudWxsIHx8IG5leHQgPT09IG51bGwgfHwgcHJldi5sZW5ndGggIT09IG5leHQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBwcmV2O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZXF1YWxpdHlDaGVjayhwcmV2W2ldLCBuZXh0W2ldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xufVxuZnVuY3Rpb24gbHJ1TWVtb2l6ZShmdW5jLCBlcXVhbGl0eUNoZWNrT3JPcHRpb25zKSB7XG4gIGNvbnN0IHByb3ZpZGVkT3B0aW9ucyA9IHR5cGVvZiBlcXVhbGl0eUNoZWNrT3JPcHRpb25zID09PSBcIm9iamVjdFwiID8gZXF1YWxpdHlDaGVja09yT3B0aW9ucyA6IHsgZXF1YWxpdHlDaGVjazogZXF1YWxpdHlDaGVja09yT3B0aW9ucyB9O1xuICBjb25zdCB7XG4gICAgZXF1YWxpdHlDaGVjayA9IHJlZmVyZW5jZUVxdWFsaXR5Q2hlY2ssXG4gICAgbWF4U2l6ZSA9IDEsXG4gICAgcmVzdWx0RXF1YWxpdHlDaGVja1xuICB9ID0gcHJvdmlkZWRPcHRpb25zO1xuICBjb25zdCBjb21wYXJhdG9yID0gY3JlYXRlQ2FjaGVLZXlDb21wYXJhdG9yKGVxdWFsaXR5Q2hlY2spO1xuICBsZXQgcmVzdWx0c0NvdW50ID0gMDtcbiAgY29uc3QgY2FjaGUgPSBtYXhTaXplIDw9IDEgPyBjcmVhdGVTaW5nbGV0b25DYWNoZShjb21wYXJhdG9yKSA6IGNyZWF0ZUxydUNhY2hlKG1heFNpemUsIGNvbXBhcmF0b3IpO1xuICBmdW5jdGlvbiBtZW1vaXplZCgpIHtcbiAgICBsZXQgdmFsdWUgPSBjYWNoZS5nZXQoYXJndW1lbnRzKTtcbiAgICBpZiAodmFsdWUgPT09IE5PVF9GT1VORCkge1xuICAgICAgdmFsdWUgPSBmdW5jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICByZXN1bHRzQ291bnQrKztcbiAgICAgIGlmIChyZXN1bHRFcXVhbGl0eUNoZWNrKSB7XG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSBjYWNoZS5nZXRFbnRyaWVzKCk7XG4gICAgICAgIGNvbnN0IG1hdGNoaW5nRW50cnkgPSBlbnRyaWVzLmZpbmQoXG4gICAgICAgICAgKGVudHJ5KSA9PiByZXN1bHRFcXVhbGl0eUNoZWNrKGVudHJ5LnZhbHVlLCB2YWx1ZSlcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKG1hdGNoaW5nRW50cnkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG1hdGNoaW5nRW50cnkudmFsdWU7XG4gICAgICAgICAgcmVzdWx0c0NvdW50ICE9PSAwICYmIHJlc3VsdHNDb3VudC0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjYWNoZS5wdXQoYXJndW1lbnRzLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBtZW1vaXplZC5jbGVhckNhY2hlID0gKCkgPT4ge1xuICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgbWVtb2l6ZWQucmVzZXRSZXN1bHRzQ291bnQoKTtcbiAgfTtcbiAgbWVtb2l6ZWQucmVzdWx0c0NvdW50ID0gKCkgPT4gcmVzdWx0c0NvdW50O1xuICBtZW1vaXplZC5yZXNldFJlc3VsdHNDb3VudCA9ICgpID0+IHtcbiAgICByZXN1bHRzQ291bnQgPSAwO1xuICB9O1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIHNyYy9hdXRvdHJhY2tNZW1vaXplL2F1dG90cmFja01lbW9pemUudHNcbmZ1bmN0aW9uIGF1dG90cmFja01lbW9pemUoZnVuYykge1xuICBjb25zdCBub2RlID0gY3JlYXRlTm9kZShcbiAgICBbXVxuICApO1xuICBsZXQgbGFzdEFyZ3MgPSBudWxsO1xuICBjb25zdCBzaGFsbG93RXF1YWwgPSBjcmVhdGVDYWNoZUtleUNvbXBhcmF0b3IocmVmZXJlbmNlRXF1YWxpdHlDaGVjayk7XG4gIGNvbnN0IGNhY2hlID0gY3JlYXRlQ2FjaGUoKCkgPT4ge1xuICAgIGNvbnN0IHJlcyA9IGZ1bmMuYXBwbHkobnVsbCwgbm9kZS5wcm94eSk7XG4gICAgcmV0dXJuIHJlcztcbiAgfSk7XG4gIGZ1bmN0aW9uIG1lbW9pemVkKCkge1xuICAgIGlmICghc2hhbGxvd0VxdWFsKGxhc3RBcmdzLCBhcmd1bWVudHMpKSB7XG4gICAgICB1cGRhdGVOb2RlKG5vZGUsIGFyZ3VtZW50cyk7XG4gICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlLnZhbHVlO1xuICB9XG4gIG1lbW9pemVkLmNsZWFyQ2FjaGUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGNhY2hlLmNsZWFyKCk7XG4gIH07XG4gIHJldHVybiBtZW1vaXplZDtcbn1cblxuLy8gc3JjL3dlYWtNYXBNZW1vaXplLnRzXG52YXIgU3Ryb25nUmVmID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBkZXJlZigpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxufTtcbnZhciBSZWYgPSB0eXBlb2YgV2Vha1JlZiAhPT0gXCJ1bmRlZmluZWRcIiA/IFdlYWtSZWYgOiBTdHJvbmdSZWY7XG52YXIgVU5URVJNSU5BVEVEID0gMDtcbnZhciBURVJNSU5BVEVEID0gMTtcbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlTm9kZSgpIHtcbiAgcmV0dXJuIHtcbiAgICBzOiBVTlRFUk1JTkFURUQsXG4gICAgdjogdm9pZCAwLFxuICAgIG86IG51bGwsXG4gICAgcDogbnVsbFxuICB9O1xufVxuZnVuY3Rpb24gd2Vha01hcE1lbW9pemUoZnVuYywgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCBmbk5vZGUgPSBjcmVhdGVDYWNoZU5vZGUoKTtcbiAgY29uc3QgeyByZXN1bHRFcXVhbGl0eUNoZWNrIH0gPSBvcHRpb25zO1xuICBsZXQgbGFzdFJlc3VsdDtcbiAgbGV0IHJlc3VsdHNDb3VudCA9IDA7XG4gIGZ1bmN0aW9uIG1lbW9pemVkKCkge1xuICAgIGxldCBjYWNoZU5vZGUgPSBmbk5vZGU7XG4gICAgY29uc3QgeyBsZW5ndGggfSA9IGFyZ3VtZW50cztcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgY29uc3QgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKHR5cGVvZiBhcmcgPT09IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgYXJnID09PSBcIm9iamVjdFwiICYmIGFyZyAhPT0gbnVsbCkge1xuICAgICAgICBsZXQgb2JqZWN0Q2FjaGUgPSBjYWNoZU5vZGUubztcbiAgICAgICAgaWYgKG9iamVjdENhY2hlID09PSBudWxsKSB7XG4gICAgICAgICAgY2FjaGVOb2RlLm8gPSBvYmplY3RDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9iamVjdE5vZGUgPSBvYmplY3RDYWNoZS5nZXQoYXJnKTtcbiAgICAgICAgaWYgKG9iamVjdE5vZGUgPT09IHZvaWQgMCkge1xuICAgICAgICAgIGNhY2hlTm9kZSA9IGNyZWF0ZUNhY2hlTm9kZSgpO1xuICAgICAgICAgIG9iamVjdENhY2hlLnNldChhcmcsIGNhY2hlTm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FjaGVOb2RlID0gb2JqZWN0Tm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHByaW1pdGl2ZUNhY2hlID0gY2FjaGVOb2RlLnA7XG4gICAgICAgIGlmIChwcmltaXRpdmVDYWNoZSA9PT0gbnVsbCkge1xuICAgICAgICAgIGNhY2hlTm9kZS5wID0gcHJpbWl0aXZlQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByaW1pdGl2ZU5vZGUgPSBwcmltaXRpdmVDYWNoZS5nZXQoYXJnKTtcbiAgICAgICAgaWYgKHByaW1pdGl2ZU5vZGUgPT09IHZvaWQgMCkge1xuICAgICAgICAgIGNhY2hlTm9kZSA9IGNyZWF0ZUNhY2hlTm9kZSgpO1xuICAgICAgICAgIHByaW1pdGl2ZUNhY2hlLnNldChhcmcsIGNhY2hlTm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FjaGVOb2RlID0gcHJpbWl0aXZlTm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB0ZXJtaW5hdGVkTm9kZSA9IGNhY2hlTm9kZTtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmIChjYWNoZU5vZGUucyA9PT0gVEVSTUlOQVRFRCkge1xuICAgICAgcmVzdWx0ID0gY2FjaGVOb2RlLnY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIHJlc3VsdHNDb3VudCsrO1xuICAgICAgaWYgKHJlc3VsdEVxdWFsaXR5Q2hlY2spIHtcbiAgICAgICAgY29uc3QgbGFzdFJlc3VsdFZhbHVlID0gbGFzdFJlc3VsdD8uZGVyZWY/LigpID8/IGxhc3RSZXN1bHQ7XG4gICAgICAgIGlmIChsYXN0UmVzdWx0VmFsdWUgIT0gbnVsbCAmJiByZXN1bHRFcXVhbGl0eUNoZWNrKGxhc3RSZXN1bHRWYWx1ZSwgcmVzdWx0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IGxhc3RSZXN1bHRWYWx1ZTtcbiAgICAgICAgICByZXN1bHRzQ291bnQgIT09IDAgJiYgcmVzdWx0c0NvdW50LS07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmVlZHNXZWFrUmVmID0gdHlwZW9mIHJlc3VsdCA9PT0gXCJvYmplY3RcIiAmJiByZXN1bHQgIT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICBsYXN0UmVzdWx0ID0gbmVlZHNXZWFrUmVmID8gbmV3IFJlZihyZXN1bHQpIDogcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICB0ZXJtaW5hdGVkTm9kZS5zID0gVEVSTUlOQVRFRDtcbiAgICB0ZXJtaW5hdGVkTm9kZS52ID0gcmVzdWx0O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbWVtb2l6ZWQuY2xlYXJDYWNoZSA9ICgpID0+IHtcbiAgICBmbk5vZGUgPSBjcmVhdGVDYWNoZU5vZGUoKTtcbiAgICBtZW1vaXplZC5yZXNldFJlc3VsdHNDb3VudCgpO1xuICB9O1xuICBtZW1vaXplZC5yZXN1bHRzQ291bnQgPSAoKSA9PiByZXN1bHRzQ291bnQ7XG4gIG1lbW9pemVkLnJlc2V0UmVzdWx0c0NvdW50ID0gKCkgPT4ge1xuICAgIHJlc3VsdHNDb3VudCA9IDA7XG4gIH07XG4gIHJldHVybiBtZW1vaXplZDtcbn1cblxuLy8gc3JjL2NyZWF0ZVNlbGVjdG9yQ3JlYXRvci50c1xuZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKG1lbW9pemVPck9wdGlvbnMsIC4uLm1lbW9pemVPcHRpb25zRnJvbUFyZ3MpIHtcbiAgY29uc3QgY3JlYXRlU2VsZWN0b3JDcmVhdG9yT3B0aW9ucyA9IHR5cGVvZiBtZW1vaXplT3JPcHRpb25zID09PSBcImZ1bmN0aW9uXCIgPyB7XG4gICAgbWVtb2l6ZTogbWVtb2l6ZU9yT3B0aW9ucyxcbiAgICBtZW1vaXplT3B0aW9uczogbWVtb2l6ZU9wdGlvbnNGcm9tQXJnc1xuICB9IDogbWVtb2l6ZU9yT3B0aW9ucztcbiAgY29uc3QgY3JlYXRlU2VsZWN0b3IyID0gKC4uLmNyZWF0ZVNlbGVjdG9yQXJncykgPT4ge1xuICAgIGxldCByZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgbGV0IGRlcGVuZGVuY3lSZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgbGV0IGxhc3RSZXN1bHQ7XG4gICAgbGV0IGRpcmVjdGx5UGFzc2VkT3B0aW9ucyA9IHt9O1xuICAgIGxldCByZXN1bHRGdW5jID0gY3JlYXRlU2VsZWN0b3JBcmdzLnBvcCgpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0RnVuYyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgZGlyZWN0bHlQYXNzZWRPcHRpb25zID0gcmVzdWx0RnVuYztcbiAgICAgIHJlc3VsdEZ1bmMgPSBjcmVhdGVTZWxlY3RvckFyZ3MucG9wKCk7XG4gICAgfVxuICAgIGFzc2VydElzRnVuY3Rpb24oXG4gICAgICByZXN1bHRGdW5jLFxuICAgICAgYGNyZWF0ZVNlbGVjdG9yIGV4cGVjdHMgYW4gb3V0cHV0IGZ1bmN0aW9uIGFmdGVyIHRoZSBpbnB1dHMsIGJ1dCByZWNlaXZlZDogWyR7dHlwZW9mIHJlc3VsdEZ1bmN9XWBcbiAgICApO1xuICAgIGNvbnN0IGNvbWJpbmVkT3B0aW9ucyA9IHtcbiAgICAgIC4uLmNyZWF0ZVNlbGVjdG9yQ3JlYXRvck9wdGlvbnMsXG4gICAgICAuLi5kaXJlY3RseVBhc3NlZE9wdGlvbnNcbiAgICB9O1xuICAgIGNvbnN0IHtcbiAgICAgIG1lbW9pemUsXG4gICAgICBtZW1vaXplT3B0aW9ucyA9IFtdLFxuICAgICAgYXJnc01lbW9pemUgPSB3ZWFrTWFwTWVtb2l6ZSxcbiAgICAgIGFyZ3NNZW1vaXplT3B0aW9ucyA9IFtdLFxuICAgICAgZGV2TW9kZUNoZWNrcyA9IHt9XG4gICAgfSA9IGNvbWJpbmVkT3B0aW9ucztcbiAgICBjb25zdCBmaW5hbE1lbW9pemVPcHRpb25zID0gZW5zdXJlSXNBcnJheShtZW1vaXplT3B0aW9ucyk7XG4gICAgY29uc3QgZmluYWxBcmdzTWVtb2l6ZU9wdGlvbnMgPSBlbnN1cmVJc0FycmF5KGFyZ3NNZW1vaXplT3B0aW9ucyk7XG4gICAgY29uc3QgZGVwZW5kZW5jaWVzID0gZ2V0RGVwZW5kZW5jaWVzKGNyZWF0ZVNlbGVjdG9yQXJncyk7XG4gICAgY29uc3QgbWVtb2l6ZWRSZXN1bHRGdW5jID0gbWVtb2l6ZShmdW5jdGlvbiByZWNvbXB1dGF0aW9uV3JhcHBlcigpIHtcbiAgICAgIHJlY29tcHV0YXRpb25zKys7XG4gICAgICByZXR1cm4gcmVzdWx0RnVuYy5hcHBseShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgYXJndW1lbnRzXG4gICAgICApO1xuICAgIH0sIC4uLmZpbmFsTWVtb2l6ZU9wdGlvbnMpO1xuICAgIGxldCBmaXJzdFJ1biA9IHRydWU7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBhcmdzTWVtb2l6ZShmdW5jdGlvbiBkZXBlbmRlbmNpZXNDaGVja2VyKCkge1xuICAgICAgZGVwZW5kZW5jeVJlY29tcHV0YXRpb25zKys7XG4gICAgICBjb25zdCBpbnB1dFNlbGVjdG9yUmVzdWx0cyA9IGNvbGxlY3RJbnB1dFNlbGVjdG9yUmVzdWx0cyhcbiAgICAgICAgZGVwZW5kZW5jaWVzLFxuICAgICAgICBhcmd1bWVudHNcbiAgICAgICk7XG4gICAgICBsYXN0UmVzdWx0ID0gbWVtb2l6ZWRSZXN1bHRGdW5jLmFwcGx5KG51bGwsIGlucHV0U2VsZWN0b3JSZXN1bHRzKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgY29uc3QgeyBpZGVudGl0eUZ1bmN0aW9uQ2hlY2ssIGlucHV0U3RhYmlsaXR5Q2hlY2sgfSA9IGdldERldk1vZGVDaGVja3NFeGVjdXRpb25JbmZvKGZpcnN0UnVuLCBkZXZNb2RlQ2hlY2tzKTtcbiAgICAgICAgaWYgKGlkZW50aXR5RnVuY3Rpb25DaGVjay5zaG91bGRSdW4pIHtcbiAgICAgICAgICBpZGVudGl0eUZ1bmN0aW9uQ2hlY2sucnVuKFxuICAgICAgICAgICAgcmVzdWx0RnVuYyxcbiAgICAgICAgICAgIGlucHV0U2VsZWN0b3JSZXN1bHRzLFxuICAgICAgICAgICAgbGFzdFJlc3VsdFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0U3RhYmlsaXR5Q2hlY2suc2hvdWxkUnVuKSB7XG4gICAgICAgICAgY29uc3QgaW5wdXRTZWxlY3RvclJlc3VsdHNDb3B5ID0gY29sbGVjdElucHV0U2VsZWN0b3JSZXN1bHRzKFxuICAgICAgICAgICAgZGVwZW5kZW5jaWVzLFxuICAgICAgICAgICAgYXJndW1lbnRzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpbnB1dFN0YWJpbGl0eUNoZWNrLnJ1bihcbiAgICAgICAgICAgIHsgaW5wdXRTZWxlY3RvclJlc3VsdHMsIGlucHV0U2VsZWN0b3JSZXN1bHRzQ29weSB9LFxuICAgICAgICAgICAgeyBtZW1vaXplLCBtZW1vaXplT3B0aW9uczogZmluYWxNZW1vaXplT3B0aW9ucyB9LFxuICAgICAgICAgICAgYXJndW1lbnRzXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlyc3RSdW4pXG4gICAgICAgICAgZmlyc3RSdW4gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgIH0sIC4uLmZpbmFsQXJnc01lbW9pemVPcHRpb25zKTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihzZWxlY3Rvciwge1xuICAgICAgcmVzdWx0RnVuYyxcbiAgICAgIG1lbW9pemVkUmVzdWx0RnVuYyxcbiAgICAgIGRlcGVuZGVuY2llcyxcbiAgICAgIGRlcGVuZGVuY3lSZWNvbXB1dGF0aW9uczogKCkgPT4gZGVwZW5kZW5jeVJlY29tcHV0YXRpb25zLFxuICAgICAgcmVzZXREZXBlbmRlbmN5UmVjb21wdXRhdGlvbnM6ICgpID0+IHtcbiAgICAgICAgZGVwZW5kZW5jeVJlY29tcHV0YXRpb25zID0gMDtcbiAgICAgIH0sXG4gICAgICBsYXN0UmVzdWx0OiAoKSA9PiBsYXN0UmVzdWx0LFxuICAgICAgcmVjb21wdXRhdGlvbnM6ICgpID0+IHJlY29tcHV0YXRpb25zLFxuICAgICAgcmVzZXRSZWNvbXB1dGF0aW9uczogKCkgPT4ge1xuICAgICAgICByZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgICB9LFxuICAgICAgbWVtb2l6ZSxcbiAgICAgIGFyZ3NNZW1vaXplXG4gICAgfSk7XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oY3JlYXRlU2VsZWN0b3IyLCB7XG4gICAgd2l0aFR5cGVzOiAoKSA9PiBjcmVhdGVTZWxlY3RvcjJcbiAgfSk7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcjI7XG59XG52YXIgY3JlYXRlU2VsZWN0b3IgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKHdlYWtNYXBNZW1vaXplKTtcblxuLy8gc3JjL2NyZWF0ZVN0cnVjdHVyZWRTZWxlY3Rvci50c1xudmFyIGNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciA9IE9iamVjdC5hc3NpZ24oXG4gIChpbnB1dFNlbGVjdG9yc09iamVjdCwgc2VsZWN0b3JDcmVhdG9yID0gY3JlYXRlU2VsZWN0b3IpID0+IHtcbiAgICBhc3NlcnRJc09iamVjdChcbiAgICAgIGlucHV0U2VsZWN0b3JzT2JqZWN0LFxuICAgICAgYGNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciBleHBlY3RzIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aGVyZSBlYWNoIHByb3BlcnR5IGlzIGEgc2VsZWN0b3IsIGluc3RlYWQgcmVjZWl2ZWQgYSAke3R5cGVvZiBpbnB1dFNlbGVjdG9yc09iamVjdH1gXG4gICAgKTtcbiAgICBjb25zdCBpbnB1dFNlbGVjdG9yS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U2VsZWN0b3JzT2JqZWN0KTtcbiAgICBjb25zdCBkZXBlbmRlbmNpZXMgPSBpbnB1dFNlbGVjdG9yS2V5cy5tYXAoXG4gICAgICAoa2V5KSA9PiBpbnB1dFNlbGVjdG9yc09iamVjdFtrZXldXG4gICAgKTtcbiAgICBjb25zdCBzdHJ1Y3R1cmVkU2VsZWN0b3IgPSBzZWxlY3RvckNyZWF0b3IoXG4gICAgICBkZXBlbmRlbmNpZXMsXG4gICAgICAoLi4uaW5wdXRTZWxlY3RvclJlc3VsdHMpID0+IHtcbiAgICAgICAgcmV0dXJuIGlucHV0U2VsZWN0b3JSZXN1bHRzLnJlZHVjZSgoY29tcG9zaXRpb24sIHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbXBvc2l0aW9uW2lucHV0U2VsZWN0b3JLZXlzW2luZGV4XV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gY29tcG9zaXRpb247XG4gICAgICAgIH0sIHt9KTtcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiBzdHJ1Y3R1cmVkU2VsZWN0b3I7XG4gIH0sXG4gIHsgd2l0aFR5cGVzOiAoKSA9PiBjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgfVxuKTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVTZWxlY3RvcixcbiAgY3JlYXRlU2VsZWN0b3JDcmVhdG9yLFxuICBjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IsXG4gIGxydU1lbW9pemUsXG4gIHJlZmVyZW5jZUVxdWFsaXR5Q2hlY2ssXG4gIHNldEdsb2JhbERldk1vZGVDaGVja3MsXG4gIHVuc3RhYmxlX2F1dG90cmFja01lbW9pemUsXG4gIHdlYWtNYXBNZW1vaXplXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc2VsZWN0LmNqcy5tYXAiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHtcblx0XHRcdHZhciBpID0gc2NyaXB0cy5sZW5ndGggLSAxO1xuXHRcdFx0d2hpbGUgKGkgPiAtMSAmJiAoIXNjcmlwdFVybCB8fCAhL15odHRwKHM/KTovLnRlc3Qoc2NyaXB0VXJsKSkpIHNjcmlwdFVybCA9IHNjcmlwdHNbaS0tXS5zcmM7XG5cdFx0fVxuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ3OTI6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOTAwKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwiaWQiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRlc3QiLCJzbGljZSIsImhhc2giLCJuZWVkUXVvdGVzIiwicmVwbGFjZSIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJlIiwibmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiYmUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiVGUiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIkJlIiwidCIsInIiLCJnZXQiLCJlbnVtZXJhYmxlIiwiQWUiLCJJbW1lciIsIkoiLCJhcHBseVBhdGNoZXMiLCJDZSIsImNhc3REcmFmdCIsImtlIiwiY2FzdEltbXV0YWJsZSIsIktlIiwiY3JlYXRlRHJhZnQiLCJSZSIsImN1cnJlbnQiLCJyZSIsImVuYWJsZU1hcFNldCIsInhlIiwiZW5hYmxlUGF0Y2hlcyIsIlBlIiwiZmluaXNoRHJhZnQiLCJ2ZSIsImZyZWV6ZSIsIksiLCJpbW1lcmFibGUiLCJOIiwiaXNEcmFmdCIsIk8iLCJpc0RyYWZ0YWJsZSIsIkEiLCJub3RoaW5nIiwiaiIsIm9yaWdpbmFsIiwibGUiLCJwcm9kdWNlIiwiRmUiLCJwcm9kdWNlV2l0aFBhdGNoZXMiLCJOZSIsInNldEF1dG9GcmVlemUiLCJ6ZSIsInNldFVzZVN0cmljdFNoYWxsb3dDb3B5IiwiamUiLCJuIiwiY2FsbCIsIkllIiwidmFsdWUiLCJTeW1ib2wiLCJmb3IiLCJ1IiwiaCIsIkVycm9yIiwieiIsImdldFByb3RvdHlwZU9mIiwieWUiLCJBcnJheSIsImlzQXJyYXkiLCJjb25zdHJ1Y3RvciIsInYiLCJPZSIsIkZ1bmN0aW9uIiwiXyIsIkMiLCJSZWZsZWN0Iiwib3duS2V5cyIsImZvckVhY2giLCJvIiwiUiIsImhhcyIsIlgiLCJRIiwic2V0IiwiYWRkIiwiTWFwIiwiU2V0IiwiVCIsIkwiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZiIsImwiLCJjIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJjcmVhdGUiLCJhc3NpZ24iLCIkIiwiY2xlYXIiLCJkZWxldGUiLCJNZSIsImVudHJpZXMiLCJpc0Zyb3plbiIsIlUiLCJhZSIsInciLCJZIiwiQiIsIm9lIiwiYiIsIlYiLCJaIiwiYSIsIndlIiwiaWUiLCJwIiwiUCIsImQiLCJfZSIsIngiLCJtIiwic2UiLCJzIiwiZWUiLCJ0ZSIsImRlIiwiZyIsInkiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInVlIiwibWUiLCJFZSIsImNlIiwiZmUiLCJXIiwicGUiLCJFIiwiTnVtYmVyIiwiaXNOYU4iLCJkZWxldGVQcm9wZXJ0eSIsInNldFByb3RvdHlwZU9mIiwicSIsIlMiLCJhcmd1bWVudHMiLCJhcHBseSIsImF1dG9GcmVlemUiLCJ1c2VTdHJpY3RTaGFsbG93Q29weSIsInBhdGgiLCJvcCIsIkkiLCJEIiwicmV2b2tlIiwicHJveHkiLCJQcm94eSIsInJldm9jYWJsZSIsImhlIiwiU2UiLCJmcm9tIiwiSCIsIkYiLCJzcGxpY2UiLCJ1bnNoaWZ0Iiwic3VwZXIiLCJzaXplIiwia2V5cyIsInZhbHVlcyIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJNIiwiYmluZCIsImFhIiwiY2EiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiamEiLCJrYSIsImxhIiwibWEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwidHlwZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJzcGxpdCIsInRvTG93ZXJDYXNlIiwicmEiLCJzYSIsInRvVXBwZXJDYXNlIiwidGEiLCJwYSIsInFhIiwib2EiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInVhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJ2YSIsIndhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwic3RhY2siLCJ0cmltIiwibWF0Y2giLCJOYSIsIk9hIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJjb25zdHJ1Y3QiLCJkaXNwbGF5TmFtZSIsImluY2x1ZGVzIiwibmFtZSIsIlBhIiwidGFnIiwicmVuZGVyIiwiUWEiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlJhIiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJhYiIsImJiIiwiY2IiLCJkYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsImZiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJjaGlsZHJlbiIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwib2IiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInBiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJhc3BlY3RSYXRpbyIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInFiIiwicmIiLCJzYiIsInN0eWxlIiwiaW5kZXhPZiIsInNldFByb3BlcnR5IiwiY2hhckF0Iiwic3Vic3RyaW5nIiwidGIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwic291cmNlIiwidHJhY2siLCJ3YnIiLCJ1YiIsInZiIiwiaXMiLCJ3YiIsInhiIiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiTmIiLCJvbkVycm9yIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlRiIiwiVmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCJmbGFncyIsIldiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJYYiIsIlpiIiwiY2hpbGQiLCJzaWJsaW5nIiwiWWIiLCIkYiIsImFjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImJjIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJjYyIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiZGMiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiTWF0aCIsImNsejMyIiwicGMiLCJxYyIsImxvZyIsIkxOMiIsInJjIiwic2MiLCJ0YyIsInVjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInZjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJldmVudFRpbWVzIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJTYyIsInBvaW50ZXJJZCIsIlRjIiwibmF0aXZlRXZlbnQiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVycyIsIlZjIiwiV2MiLCJwcmlvcml0eSIsImlzRGVoeWRyYXRlZCIsImNvbnRhaW5lckluZm8iLCJYYyIsIlljIiwiZGlzcGF0Y2hFdmVudCIsInNoaWZ0IiwiWmMiLCIkYyIsImFkIiwiYmQiLCJjZCIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiZGQiLCJlZCIsInRyYW5zaXRpb24iLCJmZCIsImdkIiwiaGQiLCJVYyIsInN0b3BQcm9wYWdhdGlvbiIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2aWV3IiwiZGV0YWlsIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJJZCIsImNsaXBib2FyZERhdGEiLCJKZCIsIkxkIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlFkIiwia2V5IiwiZnJvbUNoYXJDb2RlIiwiY29kZSIsImxvY2F0aW9uIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJSZCIsIlRkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJZZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWmQiLCIkZCIsImRvY3VtZW50TW9kZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJldmVudCIsImxpc3RlbmVycyIsInFlIiwib25pbnB1dCIsImRldGFjaEV2ZW50IiwiYXR0YWNoRXZlbnQiLCJEZSIsIkhlIiwiSmUiLCJub2RlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJMZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiY29udGVudEVkaXRhYmxlIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImRvY3VtZW50RWxlbWVudCIsInN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJtaW4iLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImV4dGVuZCIsInJhbmdlQ291bnQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJlbGVtZW50IiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIlFlIiwiVWUiLCJWZSIsIldlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWGUiLCJZZSIsIlplIiwiYW5pbWF0aW9uIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwibGYiLCJtZiIsIm5mIiwiVWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwib2YiLCJwZiIsInFmIiwicmYiLCJyYW5kb20iLCJzZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwidGYiLCJ1ZiIsInBhcmVudFdpbmRvdyIsInZmIiwid2YiLCJuYSIsInhhIiwiJGEiLCJiYSIsImNoYXIiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiX19odG1sIiwiRmYiLCJzZXRUaW1lb3V0IiwiR2YiLCJjbGVhclRpbWVvdXQiLCJIZiIsIlByb21pc2UiLCJKZiIsInF1ZXVlTWljcm90YXNrIiwicmVzb2x2ZSIsInRoZW4iLCJjYXRjaCIsIklmIiwiS2YiLCJMZiIsIk1mIiwicHJldmlvdXNTaWJsaW5nIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIkciLCJWZiIsIldmIiwiWGYiLCJZZiIsImNvbnRleHRUeXBlcyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIlpmIiwiY2hpbGRDb250ZXh0VHlwZXMiLCIkZiIsImFnIiwiYmciLCJnZXRDaGlsZENvbnRleHQiLCJjZyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiemciLCJBZyIsIkJnIiwiZWxlbWVudFR5cGUiLCJkZWxldGlvbnMiLCJDZyIsInBlbmRpbmdQcm9wcyIsIm92ZXJmbG93IiwidHJlZUNvbnRleHQiLCJyZXRyeUxhbmUiLCJEZyIsIm1vZGUiLCJFZyIsIkZnIiwiR2ciLCJtZW1vaXplZFByb3BzIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJyZWZzIiwiTWciLCJOZyIsIk9nIiwiaW5kZXgiLCJQZyIsIlFnIiwicHJvcHMiLCJSZyIsImltcGxlbWVudGF0aW9uIiwiU2ciLCJUZyIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJfY3VycmVudFZhbHVlIiwiYmgiLCJjaGlsZExhbmVzIiwiY2giLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsImRoIiwiZWgiLCJjb250ZXh0IiwibWVtb2l6ZWRWYWx1ZSIsImZoIiwiZ2giLCJoaCIsImludGVybGVhdmVkIiwiaWgiLCJqaCIsImtoIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwibGgiLCJtaCIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJ0YWdOYW1lIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJyZXZlYWxPcmRlciIsIkRoIiwiRWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsIkZoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJiYXNlUXVldWUiLCJxdWV1ZSIsIlVoIiwiVmgiLCJXaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiZ2V0U25hcHNob3QiLCJiaSIsImNpIiwiZGkiLCJsYXN0RWZmZWN0Iiwic3RvcmVzIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJpaSIsImRlc3Ryb3kiLCJkZXBzIiwiamkiLCJraSIsImxpIiwibWkiLCJuaSIsIm9pIiwicGkiLCJxaSIsInJpIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlSWQiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJpZGVudGlmaWVyUHJlZml4IiwiQ2kiLCJkZWZhdWx0UHJvcHMiLCJEaSIsIkVpIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIkZpIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJHaSIsImNvbnRleHRUeXBlIiwic3RhdGUiLCJ1cGRhdGVyIiwiSGkiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJJaSIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiSmkiLCJtZXNzYWdlIiwiZGlnZXN0IiwiS2kiLCJMaSIsImNvbnNvbGUiLCJlcnJvciIsIk1pIiwiV2Vha01hcCIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJSaSIsImNvbXBvbmVudFN0YWNrIiwiU2kiLCJwaW5nQ2FjaGUiLCJUaSIsIlVpIiwiVmkiLCJXaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJhaiIsImNvbXBhcmUiLCJiaiIsImNqIiwiZGoiLCJiYXNlTGFuZXMiLCJjYWNoZVBvb2wiLCJ0cmFuc2l0aW9ucyIsImVqIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJqaiIsImtqIiwicGVuZGluZ0NvbnRleHQiLCJsaiIsInpqIiwiQWoiLCJCaiIsIkNqIiwibWoiLCJuaiIsIm9qIiwiZmFsbGJhY2siLCJwaiIsInFqIiwic2oiLCJkYXRhc2V0IiwiZGdzdCIsInRqIiwidWoiLCJfcmVhY3RSZXRyeSIsInJqIiwic3VidHJlZUZsYWdzIiwidmoiLCJ3aiIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsTW9kZSIsInhqIiwiRGoiLCJFaiIsIkZqIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwiYXV0b0ZvY3VzIiwiY3JlYXRlVGV4dE5vZGUiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIktqIiwiV2Vha1NldCIsIkxqIiwiTWoiLCJOaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJVaiIsIlZqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIldqIiwiWGoiLCJZaiIsIlpqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImFrIiwiYmsiLCJjayIsImRrIiwiZWsiLCJpc0hpZGRlbiIsImZrIiwiZ2siLCJkaXNwbGF5IiwiaGsiLCJpayIsImprIiwia2siLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsInNyYyIsIlZrIiwibGsiLCJjZWlsIiwibWsiLCJuayIsIm9rIiwicGsiLCJxayIsInJrIiwic2siLCJ0ayIsIkluZmluaXR5IiwidWsiLCJ2ayIsIndrIiwieGsiLCJ5ayIsInprIiwiQWsiLCJCayIsIkNrIiwiRGsiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJleHBpcmVkTGFuZXMiLCJ3YyIsImNhbGxiYWNrUHJpb3JpdHkiLCJpZyIsIkVrIiwiRmsiLCJHayIsIkhrIiwiSWsiLCJKayIsIktrIiwiTGsiLCJNayIsIk5rIiwiT2siLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiUGsiLCJ0aW1lb3V0SGFuZGxlIiwiUWsiLCJSayIsIlNrIiwiVGsiLCJVayIsIm11dGFibGVSZWFkTGFuZXMiLCJCYyIsIk9qIiwib25Db21taXRGaWJlclJvb3QiLCJtYyIsIm9uUmVjb3ZlcmFibGVFcnJvciIsIldrIiwib25Qb3N0Q29tbWl0RmliZXJSb290IiwiWGsiLCJZayIsIiRrIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImFsIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImJsIiwiY2FjaGUiLCJwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzIiwiZGwiLCJlbCIsImZsIiwiZ2wiLCJobCIsImlsIiwieWoiLCJaayIsImtsIiwicmVwb3J0RXJyb3IiLCJsbCIsIl9pbnRlcm5hbFJvb3QiLCJtbCIsIm5sIiwib2wiLCJwbCIsInJsIiwicWwiLCJ1bm1vdW50IiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsInNsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwidGwiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInVsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInZsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJjbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlIiwiaHlkcmF0ZVJvb3QiLCJoeWRyYXRlZFNvdXJjZXMiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiZXJyIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJDaGlsZHJlbiIsImNvdW50IiwidG9BcnJheSIsIm9ubHkiLCJDb21wb25lbnQiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiUHVyZUNvbXBvbmVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImFjdCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfZGVmYXVsdFZhbHVlIiwiX2dsb2JhbE5hbWUiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIm1lbW8iLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJwb3AiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsIm5hdmlnYXRvciIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImZsb29yIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInN0eWxlVGFnVHJhbnNmb3JtIiwic2V0QXR0cmlidXRlcyIsImluc2VydCIsImRvbUFQSSIsImluc2VydFN0eWxlRWxlbWVudCIsImxvY2FscyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsImFwaSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJnZXRUYXJnZXQiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsIkJvb2tzQ291bnQiLCJCYXNlVXJsIiwiQXBpS2V5IiwiX19jcmVhdGVCaW5kaW5nIiwiazIiLCJkZXNjIiwiX19zZXRNb2R1bGVEZWZhdWx0IiwiX19pbXBvcnRTdGFyIiwibW9kIiwiQXBwIiwicmVhY3RfMSIsInJlYWN0X3JlZHV4XzEiLCJoZWFkZXJfMSIsImJvb2tzX2xpc3RfMSIsImJvb2tfcGFnZV8xIiwibG9hZGluZ19wYWdlXzEiLCJfYSIsInRvdGFsSXRlbXMiLCJzZXRUb3RhbEl0ZW1zIiwiX2IiLCJib29rcyIsInNldEJvb2tzIiwiY3VycmVudFBhZ2UiLCJ1c2VTZWxlY3RvciIsInBhZ2UiLCJQYWdlIiwiSGVhZGVyIiwiQm9va0xpc3QiLCJCb29rUGFnZSIsIkxvYWdpbmdQYWdlIiwicmVuZGVyUGFnZSIsIl9faW1wb3J0RGVmYXVsdCIsIkJvb2tDYXJkIiwicGFnZVNsaWNlXzEiLCJjdXJyZW50Qm9va1NsaWNlXzEiLCJ2b2x1bWVJbmZvIiwiYm9vayIsImltYWdlTGlua3MiLCJjYXRlZ29yaWVzIiwidGl0bGUiLCJhdXRob3JzIiwidXNlRGlzcGF0Y2giLCJTaG93Qm9va1BhZ2UiLCJzZXRDdXJyZW50Qm9vayIsIlNldFBhZ2UiLCJjbGFzc05hbWUiLCJ0aHVtYm5haWwiLCJzbWFsbFRodW1ibmFpbCIsImFsdCIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsInJlamVjdGVkIiwiX19nZW5lcmF0b3IiLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIlR5cGVFcnJvciIsImJvb2tfY2FyZF8xIiwiZm91bmRTbGljZV8xIiwidXJsR2VuZXJhdG9yXzEiLCJfdGhpcyIsInN0YXJ0SW5kZXgiLCJzZXRzdGFydGluZGV4Iiwic2VhcmNoUGFyYW1zT2JqIiwiZm91bmQiLCJzZWFyY2hQYXJhbXMiLCJyZXNwb25zZSIsIlNldE5ld0luZGV4IiwiU2VhcmNoIiwiQ2F0ZWdvcmllcyIsIkZpbHRlciIsIlN0YXJ0SW5kZXgiLCJHZXRSZXNwb25zZUZyb21Cb29rQXBpIiwiaXRlbXMiLCJjdXJyZW50Qm9vayIsIkJvb2siLCJkZXNjcmlwdGlvbiIsInNldFNlYXJjaCIsImNhdGVnb3J5Iiwic2V0Q2F0ZWdvcnkiLCJfYyIsImZpbHRlciIsInNldEZpbHRlciIsImhhbmRsZVNlYXJjaCIsIlNldFNlYXJjaEluZm8iLCJwbGFjZWhvbGRlciIsIm9uS2V5RG93biIsIm9uQ2hhbmdlIiwiY2xpZW50XzEiLCJzdG9yZV8xIiwiYXBwXzEiLCJyb290RWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwic3RvcmUiLCJyZWR1eF8xIiwicm9vdFJlZHVjZXIiLCJjb21iaW5lUmVkdWNlcnMiLCJjbGVhckN1cnJlbnRCb29rIiwiY3VycmVudEJvb2tzU2xpY2UiLCJjcmVhdGVTbGljZSIsImluaXRpYWxTdGF0ZSIsInJlZHVjZXJzIiwiYWN0aW9ucyIsInJlZHVjZXIiLCJGb3VuZFNsaWNlIiwiUGFnZVNsaWNlIiwidG9vbGtpdF8xIiwicm9vdFJlZHVjZXJfMSIsImNvbmZpZ3VyZVN0b3JlIiwiYXhpb3NfMSIsImNvbmZpZ18xIiwiU2VhcmNoUGFyYW0iLCJwYXJhbXMiLCJvcmRlckJ5IiwibWF4UmVzdWx0cyIsInVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yIiwiaGFzVmFsdWUiLCJGdCIsIlZ0IiwiX3QiLCJMdCIsIlJlZHVjZXJUeXBlIiwiU0hPVUxEX0FVVE9CQVRDSCIsIlRhc2tBYm9ydEVycm9yIiwiVHVwbGUiLCJhZGRMaXN0ZW5lciIsImFzeW5jVGh1bmtDcmVhdG9yIiwicHQiLCJhdXRvQmF0Y2hFbmhhbmNlciIsImJ1aWxkQ3JlYXRlU2xpY2UiLCJHZSIsImNsZWFyQWxsTGlzdGVuZXJzIiwiY29tYmluZVNsaWNlcyIsImp0IiwiZHQiLCJjcmVhdGVBY3Rpb24iLCJjcmVhdGVBY3Rpb25DcmVhdG9ySW52YXJpYW50TWlkZGxld2FyZSIsImNyZWF0ZUFzeW5jVGh1bmsiLCJjcmVhdGVEcmFmdFNhZmVTZWxlY3RvciIsImNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yQ3JlYXRvciIsImNyZWF0ZUR5bmFtaWNNaWRkbGV3YXJlIiwiT3QiLCJjcmVhdGVFbnRpdHlBZGFwdGVyIiwiU3QiLCJjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUiLCJ0dCIsImNyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZSIsInZ0IiwiY3JlYXRlTmV4dFN0YXRlIiwiY3JlYXRlUmVkdWNlciIsImNyZWF0ZVNlbGVjdG9yIiwiY3JlYXRlU2VsZWN0b3JDcmVhdG9yIiwiY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlIiwib3QiLCJmdCIsImZpbmROb25TZXJpYWxpemFibGVWYWx1ZSIsImZvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCJpc0FjdGlvbkNyZWF0b3IiLCJpc0FsbE9mIiwiaXNBbnlPZiIsImlzQXN5bmNUaHVua0FjdGlvbiIsImlzRmx1eFN0YW5kYXJkQWN0aW9uIiwiaXNGdWxmaWxsZWQiLCJpc0ltbXV0YWJsZURlZmF1bHQiLCJldCIsImlzUGVuZGluZyIsImlzUGxhaW4iLCJpc1JlamVjdGVkIiwiaXNSZWplY3RlZFdpdGhWYWx1ZSIsImxydU1lbW9pemUiLCJtaW5pU2VyaWFsaXplRXJyb3IiLCJuYW5vaWQiLCJwcmVwYXJlQXV0b0JhdGNoZWQiLCJpdCIsInJlbW92ZUxpc3RlbmVyIiwidW53cmFwUmVzdWx0Iiwid2Vha01hcE1lbW9pemUiLCJ3aXRoVHlwZXMiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18iLCJjb21wb3NlIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsImlzQWN0aW9uIiwiZXZlcnkiLCJXdCIsInNwZWNpZXMiLCJwcmVwZW5kIiwibnQiLCJpc1BsYWluT2JqZWN0Iiwia2V5UGF0aCIsInNvbWUiLCJSZWdFeHAiLCJydCIsImF0IiwidGh1bmsiLCJpbW11dGFibGVDaGVjayIsInNlcmlhbGl6YWJsZUNoZWNrIiwiYWN0aW9uQ3JlYXRvckNoZWNrIiwiR3QiLCJ3aXRoRXh0cmFBcmd1bWVudCIsImV4dHJhQXJndW1lbnQiLCJzdCIsIkJ0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicXVldWVOb3RpZmljYXRpb24iLCJ0aW1lb3V0Iiwic3Vic2NyaWJlIiwiY3QiLCJhdXRvQmF0Y2giLCJtaWRkbGV3YXJlIiwiZGV2VG9vbHMiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VycyIsInRyYWNlIiwiYXBwbHlNaWRkbGV3YXJlIiwiY3JlYXRlU3RvcmUiLCJhZGRDYXNlIiwiYWRkTWF0Y2hlciIsIm1hdGNoZXIiLCJhZGREZWZhdWx0Q2FzZSIsIkt0IiwicmVkdWNlIiwiZ2V0SW5pdGlhbFN0YXRlIiwidXQiLCJyZXF1ZXN0SWQiLCJyZXF1ZXN0U3RhdHVzIiwicmVqZWN0ZWRXaXRoVmFsdWUiLCJmbGF0TWFwIiwicXQiLCJfdHlwZSIsImFyZyIsInNlcmlhbGl6ZUVycm9yIiwiYWJvcnRlZCIsImNvbmRpdGlvbiIsImlkR2VuZXJhdG9yIiwiQWJvcnRDb250cm9sbGVyIiwiYWJvcnQiLCJhc3luYyIsImdldFN0YXRlIiwiZXh0cmEiLCIkdCIsInNpZ25hbCIsImdldFBlbmRpbmdNZXRhIiwicmFjZSIsInJlamVjdFdpdGhWYWx1ZSIsImZ1bGZpbGxXaXRoVmFsdWUiLCJkaXNwYXRjaENvbmRpdGlvblJlamVjdGlvbiIsInVud3JhcCIsInNldHRsZWQiLCJ0eXBlUHJlZml4IiwibHQiLCJyZWR1Y2VyV2l0aFByZXBhcmUiLCJhc3luY1RodW5rIiwiWHQiLCJjcmVhdG9ycyIsInJlZHVjZXJQYXRoIiwiX3JlZHVjZXJEZWZpbml0aW9uVHlwZSIsInBheWxvYWRDcmVhdG9yIiwicHJlcGFyZWRSZWR1Y2VyIiwicHJlcGFyZSIsIlF0Iiwic2xpY2VDYXNlUmVkdWNlcnNCeU5hbWUiLCJzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSIsImFjdGlvbkNyZWF0b3JzIiwic2xpY2VNYXRjaGVycyIsImV4cG9zZUFjdGlvbiIsImV4cG9zZUNhc2VSZWR1Y2VyIiwiZXh0cmFSZWR1Y2VycyIsInJlZHVjZXJOYW1lIiwiY3JlYXRlTm90YXRpb24iLCJadCIsImVuIiwiWXQiLCJ0biIsInNlbGVjdG9ycyIsIkp0IiwiZ2V0U2VsZWN0b3JzIiwic2VsZWN0U2xpY2UiLCJjYXNlUmVkdWNlcnMiLCJpbmplY3RJbnRvIiwidW53cmFwcGVkIiwiVHQiLCJybiIsIkF0IiwiaWRzIiwiY2hhbmdlcyIsImVudGl0aWVzIiwicmVtb3ZlQWxsIiwiYWRkT25lIiwiYWRkTWFueSIsInNldE9uZSIsInNldE1hbnkiLCJzZXRBbGwiLCJ1cGRhdGVPbmUiLCJ1cGRhdGVNYW55IiwidXBzZXJ0T25lIiwidXBzZXJ0TWFueSIsInJlbW92ZU9uZSIsInJlbW92ZU1hbnkiLCJhbiIsIm9uIiwic2VsZWN0SWQiLCJzb3J0Q29tcGFyZXIiLCJzb3J0IiwibXQiLCJ5dCIsInNlbGVjdElkcyIsInNlbGVjdEVudGl0aWVzIiwic2VsZWN0QWxsIiwic2VsZWN0VG90YWwiLCJzZWxlY3RCeUlkIiwiTXQiLCJndCIsImt0IiwieHQiLCJDdCIsIlJ0Iiwib25jZSIsInJlYXNvbiIsImZpbmFsbHkiLCJjbiIsInd0IiwiZG4iLCJzdGF0dXMiLCJFdCIsInBhdXNlIiwiYXV0b0pvaW4iLCJjYW5jZWwiLCJidCIsImFjdGlvbkNyZWF0b3IiLCJwcmVkaWNhdGUiLCJlZmZlY3QiLCJJdCIsInVuc3Vic2NyaWJlIiwiUHQiLCJwbiIsImNhbmNlbEFjdGl2ZSIsImdldE9yaWdpbmFsU3RhdGUiLCJ1biIsIkJvb2xlYW4iLCJ0YWtlIiwiZm9yayIsImNhbmNlbEFjdGl2ZUxpc3RlbmVycyIsInRocm93SWZDYW5jZWxsZWQiLCJyYWlzZWRCeSIsImFsbCIsImxuIiwic3RhcnRMaXN0ZW5pbmciLCJzdG9wTGlzdGVuaW5nIiwiY2xlYXJMaXN0ZW5lcnMiLCJEdCIsImluc3RhbmNlSWQiLCJhcHBsaWVkIiwiZm4iLCJ5biIsImFkZE1pZGRsZXdhcmUiLCJ3aXRoTWlkZGxld2FyZSIsIk50IiwiQW4iLCJobiIsIm1uIiwiU24iLCJnbiIsIlRuIiwia24iLCJmcm9tRW50cmllcyIsIndpdGhMYXp5TG9hZGVkU2xpY2VzIiwib3ZlcnJpZGVFeGlzdGluZyIsInNlbGVjdG9yIiwia2luZE9mIiwidGhpbmciLCJzdHIiLCJraW5kT2ZUZXN0IiwidHlwZU9mVGVzdCIsImlzVW5kZWZpbmVkIiwiaXNBcnJheUJ1ZmZlciIsImlzU3RyaW5nIiwiaXNGdW5jdGlvbiIsImlzTnVtYmVyIiwiaXNPYmplY3QiLCJ2YWwiLCJ0b1N0cmluZ1RhZyIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzRmlsZUxpc3QiLCJpc1VSTFNlYXJjaFBhcmFtcyIsImlzUmVhZGFibGVTdHJlYW0iLCJpc1JlcXVlc3QiLCJpc1Jlc3BvbnNlIiwiaXNIZWFkZXJzIiwiYWxsT3duS2V5cyIsImxlbiIsImZpbmRLZXkiLCJfa2V5IiwiX2dsb2JhbCIsImdsb2JhbFRoaXMiLCJzZWxmIiwiaXNDb250ZXh0RGVmaW5lZCIsImlzVHlwZWRBcnJheSIsIlR5cGVkQXJyYXkiLCJVaW50OEFycmF5IiwiaXNIVE1MRm9ybSIsInByb3AiLCJpc1JlZ0V4cCIsInJlZHVjZURlc2NyaXB0b3JzIiwiZGVzY3JpcHRvcnMiLCJyZWR1Y2VkRGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9yIiwicmV0IiwiZGVmaW5lUHJvcGVydGllcyIsIkFMUEhBIiwiRElHSVQiLCJBTFBIQUJFVCIsIkFMUEhBX0RJR0lUIiwiaXNBc3luY0ZuIiwidXRpbHMkMSIsImlzQnVmZmVyIiwiaXNGb3JtRGF0YSIsImtpbmQiLCJGb3JtRGF0YSIsImFwcGVuZCIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc0Jvb2xlYW4iLCJpc1N0cmVhbSIsInBpcGUiLCJtZXJnZSIsImNhc2VsZXNzIiwiYXNzaWduVmFsdWUiLCJ0YXJnZXRLZXkiLCJzdHJpcEJPTSIsImNoYXJDb2RlQXQiLCJpbmhlcml0cyIsInN1cGVyQ29uc3RydWN0b3IiLCJ0b0ZsYXRPYmplY3QiLCJzb3VyY2VPYmoiLCJkZXN0T2JqIiwicHJvcEZpbHRlciIsIm1lcmdlZCIsImVuZHNXaXRoIiwic2VhcmNoU3RyaW5nIiwicG9zaXRpb24iLCJsYXN0SW5kZXgiLCJhcnIiLCJmb3JFYWNoRW50cnkiLCJwYWlyIiwibWF0Y2hBbGwiLCJyZWdFeHAiLCJtYXRjaGVzIiwiZXhlYyIsImhhc093blByb3AiLCJmcmVlemVNZXRob2RzIiwidG9PYmplY3RTZXQiLCJhcnJheU9yU3RyaW5nIiwiZGVsaW1pdGVyIiwiZGVmaW5lIiwidG9DYW1lbENhc2UiLCJwMSIsInAyIiwibm9vcCIsInRvRmluaXRlTnVtYmVyIiwiaXNGaW5pdGUiLCJnbG9iYWwiLCJnZW5lcmF0ZVN0cmluZyIsImFscGhhYmV0IiwiaXNTcGVjQ29tcGxpYW50Rm9ybSIsInRvSlNPTk9iamVjdCIsInZpc2l0IiwicmVkdWNlZFZhbHVlIiwiaXNUaGVuYWJsZSIsIkF4aW9zRXJyb3IiLCJjb25maWciLCJyZXF1ZXN0IiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJ0b0pTT04iLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJwcm90b3R5cGUkMSIsImlzVmlzaXRhYmxlIiwicmVtb3ZlQnJhY2tldHMiLCJyZW5kZXJLZXkiLCJkb3RzIiwidG9rZW4iLCJjdXN0b21Qcm9wcyIsImF4aW9zRXJyb3IiLCJjYXVzZSIsInByZWRpY2F0ZXMiLCJ0b0Zvcm1EYXRhIiwiZm9ybURhdGEiLCJtZXRhVG9rZW5zIiwiaW5kZXhlcyIsIm9wdGlvbiIsInZpc2l0b3IiLCJkZWZhdWx0VmlzaXRvciIsInVzZUJsb2IiLCJCbG9iIiwiY29udmVydFZhbHVlIiwidG9JU09TdHJpbmciLCJCdWZmZXIiLCJpc0ZsYXRBcnJheSIsImV4cG9zZWRIZWxwZXJzIiwiYnVpbGQiLCJlbmNvZGUkMSIsImNoYXJNYXAiLCJBeGlvc1VSTFNlYXJjaFBhcmFtcyIsIl9wYWlycyIsImVuY29kZSIsImJ1aWxkVVJMIiwiX2VuY29kZSIsInNlcmlhbGl6ZUZuIiwic2VyaWFsaXplIiwic2VyaWFsaXplZFBhcmFtcyIsImhhc2htYXJrSW5kZXgiLCJlbmNvZGVyIiwiSW50ZXJjZXB0b3JNYW5hZ2VyJDEiLCJoYW5kbGVycyIsInVzZSIsInN5bmNocm9ub3VzIiwicnVuV2hlbiIsImVqZWN0IiwidHJhbnNpdGlvbmFsRGVmYXVsdHMiLCJzaWxlbnRKU09OUGFyc2luZyIsImZvcmNlZEpTT05QYXJzaW5nIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsInBsYXRmb3JtJDEiLCJpc0Jyb3dzZXIiLCJjbGFzc2VzIiwiVVJMU2VhcmNoUGFyYW1zIiwicHJvdG9jb2xzIiwiaGFzQnJvd3NlckVudiIsImhhc1N0YW5kYXJkQnJvd3NlckVudiIsInByb2R1Y3QiLCJoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYiLCJXb3JrZXJHbG9iYWxTY29wZSIsImltcG9ydFNjcmlwdHMiLCJvcmlnaW4iLCJwbGF0Zm9ybSIsIl9fcHJvdG9fXyIsImZvcm1EYXRhVG9KU09OIiwiYnVpbGRQYXRoIiwiaXNOdW1lcmljS2V5IiwiaXNMYXN0IiwiYXJyYXlUb09iamVjdCIsInBhcnNlUHJvcFBhdGgiLCJkZWZhdWx0cyIsInRyYW5zaXRpb25hbCIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiaGVhZGVycyIsImNvbnRlbnRUeXBlIiwiZ2V0Q29udGVudFR5cGUiLCJoYXNKU09OQ29udGVudFR5cGUiLCJpc09iamVjdFBheWxvYWQiLCJzZXRDb250ZW50VHlwZSIsImhlbHBlcnMiLCJpc05vZGUiLCJ0b1VSTEVuY29kZWRGb3JtIiwiZm9ybVNlcmlhbGl6ZXIiLCJfRm9ybURhdGEiLCJlbnYiLCJyYXdWYWx1ZSIsInBhcnNlciIsInBhcnNlIiwic3RyaW5naWZ5U2FmZWx5IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJKU09OUmVxdWVzdGVkIiwicmVzcG9uc2VUeXBlIiwic3RyaWN0SlNPTlBhcnNpbmciLCJFUlJfQkFEX1JFU1BPTlNFIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJjb21tb24iLCJtZXRob2QiLCJkZWZhdWx0cyQxIiwiaWdub3JlRHVwbGljYXRlT2YiLCIkaW50ZXJuYWxzIiwibm9ybWFsaXplSGVhZGVyIiwiaGVhZGVyIiwibm9ybWFsaXplVmFsdWUiLCJtYXRjaEhlYWRlclZhbHVlIiwiaXNIZWFkZXJOYW1lRmlsdGVyIiwiQXhpb3NIZWFkZXJzIiwidmFsdWVPclJld3JpdGUiLCJyZXdyaXRlIiwic2V0SGVhZGVyIiwiX3ZhbHVlIiwiX2hlYWRlciIsIl9yZXdyaXRlIiwibEhlYWRlciIsInNldEhlYWRlcnMiLCJyYXdIZWFkZXJzIiwicGFyc2VkIiwibGluZSIsInBhcnNlSGVhZGVycyIsInRva2VucyIsInRva2Vuc1JFIiwicGFyc2VUb2tlbnMiLCJkZWxldGVkIiwiZGVsZXRlSGVhZGVyIiwibm9ybWFsaXplIiwiZm9ybWF0Iiwibm9ybWFsaXplZCIsImZvcm1hdEhlYWRlciIsInRhcmdldHMiLCJhc1N0cmluZ3MiLCJmaXJzdCIsImNvbXB1dGVkIiwiYWNjZXNzb3IiLCJhY2Nlc3NvcnMiLCJkZWZpbmVBY2Nlc3NvciIsImFjY2Vzc29yTmFtZSIsIm1ldGhvZE5hbWUiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJidWlsZEFjY2Vzc29ycyIsIm1hcHBlZCIsImhlYWRlclZhbHVlIiwiQXhpb3NIZWFkZXJzJDEiLCJ0cmFuc2Zvcm1EYXRhIiwiZm5zIiwiaXNDYW5jZWwiLCJfX0NBTkNFTF9fIiwiQ2FuY2VsZWRFcnJvciIsIkVSUl9DQU5DRUxFRCIsInNldHRsZSIsIkVSUl9CQURfUkVRVUVTVCIsInByb2dyZXNzRXZlbnRSZWR1Y2VyIiwiaXNEb3dubG9hZFN0cmVhbSIsImZyZXEiLCJieXRlc05vdGlmaWVkIiwiX3NwZWVkb21ldGVyIiwic2FtcGxlc0NvdW50IiwiYnl0ZXMiLCJ0aW1lc3RhbXBzIiwiZmlyc3RTYW1wbGVUUyIsImNodW5rTGVuZ3RoIiwic3RhcnRlZEF0IiwiYnl0ZXNDb3VudCIsInBhc3NlZCIsInJvdW5kIiwic3BlZWRvbWV0ZXIiLCJ0aW1lc3RhbXAiLCJ0aHJlc2hvbGQiLCJ0aW1lciIsImZvcmNlIiwidGhyb3R0bGUiLCJsb2FkZWQiLCJ0b3RhbCIsImxlbmd0aENvbXB1dGFibGUiLCJwcm9ncmVzc0J5dGVzIiwicmF0ZSIsInByb2dyZXNzIiwiZXN0aW1hdGVkIiwiaXNVUkxTYW1lT3JpZ2luIiwibXNpZSIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwib3JpZ2luVVJMIiwicmVzb2x2ZVVSTCIsInByb3RvY29sIiwiaG9zdCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwicmVxdWVzdFVSTCIsImNvb2tpZXMiLCJ3cml0ZSIsImV4cGlyZXMiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsInJlYWQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJidWlsZEZ1bGxQYXRoIiwiYmFzZVVSTCIsInJlcXVlc3RlZFVSTCIsInJlbGF0aXZlVVJMIiwiY29tYmluZVVSTHMiLCJoZWFkZXJzVG9PYmplY3QiLCJtZXJnZUNvbmZpZyIsImNvbmZpZzEiLCJjb25maWcyIiwiZ2V0TWVyZ2VkVmFsdWUiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwidmFsdWVGcm9tQ29uZmlnMiIsImRlZmF1bHRUb0NvbmZpZzIiLCJtZXJnZURpcmVjdEtleXMiLCJtZXJnZU1hcCIsInBhcmFtc1NlcmlhbGl6ZXIiLCJ0aW1lb3V0TWVzc2FnZSIsIndpdGhDcmVkZW50aWFscyIsIndpdGhYU1JGVG9rZW4iLCJvblVwbG9hZFByb2dyZXNzIiwib25Eb3dubG9hZFByb2dyZXNzIiwiZGVjb21wcmVzcyIsImJlZm9yZVJlZGlyZWN0IiwidHJhbnNwb3J0IiwiaHR0cEFnZW50IiwiaHR0cHNBZ2VudCIsImNhbmNlbFRva2VuIiwic29ja2V0UGF0aCIsInJlc3BvbnNlRW5jb2RpbmciLCJjb25maWdWYWx1ZSIsInJlc29sdmVDb25maWciLCJuZXdDb25maWciLCJhdXRoIiwidXNlcm5hbWUiLCJ4c3JmVmFsdWUiLCJ4aHJBZGFwdGVyIiwiWE1MSHR0cFJlcXVlc3QiLCJfY29uZmlnIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsIm9uQ2FuY2VsZWQiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib3BlbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsIm9uYWJvcnQiLCJFQ09OTkFCT1JURUQiLCJvbmVycm9yIiwiRVJSX05FVFdPUksiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwiRVRJTUVET1VUIiwic2V0UmVxdWVzdEhlYWRlciIsInVwbG9hZCIsInBhcnNlUHJvdG9jb2wiLCJzZW5kIiwiY29tcG9zZVNpZ25hbHMkMSIsInNpZ25hbHMiLCJjb250cm9sbGVyIiwic3RyZWFtQ2h1bmsiLCJjaHVuayIsImNodW5rU2l6ZSIsImJ5dGVMZW5ndGgiLCJwb3MiLCJ0cmFja1N0cmVhbSIsInN0cmVhbSIsIm9uUHJvZ3Jlc3MiLCJvbkZpbmlzaCIsIml0ZXJhYmxlIiwicmVhZEJ5dGVzIiwiUmVhZGFibGVTdHJlYW0iLCJwdWxsIiwiY2xvc2UiLCJlbnF1ZXVlIiwiaGlnaFdhdGVyTWFyayIsImZldGNoUHJvZ3Jlc3NEZWNvcmF0b3IiLCJpc0ZldGNoU3VwcG9ydGVkIiwiZmV0Y2giLCJSZXF1ZXN0IiwiUmVzcG9uc2UiLCJpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkIiwiZW5jb2RlVGV4dCIsIlRleHRFbmNvZGVyIiwiYXJyYXlCdWZmZXIiLCJzdXBwb3J0c1JlcXVlc3RTdHJlYW0iLCJkdXBsZXhBY2Nlc3NlZCIsImhhc0NvbnRlbnRUeXBlIiwiZHVwbGV4Iiwic3VwcG9ydHNSZXNwb25zZVN0cmVhbSIsInJlc29sdmVycyIsInJlcyIsIkVSUl9OT1RfU1VQUE9SVCIsImtub3duQWRhcHRlcnMiLCJodHRwIiwieGhyIiwiZmV0Y2hPcHRpb25zIiwiZmluaXNoZWQiLCJjb21wb3NlZFNpZ25hbCIsInN0b3BUaW1lb3V0IiwicmVxdWVzdENvbnRlbnRMZW5ndGgiLCJnZXRDb250ZW50TGVuZ3RoIiwiZ2V0Qm9keUxlbmd0aCIsInJlc29sdmVCb2R5TGVuZ3RoIiwiY29udGVudFR5cGVIZWFkZXIiLCJfcmVxdWVzdCIsImlzU3RyZWFtUmVzcG9uc2UiLCJyZXNwb25zZUNvbnRlbnRMZW5ndGgiLCJyZXNwb25zZURhdGEiLCJyZW5kZXJSZWFzb24iLCJpc1Jlc29sdmVkSGFuZGxlIiwiYWRhcHRlcnMiLCJuYW1lT3JBZGFwdGVyIiwicmVqZWN0ZWRSZWFzb25zIiwicmVhc29ucyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiZGlzcGF0Y2hSZXF1ZXN0IiwidmFsaWRhdG9ycyQxIiwiZGVwcmVjYXRlZFdhcm5pbmdzIiwidmFsaWRhdG9yIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsIm9wdHMiLCJFUlJfREVQUkVDQVRFRCIsIndhcm4iLCJhc3NlcnRPcHRpb25zIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwiRVJSX0JBRF9PUFRJT05fVkFMVUUiLCJFUlJfQkFEX09QVElPTiIsInZhbGlkYXRvcnMiLCJBeGlvcyIsImluc3RhbmNlQ29uZmlnIiwiaW50ZXJjZXB0b3JzIiwiY29uZmlnT3JVcmwiLCJkdW1teSIsImJvb2xlYW4iLCJmdW5jdGlvbiIsImNvbnRleHRIZWFkZXJzIiwicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCJzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsInByb21pc2UiLCJjaGFpbiIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImdldFVyaSIsImdlbmVyYXRlSFRUUE1ldGhvZCIsImlzRm9ybSIsIkF4aW9zJDEiLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJfbGlzdGVuZXJzIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsIkNhbmNlbFRva2VuJDEiLCJIdHRwU3RhdHVzQ29kZSIsIkNvbnRpbnVlIiwiU3dpdGNoaW5nUHJvdG9jb2xzIiwiUHJvY2Vzc2luZyIsIkVhcmx5SGludHMiLCJDcmVhdGVkIiwiQWNjZXB0ZWQiLCJOb25BdXRob3JpdGF0aXZlSW5mb3JtYXRpb24iLCJOb0NvbnRlbnQiLCJSZXNldENvbnRlbnQiLCJQYXJ0aWFsQ29udGVudCIsIk11bHRpU3RhdHVzIiwiQWxyZWFkeVJlcG9ydGVkIiwiSW1Vc2VkIiwiTXVsdGlwbGVDaG9pY2VzIiwiTW92ZWRQZXJtYW5lbnRseSIsIkZvdW5kIiwiU2VlT3RoZXIiLCJOb3RNb2RpZmllZCIsIlVzZVByb3h5IiwiVW51c2VkIiwiVGVtcG9yYXJ5UmVkaXJlY3QiLCJQZXJtYW5lbnRSZWRpcmVjdCIsIkJhZFJlcXVlc3QiLCJVbmF1dGhvcml6ZWQiLCJQYXltZW50UmVxdWlyZWQiLCJGb3JiaWRkZW4iLCJOb3RGb3VuZCIsIk1ldGhvZE5vdEFsbG93ZWQiLCJOb3RBY2NlcHRhYmxlIiwiUHJveHlBdXRoZW50aWNhdGlvblJlcXVpcmVkIiwiUmVxdWVzdFRpbWVvdXQiLCJDb25mbGljdCIsIkdvbmUiLCJMZW5ndGhSZXF1aXJlZCIsIlByZWNvbmRpdGlvbkZhaWxlZCIsIlBheWxvYWRUb29MYXJnZSIsIlVyaVRvb0xvbmciLCJVbnN1cHBvcnRlZE1lZGlhVHlwZSIsIlJhbmdlTm90U2F0aXNmaWFibGUiLCJFeHBlY3RhdGlvbkZhaWxlZCIsIkltQVRlYXBvdCIsIk1pc2RpcmVjdGVkUmVxdWVzdCIsIlVucHJvY2Vzc2FibGVFbnRpdHkiLCJMb2NrZWQiLCJGYWlsZWREZXBlbmRlbmN5IiwiVG9vRWFybHkiLCJVcGdyYWRlUmVxdWlyZWQiLCJQcmVjb25kaXRpb25SZXF1aXJlZCIsIlRvb01hbnlSZXF1ZXN0cyIsIlJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZSIsIlVuYXZhaWxhYmxlRm9yTGVnYWxSZWFzb25zIiwiSW50ZXJuYWxTZXJ2ZXJFcnJvciIsIk5vdEltcGxlbWVudGVkIiwiQmFkR2F0ZXdheSIsIlNlcnZpY2VVbmF2YWlsYWJsZSIsIkdhdGV3YXlUaW1lb3V0IiwiSHR0cFZlcnNpb25Ob3RTdXBwb3J0ZWQiLCJWYXJpYW50QWxzb05lZ290aWF0ZXMiLCJJbnN1ZmZpY2llbnRTdG9yYWdlIiwiTG9vcERldGVjdGVkIiwiTm90RXh0ZW5kZWQiLCJOZXR3b3JrQXV0aGVudGljYXRpb25SZXF1aXJlZCIsIkh0dHBTdGF0dXNDb2RlJDEiLCJheGlvcyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsIlZFUlNJT04iLCJDYW5jZWwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsImZvcm1Ub0pTT04iLCJnZXRBZGFwdGVyIiwiUmVhY3RSZWR1eENvbnRleHQiLCJiYXRjaCIsImNvbm5lY3QiLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJjcmVhdGVTZWxlY3Rvckhvb2siLCJjcmVhdGVTdG9yZUhvb2siLCJzaGFsbG93RXF1YWwiLCJ1c2VTdG9yZSIsImVxdWFsaXR5Rm4iLCJkZXZNb2RlQ2hlY2tzIiwic3Vic2NyaXB0aW9uIiwiZ2V0U2VydmVyU3RhdGUiLCJzdGFiaWxpdHlDaGVjayIsImlkZW50aXR5RnVuY3Rpb25DaGVjayIsImFkZE5lc3RlZFN1YiIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImRlcGVuZHNPbk93blByb3BzIiwibWFwVG9Qcm9wcyIsIndyYXBwZWRDb21wb25lbnROYW1lIiwibm90aWZ5Iiwib25TdGF0ZUNoYW5nZSIsInByZXYiLCJub3RpZnlOZXN0ZWRTdWJzIiwiaGFuZGxlQ2hhbmdlV3JhcHBlciIsImlzU3Vic2NyaWJlZCIsInRyeVN1YnNjcmliZSIsInRyeVVuc3Vic2NyaWJlIiwiZ2V0TGlzdGVuZXJzIiwiZ2V0RGVmYXVsdFByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiaHQiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInB1cmUiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiV3JhcHBlZENvbXBvbmVudCIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmIiwic2VydmVyU3RhdGUiLCJfX2RlZlByb3AiLCJfX2dldE93blByb3BEZXNjIiwiX19nZXRPd25Qcm9wTmFtZXMiLCJfX2hhc093blByb3AiLCJzcmNfZXhwb3J0cyIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsIl9fZXhwb3J0IiwidG8iLCJleGNlcHQiLCJfX2NvcHlQcm9wcyIsIl9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMiLCJhY3Rpb25UeXBlc19kZWZhdWx0IiwiYmluZEFjdGlvbkNyZWF0b3JzIiwibGVnYWN5X2NyZWF0ZVN0b3JlIiwic3ltYm9sX29ic2VydmFibGVfZGVmYXVsdCIsIm9ic2VydmFibGUiLCJyYW5kb21TdHJpbmciLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwicHJvdG8iLCJlbmhhbmNlciIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJsaXN0ZW5lcklkQ291bnRlciIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwibGlzdGVuZXJJZCIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwib2JzZXJ2ZXJBc09ic2VydmVyIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwiZmluYWxSZWR1Y2VyS2V5cyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwibmV4dFN0YXRlIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYXJncyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJmdW5jcyIsIm1pZGRsZXdhcmVzIiwiY3JlYXRlU3RvcmUyIiwibWlkZGxld2FyZUFQSSIsImNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciIsInJlZmVyZW5jZUVxdWFsaXR5Q2hlY2siLCJzZXRHbG9iYWxEZXZNb2RlQ2hlY2tzIiwidW5zdGFibGVfYXV0b3RyYWNrTWVtb2l6ZSIsImF1dG90cmFja01lbW9pemUiLCJnbG9iYWxEZXZNb2RlQ2hlY2tzIiwiaW5wdXRTdGFiaWxpdHlDaGVjayIsIk5PVF9GT1VORCIsImFzc2VydElzRnVuY3Rpb24iLCJmdW5jIiwiZXJyb3JNZXNzYWdlIiwiZW5zdXJlSXNBcnJheSIsIiRSRVZJU0lPTiIsIkNVUlJFTlRfVFJBQ0tFUiIsIkNlbGwiLCJyZXZpc2lvbiIsIl9sYXN0VmFsdWUiLCJfaXNFcXVhbCIsInRyaXBsZUVxIiwiaXNFcXVhbCIsIm5ld1ZhbHVlIiwiVHJhY2tpbmdDYWNoZSIsIl9jYWNoZWRWYWx1ZSIsIl9jYWNoZWRSZXZpc2lvbiIsIl9kZXBzIiwiaGl0cyIsImN1cnJlbnRUcmFja2VyIiwicHJldlRyYWNrZXIiLCJtYXgiLCJjZWxsIiwibmV2ZXJFcSIsImNyZWF0ZVRhZyIsImNyZWF0ZUNlbGwiLCJkaXJ0eVRhZyIsInN0b3JhZ2UiLCJjb25zdW1lQ29sbGVjdGlvbiIsImNvbGxlY3Rpb25UYWciLCJkaXJ0eUNvbGxlY3Rpb24iLCJuZXh0SWQiLCJPYmplY3RUcmVlTm9kZSIsIm9iamVjdFByb3h5SGFuZGxlciIsInRhZ3MiLCJjaGlsZFZhbHVlIiwiY2hpbGROb2RlIiwiY3JlYXRlTm9kZSIsImNhbGN1bGF0ZVJlc3VsdCIsIkFycmF5VHJlZU5vZGUiLCJhcnJheVByb3h5SGFuZGxlciIsInVwZGF0ZU5vZGUiLCJvbGRLZXlzU2l6ZSIsIm5ld0tleXNTaXplIiwiYW55S2V5c0FkZGVkIiwibmV3Q2hpbGRWYWx1ZSIsImRlbGV0ZU5vZGUiLCJjcmVhdGVDYWNoZUtleUNvbXBhcmF0b3IiLCJlcXVhbGl0eUNoZWNrIiwiZXF1YWxpdHlDaGVja09yT3B0aW9ucyIsInByb3ZpZGVkT3B0aW9ucyIsIm1heFNpemUiLCJyZXN1bHRFcXVhbGl0eUNoZWNrIiwiY29tcGFyYXRvciIsInJlc3VsdHNDb3VudCIsImVxdWFscyIsImVudHJ5IiwicHV0IiwiZ2V0RW50cmllcyIsImNyZWF0ZVNpbmdsZXRvbkNhY2hlIiwiY2FjaGVJbmRleCIsImZpbmRJbmRleCIsImNyZWF0ZUxydUNhY2hlIiwibWVtb2l6ZWQiLCJtYXRjaGluZ0VudHJ5IiwiZmluZCIsImNsZWFyQ2FjaGUiLCJyZXNldFJlc3VsdHNDb3VudCIsImxhc3RBcmdzIiwiUmVmIiwiV2Vha1JlZiIsImRlcmVmIiwiVU5URVJNSU5BVEVEIiwiVEVSTUlOQVRFRCIsImNyZWF0ZUNhY2hlTm9kZSIsImZuTm9kZSIsImxhc3RSZXN1bHQiLCJjYWNoZU5vZGUiLCJvYmplY3RDYWNoZSIsIm9iamVjdE5vZGUiLCJwcmltaXRpdmVDYWNoZSIsInByaW1pdGl2ZU5vZGUiLCJ0ZXJtaW5hdGVkTm9kZSIsImxhc3RSZXN1bHRWYWx1ZSIsIm1lbW9pemVPck9wdGlvbnMiLCJtZW1vaXplT3B0aW9uc0Zyb21BcmdzIiwiY3JlYXRlU2VsZWN0b3JDcmVhdG9yT3B0aW9ucyIsIm1lbW9pemUiLCJtZW1vaXplT3B0aW9ucyIsImNyZWF0ZVNlbGVjdG9yMiIsImNyZWF0ZVNlbGVjdG9yQXJncyIsInJlY29tcHV0YXRpb25zIiwiZGVwZW5kZW5jeVJlY29tcHV0YXRpb25zIiwiZGlyZWN0bHlQYXNzZWRPcHRpb25zIiwicmVzdWx0RnVuYyIsImNvbWJpbmVkT3B0aW9ucyIsImFyZ3NNZW1vaXplIiwiYXJnc01lbW9pemVPcHRpb25zIiwiZmluYWxNZW1vaXplT3B0aW9ucyIsImZpbmFsQXJnc01lbW9pemVPcHRpb25zIiwiYXJyYXkiLCJpdGVtVHlwZXMiLCJhc3NlcnRJc0FycmF5T2ZGdW5jdGlvbnMiLCJnZXREZXBlbmRlbmNpZXMiLCJtZW1vaXplZFJlc3VsdEZ1bmMiLCJpbnB1dFNlbGVjdG9yUmVzdWx0cyIsImlucHV0U2VsZWN0b3JBcmdzIiwiY29sbGVjdElucHV0U2VsZWN0b3JSZXN1bHRzIiwicmVzZXREZXBlbmRlbmN5UmVjb21wdXRhdGlvbnMiLCJyZXNldFJlY29tcHV0YXRpb25zIiwiaW5wdXRTZWxlY3RvcnNPYmplY3QiLCJzZWxlY3RvckNyZWF0b3IiLCJvYmplY3QiLCJhc3NlcnRJc09iamVjdCIsImlucHV0U2VsZWN0b3JLZXlzIiwiY29tcG9zaXRpb24iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiZGVmaW5pdGlvbiIsInNjcmlwdFVybCIsImN1cnJlbnRTY3JpcHQiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJiYXNlVVJJIiwibmMiXSwic291cmNlUm9vdCI6IiJ9